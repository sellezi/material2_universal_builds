{"version":3,"file":"material.umd.js","sources":["../../src/lib/module.ts","../../src/lib/core/data-table/index.ts","../../src/lib/core/data-table/data-source.ts","../../src/lib/core/data-table/data-table.ts","../../src/lib/core/data-table/cell.ts","../../src/lib/core/data-table/row.ts","../../src/lib/datepicker/index.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/autocomplete/index.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/core/a11y/activedescendant-key-manager.ts","../../src/lib/dialog/index.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-injector.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/menu/index.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/tooltip/index.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/toolbar/index.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/tabs/index.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/snack-bar/index.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/core/util/object-extend.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/input/index.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-container.ts","../../src/lib/input/input-container-errors.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-spinner/index.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/icon/index.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/chips/index.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip.ts","../../src/lib/card/index.ts","../../src/lib/card/card.ts","../../src/lib/grid-list/index.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/list/index.ts","../../src/lib/list/list.ts","../../src/lib/sidenav/index.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/slider/index.ts","../../src/lib/slider/slider.ts","../../src/lib/slide-toggle/index.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/select/index.ts","../../src/lib/select/select.ts","../../src/lib/select/select-errors.ts","../../src/lib/select/select-animations.ts","../../src/lib/core/a11y/focus-key-manager.ts","../../src/lib/core/a11y/list-key-manager.ts","../../src/lib/radio/index.ts","../../src/lib/radio/radio.ts","../../src/lib/checkbox/index.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/button/index.ts","../../src/lib/button/button.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/button-toggle/index.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/core/core.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/coercion/number-property.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/style/index.ts","../../src/lib/core/style/apply-transform.ts","../../src/lib/core/style/focus-origin-monitor.ts","../../src/lib/core/coordination/unique-selection-dispatcher.ts","../../src/lib/core/a11y/fake-mousedown.ts","../../src/lib/core/selection/selection.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/overlay/fullscreen-overlay-container.ts","../../src/lib/core/a11y/index.ts","../../src/lib/core/a11y/live-announcer.ts","../../src/lib/core/a11y/focus-trap.ts","../../src/lib/core/a11y/interactivity-checker.ts","../../src/lib/core/overlay/overlay-directives.ts","../../src/lib/core/overlay/overlay.ts","../../src/lib/core/overlay/overlay-container.ts","../../src/lib/core/overlay/position/overlay-position-builder.ts","../../src/lib/core/overlay/position/global-position-strategy.ts","../../src/lib/core/overlay/position/connected-position-strategy.ts","../../src/lib/core/overlay/position/connected-position.ts","../../src/lib/core/overlay/overlay-ref.ts","../../src/lib/core/portal/dom-portal-host.ts","../../src/lib/core/overlay/overlay-state.ts","../../src/lib/core/portal/portal-directives.ts","../../src/lib/core/portal/portal.ts","../../src/lib/core/portal/portal-errors.ts","../../src/lib/core/option/option.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/overlay/scroll/index.ts","../../src/lib/core/overlay/scroll/block-scroll-strategy.ts","../../src/lib/core/overlay/scroll/noop-scroll-strategy.ts","../../src/lib/core/overlay/scroll/close-scroll-strategy.ts","../../src/lib/core/overlay/scroll/reposition-scroll-strategy.ts","../../src/lib/core/overlay/scroll/scrollable.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/overlay/position/viewport-ruler.ts","../../src/lib/core/overlay/scroll/scroll-dispatcher.ts","../../src/lib/core/platform/index.ts","../../src/lib/core/platform/features.ts","../../src/lib/core/platform/platform.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/coercion/boolean-property.ts","../../src/lib/core/keyboard/keycodes.ts","../../src/lib/core/observe-content/observe-content.ts","../../src/lib/core/rtl/dir.ts","../../src/lib/core/line/line.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/compatibility/compatibility.ts","../../node_modules/tslib/tslib.es6.js"],"sourcesContent":["import {NgModule} from '@angular/core';\n\nimport {\n  A11yModule,\n  MdCommonModule,\n  MdRippleModule,\n  ObserveContentModule,\n  OverlayModule,\n  PortalModule,\n  RtlModule\n} from './core/index';\n\nimport {MdButtonToggleModule} from './button-toggle/index';\nimport {MdButtonModule} from './button/index';\nimport {MdCheckboxModule} from './checkbox/index';\nimport {MdRadioModule} from './radio/index';\nimport {MdSelectModule} from './select/index';\nimport {MdSlideToggleModule} from './slide-toggle/index';\nimport {MdSliderModule} from './slider/index';\nimport {MdSidenavModule} from './sidenav/index';\nimport {MdListModule} from './list/index';\nimport {MdGridListModule} from './grid-list/index';\nimport {MdCardModule} from './card/index';\nimport {MdChipsModule} from './chips/index';\nimport {MdIconModule} from './icon/index';\nimport {MdProgressSpinnerModule} from './progress-spinner/index';\nimport {MdProgressBarModule} from './progress-bar/index';\nimport {MdInputModule} from './input/index';\nimport {MdSnackBarModule} from './snack-bar/index';\nimport {MdTabsModule} from './tabs/index';\nimport {MdToolbarModule} from './toolbar/index';\nimport {MdTooltipModule} from './tooltip/index';\nimport {MdMenuModule} from './menu/index';\nimport {MdDialogModule} from './dialog/index';\nimport {PlatformModule} from './core/platform/index';\nimport {MdAutocompleteModule} from './autocomplete/index';\nimport {StyleModule} from './core/style/index';\nimport {MdDatepickerModule} from './datepicker/index';\nimport {CdkDataTableModule} from './core/data-table/index';\n\nconst /** @type {?} */ MATERIAL_MODULES = [\n  MdAutocompleteModule,\n  MdButtonModule,\n  MdButtonToggleModule,\n  MdCardModule,\n  MdChipsModule,\n  MdCheckboxModule,\n  MdDatepickerModule,\n  MdDialogModule,\n  MdGridListModule,\n  MdIconModule,\n  MdInputModule,\n  MdListModule,\n  MdMenuModule,\n  MdProgressBarModule,\n  MdProgressSpinnerModule,\n  MdRadioModule,\n  MdRippleModule,\n  MdSelectModule,\n  MdSidenavModule,\n  MdSliderModule,\n  MdSlideToggleModule,\n  MdSnackBarModule,\n  MdTabsModule,\n  MdToolbarModule,\n  MdTooltipModule,\n  OverlayModule,\n  PortalModule,\n  RtlModule,\n  StyleModule,\n  A11yModule,\n  PlatformModule,\n  MdCommonModule,\n  ObserveContentModule,\n  CdkDataTableModule\n];\n/**\n * @deprecated\n */\nexport class MaterialModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: MATERIAL_MODULES,\n  exports: MATERIAL_MODULES,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MaterialModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMaterialModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMaterialModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {HeaderRowPlaceholder, RowPlaceholder, CdkTable} from './data-table';\nimport {CdkCellOutlet, CdkHeaderRow, CdkHeaderRowDef, CdkRow, CdkRowDef} from './row';\nimport {CdkColumnDef, CdkHeaderCellDef, CdkHeaderCell, CdkCell, CdkCellDef} from './cell';\n\nexport {CollectionViewer,DataSource} from './data-source';\nexport {RowPlaceholder,HeaderRowPlaceholder,CdkTable} from './data-table';\nexport class CdkDataTableModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule],\n  exports: [\n    CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef,\n    CdkColumnDef, CdkCell, CdkRow,\n    CdkHeaderCell, CdkHeaderRow, CdkHeaderRowDef],\n  declarations: [\n    CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef,\n    CdkColumnDef, CdkCell, CdkRow,\n    CdkHeaderCell, CdkHeaderRow, CdkHeaderRowDef,\n    RowPlaceholder, HeaderRowPlaceholder,\n  ]\n\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CdkDataTableModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkDataTableModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkDataTableModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Observable} from 'rxjs/Observable';\n\nexport interface CollectionViewer {\n  viewChanged: Observable<{start: number, end: number}>;\n}\n/**\n * @abstract\n */\nexport abstract class DataSource<T> {\n/**\n * @abstract\n * @param {?} collectionViewer\n * @return {?}\n */\nconnect(collectionViewer: CollectionViewer) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  Input,\n  QueryList,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport'rxjs/add/operator/let';\nimport'rxjs/add/operator/debounceTime';\nimport'rxjs/add/observable/combineLatest';\nimport {CollectionViewer, DataSource} from './data-source';\nimport {CdkCellOutlet, CdkHeaderRowDef, CdkRowDef} from './row';\nimport {CdkCellDef, CdkColumnDef, CdkHeaderCellDef} from './cell';\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * \\@docs-private\n */\nexport class RowPlaceholder {\n/**\n * @param {?} viewContainer\n */\nconstructor(public viewContainer: ViewContainerRef) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[rowPlaceholder]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction RowPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nRowPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRowPlaceholder.ctorParameters;\n/** @type {?} */\nRowPlaceholder.prototype.viewContainer;\n}\n\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * \\@docs-private\n */\nexport class HeaderRowPlaceholder {\n/**\n * @param {?} viewContainer\n */\nconstructor(public viewContainer: ViewContainerRef) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[headerRowPlaceholder]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction HeaderRowPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nHeaderRowPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHeaderRowPlaceholder.ctorParameters;\n/** @type {?} */\nHeaderRowPlaceholder.prototype.viewContainer;\n}\n\n/**\n * A data table that connects with a data source to retrieve data and renders\n * a header row and data rows. Updates the rows when new data is provided by the data source.\n */\nexport class CdkTable implements CollectionViewer {\n/**\n * Provides a stream containing the latest data array to render. Influenced by the table's\n * stream of view window (what rows are currently on screen).\n */\ndataSource: DataSource<any>;\n/**\n * Stream containing the latest information on what rows are being displayed on screen.\n * Can be used by the data source to as a heuristic of what data should be provided.\n */\nviewChanged =\n      new BehaviorSubject<{start: number, end: number}>({start: 0, end: Number.MAX_VALUE});\n/**\n * Map of all the user's defined columns identified by name.\n * Contains the header and data-cell templates.\n */\nprivate _columnDefinitionsByName = new Map<string,  CdkColumnDef>();\n\n  // Placeholders within the table's template where the header and data rows will be inserted.\n   _rowPlaceholder: RowPlaceholder;\n   _headerRowPlaceholder: HeaderRowPlaceholder;\n/**\n * The column definitions provided by the user that contain what the header and cells should\n * render for each column.\n */\n_columnDefinitions: QueryList<CdkColumnDef>;\n/**\n * Template used as the header container.\n */\n_headerDefinition: CdkHeaderRowDef;\n/**\n * Set of templates that used as the data row containers.\n */\n_rowDefinitions: QueryList<CdkRowDef>;\n/**\n * @param {?} _changeDetectorRef\n */\nconstructor(private _changeDetectorRef: ChangeDetectorRef) {\n    console.warn('The data table is still in active development ' +\n        'and should be considered unstable.');\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // TODO(andrewseguin): Disconnect from the data source so\n    // that it can unsubscribe from its streams.\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    // TODO(andrewseguin): Setup a listener for scroll events\n    //   and emit the calculated view to this.viewChanged\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    // TODO(andrewseguin): Throw an error if two columns share the same name\n    this._columnDefinitions.forEach(columnDef => {\n      this._columnDefinitionsByName.set(columnDef.name, columnDef);\n    });\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    // TODO(andrewseguin): Re-render the header when the header's columns change.\n    this.renderHeaderRow();\n\n    // TODO(andrewseguin): Re-render rows when their list of columns change.\n    // TODO(andrewseguin): If the data source is not\n    //   present after view init, connect it when it is defined.\n    // TODO(andrewseguin): Unsubscribe from this on destroy.\n    this.dataSource.connect(this).subscribe((rowsData: any[]) => {\n      // TODO(andrewseguin): Add a differ that will check if the data has changed,\n      //   rather than re-rendering all rows\n      this._rowPlaceholder.viewContainer.clear();\n      rowsData.forEach(rowData => this.insertRow(rowData));\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * Create the embedded view for the header template and place it in the header row view container.\n * @return {?}\n */\nrenderHeaderRow() {\n    const /** @type {?} */ cells = this.getHeaderCellTemplatesForRow(this._headerDefinition);\n\n    // TODO(andrewseguin): add some code to enforce that exactly\n    // one CdkCellOutlet was instantiated as a result\n    // of `createEmbeddedView`.\n    this._headerRowPlaceholder.viewContainer\n        .createEmbeddedView(this._headerDefinition.template, {cells});\n    CdkCellOutlet.mostRecentCellOutlet.cells = cells;\n    CdkCellOutlet.mostRecentCellOutlet.context = {};\n  }\n/**\n * Create the embedded view for the data row template and place it in the correct index location\n * within the data row view container.\n * @param {?} rowData\n * @return {?}\n */\ninsertRow(rowData: any) {\n    // TODO(andrewseguin): Add when predicates to the row definitions\n    //   to find the right template to used based on\n    //   the data rather than choosing the first row definition.\n    const /** @type {?} */ row = this._rowDefinitions.first;\n\n    // TODO(andrewseguin): Add more context, such as first/last/isEven/etc\n    const /** @type {?} */ context = {$implicit: rowData};\n\n    // TODO(andrewseguin): add some code to enforce that exactly one\n    //   CdkCellOutlet was instantiated as a result  of `createEmbeddedView`.\n    this._rowPlaceholder.viewContainer.createEmbeddedView(row.template, context);\n\n    // Insert empty cells if there is no data to improve rendering time.\n    CdkCellOutlet.mostRecentCellOutlet.cells = rowData ? this.getCellTemplatesForRow(row) : [];\n    CdkCellOutlet.mostRecentCellOutlet.context = context;\n  }\n/**\n * Returns the cell template definitions to insert into the header\n * as defined by its list of columns to display.\n * @param {?} headerDef\n * @return {?}\n */\ngetHeaderCellTemplatesForRow(headerDef: CdkHeaderRowDef): CdkHeaderCellDef[] {\n    return headerDef.columns.map(columnId => {\n      return this._columnDefinitionsByName.get(columnId).headerCell;\n    });\n  }\n/**\n * Returns the cell template definitions to insert in the provided row\n * as defined by its list of columns to display.\n * @param {?} rowDef\n * @return {?}\n */\ngetCellTemplatesForRow(rowDef: CdkRowDef): CdkCellDef[] {\n    return rowDef.columns.map(columnId => {\n      return this._columnDefinitionsByName.get(columnId).cell;\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'cdk-table',\n  template: `\n    <ng-container headerRowPlaceholder></ng-container>\n    <ng-container rowPlaceholder></ng-container>\n  `,\n  host: {\n    'class': 'cdk-table',\n    'role': 'grid' // TODO(andrewseguin): Allow the user to choose either grid or treegrid\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'dataSource': [{ type: Input },],\n'_rowPlaceholder': [{ type: ViewChild, args: [RowPlaceholder, ] },],\n'_headerRowPlaceholder': [{ type: ViewChild, args: [HeaderRowPlaceholder, ] },],\n'_columnDefinitions': [{ type: ContentChildren, args: [CdkColumnDef, ] },],\n'_headerDefinition': [{ type: ContentChild, args: [CdkHeaderRowDef, ] },],\n'_rowDefinitions': [{ type: ContentChildren, args: [CdkRowDef, ] },],\n};\n}\n\nfunction CdkTable_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkTable.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkTable.ctorParameters;\n/** @type {?} */\nCdkTable.propDecorators;\n/**\n * Provides a stream containing the latest data array to render. Influenced by the table's\n * stream of view window (what rows are currently on screen).\n * @type {?}\n */\nCdkTable.prototype.dataSource;\n/**\n * Stream containing the latest information on what rows are being displayed on screen.\n * Can be used by the data source to as a heuristic of what data should be provided.\n * @type {?}\n */\nCdkTable.prototype.viewChanged;\n/**\n * Map of all the user's defined columns identified by name.\n * Contains the header and data-cell templates.\n * @type {?}\n */\nCdkTable.prototype._columnDefinitionsByName;\n/** @type {?} */\nCdkTable.prototype._rowPlaceholder;\n/** @type {?} */\nCdkTable.prototype._headerRowPlaceholder;\n/**\n * The column definitions provided by the user that contain what the header and cells should\n * render for each column.\n * @type {?}\n */\nCdkTable.prototype._columnDefinitions;\n/**\n * Template used as the header container.\n * @type {?}\n */\nCdkTable.prototype._headerDefinition;\n/**\n * Set of templates that used as the data row containers.\n * @type {?}\n */\nCdkTable.prototype._rowDefinitions;\n/** @type {?} */\nCdkTable.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {ContentChild, Directive, ElementRef, Input, Renderer2, TemplateRef} from '@angular/core';\n/**\n * Cell definition for a CDK data-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nexport class CdkCellDef {\n/**\n * @param {?} template\n */\nconstructor(public template: TemplateRef<any>) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkCellDef]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n];\n}\n\nfunction CdkCellDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkCellDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkCellDef.ctorParameters;\n/** @type {?} */\nCdkCellDef.prototype.template;\n}\n\n/**\n * Header cell definition for a CDK data-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nexport class CdkHeaderCellDef {\n/**\n * @param {?} template\n */\nconstructor(public template: TemplateRef<any>) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkHeaderCellDef]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n];\n}\n\nfunction CdkHeaderCellDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkHeaderCellDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkHeaderCellDef.ctorParameters;\n/** @type {?} */\nCdkHeaderCellDef.prototype.template;\n}\n\n/**\n * Column definition for the CDK data-table.\n * Defines a set of cells available for a table column.\n */\nexport class CdkColumnDef {\n   name: string;\n\n   cell: CdkCellDef;\n   headerCell: CdkHeaderCellDef;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkColumnDef]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input, args: ['cdkColumnDef', ] },],\n'cell': [{ type: ContentChild, args: [CdkCellDef, ] },],\n'headerCell': [{ type: ContentChild, args: [CdkHeaderCellDef, ] },],\n};\n}\n\nfunction CdkColumnDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkColumnDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkColumnDef.ctorParameters;\n/** @type {?} */\nCdkColumnDef.propDecorators;\n/** @type {?} */\nCdkColumnDef.prototype.name;\n/** @type {?} */\nCdkColumnDef.prototype.cell;\n/** @type {?} */\nCdkColumnDef.prototype.headerCell;\n}\n\n/**\n * Header cell template container that adds the right classes and role.\n */\nexport class CdkHeaderCell {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(private columnDef: CdkColumnDef,\nprivate elementRef: ElementRef,\nprivate renderer: Renderer2) {\n    this.renderer.addClass(elementRef.nativeElement, `cdk-column-${columnDef.name}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'cdk-header-cell',\n  host: {\n    'class': 'cdk-header-cell',\n    'role': 'columnheader',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction CdkHeaderCell_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkHeaderCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkHeaderCell.ctorParameters;\n/** @type {?} */\nCdkHeaderCell.prototype.columnDef;\n/** @type {?} */\nCdkHeaderCell.prototype.elementRef;\n/** @type {?} */\nCdkHeaderCell.prototype.renderer;\n}\n\n/**\n * Cell template container that adds the right classes and role.\n */\nexport class CdkCell {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(private columnDef: CdkColumnDef,\nprivate elementRef: ElementRef,\nprivate renderer: Renderer2) {\n    this.renderer.addClass(elementRef.nativeElement, `cdk-column-${columnDef.name}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'cdk-cell',\n  host: {\n    'class': 'cdk-cell',\n    'role': 'gridcell',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction CdkCell_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkCell.ctorParameters;\n/** @type {?} */\nCdkCell.prototype.columnDef;\n/** @type {?} */\nCdkCell.prototype.elementRef;\n/** @type {?} */\nCdkCell.prototype.renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  Input,\n  TemplateRef,\n  ViewContainerRef\n} from '@angular/core';\nimport {CdkCellDef} from './cell';\n/**\n * Header row definition for the CDK data-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nexport class CdkHeaderRowDef {\n   columns: string[];\n/**\n * @param {?} template\n */\nconstructor(public template: TemplateRef<any>) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkHeaderRowDef]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'columns': [{ type: Input, args: ['cdkHeaderRowDef', ] },],\n};\n}\n\nfunction CdkHeaderRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkHeaderRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkHeaderRowDef.ctorParameters;\n/** @type {?} */\nCdkHeaderRowDef.propDecorators;\n/** @type {?} */\nCdkHeaderRowDef.prototype.columns;\n/** @type {?} */\nCdkHeaderRowDef.prototype.template;\n}\n\n/**\n * Data row definition for the CDK data-table.\n * Captures the header row's template and other row properties such as the columns to display.\n */\nexport class CdkRowDef {\n   columns: string[];\n/**\n * @param {?} template\n */\nconstructor(public template: TemplateRef<any>) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkRowDef]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'columns': [{ type: Input, args: ['cdkRowDefColumns', ] },],\n};\n}\n\nfunction CdkRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkRowDef.ctorParameters;\n/** @type {?} */\nCdkRowDef.propDecorators;\n/** @type {?} */\nCdkRowDef.prototype.columns;\n/** @type {?} */\nCdkRowDef.prototype.template;\n}\n\n/**\n * Outlet for rendering cells inside of a row or header row.\n * \\@docs-private\n */\nexport class CdkCellOutlet {\n/**\n * The ordered list of cells to render within this outlet's view container\n */\ncells: CdkCellDef[];\n/**\n * The data context to be provided to each cell\n */\ncontext: any;\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK data-table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\nstatic mostRecentCellOutlet: CdkCellOutlet = null;\n/**\n * @param {?} _viewContainer\n */\nconstructor(private _viewContainer: ViewContainerRef) {\n    CdkCellOutlet.mostRecentCellOutlet = this;\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this.cells.forEach(cell => {\n      this._viewContainer.createEmbeddedView(cell.template, this.context);\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkCellOutlet]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction CdkCellOutlet_tsickle_Closure_declarations() {\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK data-table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n * @type {?}\n */\nCdkCellOutlet.mostRecentCellOutlet;\n/** @type {?} */\nCdkCellOutlet.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkCellOutlet.ctorParameters;\n/**\n * The ordered list of cells to render within this outlet's view container\n * @type {?}\n */\nCdkCellOutlet.prototype.cells;\n/**\n * The data context to be provided to each cell\n * @type {?}\n */\nCdkCellOutlet.prototype.context;\n/** @type {?} */\nCdkCellOutlet.prototype._viewContainer;\n}\n\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nexport class CdkHeaderRow { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'cdk-header-row',\n  template: '<ng-container cdkCellOutlet></ng-container>',\n  host: {\n    'class': 'cdk-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CdkHeaderRow_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkHeaderRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkHeaderRow.ctorParameters;\n}\n\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nexport class CdkRow { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'cdk-row',\n  template: '<ng-container cdkCellOutlet></ng-container>',\n  host: {\n    'class': 'cdk-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CdkRow_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkRow.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {MdMonthView} from './month-view';\nimport {CommonModule} from '@angular/common';\nimport {MdCalendarBody} from './calendar-body';\nimport {MdYearView} from './year-view';\nimport {OverlayModule} from '../core/overlay/overlay-directives';\nimport {MdDatepicker, MdDatepickerContent} from './datepicker';\nimport {MdDatepickerInput} from './datepicker-input';\nimport {MdDialogModule} from '../dialog/index';\nimport {MdCalendar} from './calendar';\nimport {MdDatepickerToggle} from './datepicker-toggle';\nimport {StyleModule} from '../core/style/index';\nimport {MdButtonModule} from '../button/index';\nimport {MdDatepickerIntl} from './datepicker-intl';\n\n\nexport {MdCalendar} from './calendar';\nexport {MdCalendarCell,MdCalendarBody} from './calendar-body';\nexport {MdDatepickerContent,MdDatepicker} from './datepicker';\nexport {MD_DATEPICKER_VALUE_ACCESSOR,MD_DATEPICKER_VALIDATORS,MdDatepickerInput} from './datepicker-input';\nexport {MdDatepickerIntl} from './datepicker-intl';\nexport {MdDatepickerToggle} from './datepicker-toggle';\nexport {MdMonthView} from './month-view';\nexport {MdYearView} from './year-view';\nexport class MdDatepickerModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MdButtonModule,\n    MdDialogModule,\n    OverlayModule,\n    StyleModule,\n  ],\n  exports: [\n    MdDatepicker,\n    MdDatepickerContent,\n    MdDatepickerInput,\n    MdDatepickerToggle,\n  ],\n  declarations: [\n    MdCalendar,\n    MdCalendarBody,\n    MdDatepicker,\n    MdDatepickerContent,\n    MdDatepickerInput,\n    MdDatepickerToggle,\n    MdMonthView,\n    MdYearView,\n  ],\n  providers: [\n    MdDatepickerIntl,\n  ],\n  entryComponents: [\n    MdDatepickerContent,\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDatepickerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {MdDatepicker} from './datepicker';\nimport {MdDatepickerIntl} from './datepicker-intl';\nexport class MdDatepickerToggle<D> {\n/**\n * Datepicker instance that the button will toggle.\n */\ndatepicker: MdDatepicker<D>;\n/**\n * Type of the button.\n */\ntype: string = 'button';\n/**\n * @return {?}\n */\nget _datepicker() { return this.datepicker; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _datepicker(v: MdDatepicker<D>) { this.datepicker = v; }\n/**\n * @param {?} _intl\n */\nconstructor(public _intl: MdDatepickerIntl) {}\n/**\n * @param {?} event\n * @return {?}\n */\n_open(event: Event): void {\n    if (this.datepicker) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'button[mdDatepickerToggle], button[matDatepickerToggle]',\n  template: '',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    '[attr.type]': 'type',\n    '[class.mat-datepicker-toggle]': 'true',\n    '[attr.aria-label]': '_intl.openCalendarLabel',\n    '(click)': '_open($event)',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDatepickerIntl, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'datepicker': [{ type: Input, args: ['mdDatepickerToggle', ] },],\n'type': [{ type: Input },],\n'_datepicker': [{ type: Input, args: ['matDatepickerToggle', ] },],\n};\n}\n\nfunction MdDatepickerToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerToggle.ctorParameters;\n/** @type {?} */\nMdDatepickerToggle.propDecorators;\n/**\n * Datepicker instance that the button will toggle.\n * @type {?}\n */\nMdDatepickerToggle.prototype.datepicker;\n/**\n * Type of the button.\n * @type {?}\n */\nMdDatepickerToggle.prototype.type;\n/** @type {?} */\nMdDatepickerToggle.prototype._intl;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Renderer2\n} from '@angular/core';\nimport {MdDatepicker} from './datepicker';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MdInputContainer} from '../input/input-container';\nimport {DOWN_ARROW} from '../core/keyboard/keycodes';\nimport {DateAdapter} from '../core/datetime/index';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MD_DATE_FORMATS, MdDateFormats} from '../core/datetime/date-formats';\n\n\nexport const /** @type {?} */ MD_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdDatepickerInput),\n  multi: true\n};\n\n\nexport const /** @type {?} */ MD_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MdDatepickerInput),\n  multi: true\n};\n/**\n * Directive used to connect an input to a MdDatepicker.\n */\nexport class MdDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n/**\n * The datepicker that this input is associated with.\n * @param {?} value\n * @return {?}\n */\nset mdDatepicker(value: MdDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n  _datepicker: MdDatepicker<D>;\n/**\n * @param {?} value\n * @return {?}\n */\nset matDatepicker(value: MdDatepicker<D>) { this.mdDatepicker = value; }\n/**\n * @param {?} filter\n * @return {?}\n */\nset mdDatepickerFilter(filter: (date: D | null) => boolean) {\n    this._dateFilter = filter;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n/**\n * @param {?} filter\n * @return {?}\n */\nset matDatepickerFilter(filter: (date: D | null) => boolean) {\n    this.mdDatepickerFilter = filter;\n  }\n/**\n * The value of the input.\n * @return {?}\n */\nget value(): D {\n    return this._dateAdapter.parse(this._elementRef.nativeElement.value,\n        this._dateFormats.parse.dateInput);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: D) {\n    let /** @type {?} */ date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    let /** @type {?} */ oldDate = this.value;\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value',\n        date ? this._dateAdapter.format(date, this._dateFormats.display.dateInput) : '');\n    if (!this._dateAdapter.sameDate(oldDate, date)) {\n      this._valueChange.emit(date);\n    }\n  }\n/**\n * The minimum valid date.\n * @return {?}\n */\nget min(): D { return this._min; }\n/**\n * @param {?} value\n * @return {?}\n */\nset min(value: D) {\n    this._min = value;\n    this._validatorOnChange();\n  }\nprivate _min: D;\n/**\n * The maximum valid date.\n * @return {?}\n */\nget max(): D { return this._max; }\n/**\n * @param {?} value\n * @return {?}\n */\nset max(value: D) {\n    this._max = value;\n    this._validatorOnChange();\n  }\nprivate _max: D;\n/**\n * Emits when the value changes (either due to user input or programmatic change).\n */\n_valueChange = new EventEmitter<D>();\n\n  _onTouched = () => {};\nprivate _cvaOnChange = (value: any) => {};\nprivate _validatorOnChange = () => {};\nprivate _datepickerSubscription: Subscription;\n/**\n * The form control validator for the min date.\n */\nprivate _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    return (!this.min || !control.value ||\n        this._dateAdapter.compareDate(this.min, control.value) <= 0) ?\n        null : {'mdDatepickerMin': {'min': this.min, 'actual': control.value}};\n  }\n/**\n * The form control validator for the max date.\n */\nprivate _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    return (!this.max || !control.value ||\n        this._dateAdapter.compareDate(this.max, control.value) >= 0) ?\n        null : {'mdDatepickerMax': {'max': this.max, 'actual': control.value}};\n  }\n/**\n * The form control validator for the date filter.\n */\nprivate _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    return !this._dateFilter || !control.value || this._dateFilter(control.value) ?\n        null : {'mdDatepickerFilter': true};\n  }\n/**\n * The combined form control validator for this input.\n */\nprivate _validator: ValidatorFn =\n      Validators.compose([this._minValidator, this._maxValidator, this._filterValidator]);\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n * @param {?} _mdInputContainer\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats,\nprivate _mdInputContainer: MdInputContainer) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n          });\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._datepickerSubscription) {\n      this._datepickerSubscription.unsubscribe();\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n/**\n * Gets the element that the datepicker popup should be connected to.\n * @return {?} The element to connect the popup to.\n */\ngetPopupConnectionElementRef(): ElementRef {\n    return this._mdInputContainer ? this._mdInputContainer.underlineRef : this._elementRef;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: D): void {\n    this.value = value;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} disabled\n * @return {?}\n */\nsetDisabledState(disabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', disabled);\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\n_onInput(value: string) {\n    let /** @type {?} */ date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[mdDatepicker], input[matDatepicker]',\n  providers: [MD_DATEPICKER_VALUE_ACCESSOR, MD_DATEPICKER_VALIDATORS],\n  host: {\n    '[attr.aria-expanded]': '_datepicker?.opened || \"false\"',\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '_datepicker?.id',\n    '[attr.min]': 'min ? _dateAdapter.getISODateString(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.getISODateString(max) : null',\n    '(input)': '_onInput($event.target.value)',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n{type: MdInputContainer, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'mdDatepicker': [{ type: Input },],\n'matDatepicker': [{ type: Input },],\n'mdDatepickerFilter': [{ type: Input },],\n'matDatepickerFilter': [{ type: Input },],\n'value': [{ type: Input },],\n'min': [{ type: Input },],\n'max': [{ type: Input },],\n};\n}\n\nfunction MdDatepickerInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerInput.ctorParameters;\n/** @type {?} */\nMdDatepickerInput.propDecorators;\n/** @type {?} */\nMdDatepickerInput.prototype._datepicker;\n/** @type {?} */\nMdDatepickerInput.prototype._dateFilter;\n/** @type {?} */\nMdDatepickerInput.prototype._min;\n/** @type {?} */\nMdDatepickerInput.prototype._max;\n/**\n * Emits when the value changes (either due to user input or programmatic change).\n * @type {?}\n */\nMdDatepickerInput.prototype._valueChange;\n/** @type {?} */\nMdDatepickerInput.prototype._onTouched;\n/** @type {?} */\nMdDatepickerInput.prototype._cvaOnChange;\n/** @type {?} */\nMdDatepickerInput.prototype._validatorOnChange;\n/** @type {?} */\nMdDatepickerInput.prototype._datepickerSubscription;\n/**\n * The form control validator for the min date.\n * @type {?}\n */\nMdDatepickerInput.prototype._minValidator;\n/**\n * The form control validator for the max date.\n * @type {?}\n */\nMdDatepickerInput.prototype._maxValidator;\n/**\n * The form control validator for the date filter.\n * @type {?}\n */\nMdDatepickerInput.prototype._filterValidator;\n/**\n * The combined form control validator for this input.\n * @type {?}\n */\nMdDatepickerInput.prototype._validator;\n/** @type {?} */\nMdDatepickerInput.prototype._elementRef;\n/** @type {?} */\nMdDatepickerInput.prototype._renderer;\n/** @type {?} */\nMdDatepickerInput.prototype._dateAdapter;\n/** @type {?} */\nMdDatepickerInput.prototype._dateFormats;\n/** @type {?} */\nMdDatepickerInput.prototype._mdInputContainer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {Overlay} from '../core/overlay/overlay';\nimport {OverlayRef} from '../core/overlay/overlay-ref';\nimport {ComponentPortal} from '../core/portal/portal';\nimport {OverlayState} from '../core/overlay/overlay-state';\nimport {Dir} from '../core/rtl/dir';\nimport {MdDialog} from '../dialog/dialog';\nimport {MdDialogRef} from '../dialog/dialog-ref';\nimport {PositionStrategy} from '../core/overlay/position/position-strategy';\nimport {RepositionScrollStrategy, ScrollDispatcher} from '../core/overlay/index';\nimport {MdDatepickerInput} from './datepicker-input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MdDialogConfig} from '../dialog/dialog-config';\nimport {DateAdapter} from '../core/datetime/index';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {ESCAPE} from '../core/keyboard/keycodes';\nimport {MdCalendar} from './calendar';\nimport'rxjs/add/operator/first';\n/**\n * Used to generate a unique ID for each datepicker instance.\n */\nlet datepickerUid = 0;\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MdCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * \\@docs-internal\n */\nexport class MdDatepickerContent<D> implements AfterContentInit {\n  datepicker: MdDatepicker<D>;\n\n   _calendar: MdCalendar<D>;\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n/**\n * Handles keydown event on datepicker content.\n * @param {?} event The event.\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.datepicker.close();\n        break;\n      default:\n        // Return so that we don't preventDefault on keys that are not explicitly handled.\n        return;\n    }\n\n    event.preventDefault();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_calendar': [{ type: ViewChild, args: [MdCalendar, ] },],\n};\n}\n\nfunction MdDatepickerContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerContent.ctorParameters;\n/** @type {?} */\nMdDatepickerContent.propDecorators;\n/** @type {?} */\nMdDatepickerContent.prototype.datepicker;\n/** @type {?} */\nMdDatepickerContent.prototype._calendar;\n}\n\n/**\n * Component responsible for managing the datepicker popup/dialog.\n */\nexport class MdDatepicker<D> implements OnDestroy {\n/**\n * The date to open the calendar to initially.\n * @return {?}\n */\nget startAt(): D {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nset startAt(date: D) { this._startAt = date; }\nprivate _startAt: D;\n/**\n * The view that the calendar should start in.\n */\nstartView: 'month' | 'year' = 'month';\n/**\n * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n * than a popup and elements have more padding to allow for bigger touch targets.\n */\ntouchUi = false;\n/**\n * Emits new selected date when selected date changes.\n */\nselectedChanged = new EventEmitter<D>();\n/**\n * Whether the calendar is open.\n */\nopened = false;\n/**\n * The id for the datepicker calendar.\n */\nid = `md-datepicker-${datepickerUid++}`;\n/**\n * The currently selected date.\n */\n_selected: D = null;\n/**\n * The minimum selectable date.\n * @return {?}\n */\nget _minDate(): D {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n/**\n * The maximum selectable date.\n * @return {?}\n */\nget _maxDate(): D {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n/**\n * @return {?}\n */\nget _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n/**\n * A reference to the overlay when the calendar is opened as a popup.\n */\nprivate _popupRef: OverlayRef;\n/**\n * A reference to the dialog when the calendar is opened as a dialog.\n */\nprivate _dialogRef: MdDialogRef<any>;\n/**\n * A portal containing the calendar for this datepicker.\n */\nprivate _calendarPortal: ComponentPortal<MdDatepickerContent<D>>;\n/**\n * The input element this datepicker is associated with.\n */\nprivate _datepickerInput: MdDatepickerInput<D>;\nprivate _inputSubscription: Subscription;\n/**\n * @param {?} _dialog\n * @param {?} _overlay\n * @param {?} _ngZone\n * @param {?} _viewContainerRef\n * @param {?} _scrollDispatcher\n * @param {?} _dateAdapter\n * @param {?} _dir\n */\nconstructor(private _dialog: MdDialog,\nprivate _overlay: Overlay,\nprivate _ngZone: NgZone,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dir: Dir) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.close();\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n    if (this._inputSubscription) {\n      this._inputSubscription.unsubscribe();\n    }\n  }\n/**\n * Selects the given date and closes the currently open popup or dialog.\n * @param {?} date\n * @return {?}\n */\n_selectAndClose(date: D): void {\n    let /** @type {?} */ oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n    this.close();\n  }\n/**\n * Register an input with this datepicker.\n * @param {?} input The datepicker input to register with this datepicker.\n * @return {?}\n */\n_registerInput(input: MdDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw new Error('An MdDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D) => this._selected = value);\n  }\n/**\n * Open the calendar.\n * @return {?}\n */\nopen(): void {\n    if (this.opened) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw new Error('Attempted to open an MdDatepicker with no associated input.');\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this.opened = true;\n  }\n/**\n * Close the calendar.\n * @return {?}\n */\nclose(): void {\n    if (!this.opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n    this.opened = false;\n  }\n/**\n * Open the calendar as a dialog.\n * @return {?}\n */\nprivate _openAsDialog(): void {\n    let /** @type {?} */ config = new MdDialogConfig();\n    config.viewContainerRef = this._viewContainerRef;\n\n    this._dialogRef = this._dialog.open(MdDatepickerContent, config);\n    this._dialogRef.afterClosed().first().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n/**\n * Open the calendar as a popup.\n * @return {?}\n */\nprivate _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MdDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let /** @type {?} */ componentRef: ComponentRef<MdDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.first().subscribe(() => this._popupRef.updatePosition());\n    }\n\n    this._popupRef.backdropClick().first().subscribe(() => this.close());\n  }\n/**\n * Create the popup.\n * @return {?}\n */\nprivate _createPopup(): void {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.positionStrategy = this._createPopupPositionStrategy();\n    overlayState.hasBackdrop = true;\n    overlayState.backdropClass = 'md-overlay-transparent-backdrop';\n    overlayState.direction = this._dir ? this._dir.value : 'ltr';\n    overlayState.scrollStrategy = new RepositionScrollStrategy(this._scrollDispatcher);\n\n    this._popupRef = this._overlay.create(overlayState);\n  }\n/**\n * Create the popup PositionStrategy.\n * @return {?}\n */\nprivate _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        { originX: 'start', originY: 'top' },\n        { overlayX: 'start', overlayY: 'bottom' }\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        { originX: 'end', originY: 'top' },\n        { overlayX: 'end', overlayY: 'bottom' }\n      );\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-datepicker, mat-datepicker',\n  template: '',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialog, },\n{type: Overlay, },\n{type: NgZone, },\n{type: ViewContainerRef, },\n{type: ScrollDispatcher, },\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'startAt': [{ type: Input },],\n'startView': [{ type: Input },],\n'touchUi': [{ type: Input },],\n'selectedChanged': [{ type: Output },],\n};\n}\n\nfunction MdDatepicker_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepicker.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepicker.ctorParameters;\n/** @type {?} */\nMdDatepicker.propDecorators;\n/** @type {?} */\nMdDatepicker.prototype._startAt;\n/**\n * The view that the calendar should start in.\n * @type {?}\n */\nMdDatepicker.prototype.startView;\n/**\n * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n * than a popup and elements have more padding to allow for bigger touch targets.\n * @type {?}\n */\nMdDatepicker.prototype.touchUi;\n/**\n * Emits new selected date when selected date changes.\n * @type {?}\n */\nMdDatepicker.prototype.selectedChanged;\n/**\n * Whether the calendar is open.\n * @type {?}\n */\nMdDatepicker.prototype.opened;\n/**\n * The id for the datepicker calendar.\n * @type {?}\n */\nMdDatepicker.prototype.id;\n/**\n * The currently selected date.\n * @type {?}\n */\nMdDatepicker.prototype._selected;\n/**\n * A reference to the overlay when the calendar is opened as a popup.\n * @type {?}\n */\nMdDatepicker.prototype._popupRef;\n/**\n * A reference to the dialog when the calendar is opened as a dialog.\n * @type {?}\n */\nMdDatepicker.prototype._dialogRef;\n/**\n * A portal containing the calendar for this datepicker.\n * @type {?}\n */\nMdDatepicker.prototype._calendarPortal;\n/**\n * The input element this datepicker is associated with.\n * @type {?}\n */\nMdDatepicker.prototype._datepickerInput;\n/** @type {?} */\nMdDatepicker.prototype._inputSubscription;\n/** @type {?} */\nMdDatepicker.prototype._dialog;\n/** @type {?} */\nMdDatepicker.prototype._overlay;\n/** @type {?} */\nMdDatepicker.prototype._ngZone;\n/** @type {?} */\nMdDatepicker.prototype._viewContainerRef;\n/** @type {?} */\nMdDatepicker.prototype._scrollDispatcher;\n/** @type {?} */\nMdDatepicker.prototype._dateAdapter;\n/** @type {?} */\nMdDatepicker.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW\n} from '../core/keyboard/keycodes';\nimport {DateAdapter} from '../core/datetime/index';\nimport {MdDatepickerIntl} from './datepicker-intl';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MD_DATE_FORMATS, MdDateFormats} from '../core/datetime/date-formats';\nimport {MATERIAL_COMPATIBILITY_MODE} from '../core';\n/**\n * A calendar that is used as part of the datepicker.\n * \\@docs-private\n */\nexport class MdCalendar<D> implements AfterContentInit {\n/**\n * A date representing the period (month or year) to start the calendar in.\n */\nstartAt: D;\n/**\n * Whether the calendar should be started in month or year view.\n */\nstartView: 'month' | 'year' = 'month';\n/**\n * The currently selected date.\n */\nselected: D;\n/**\n * The minimum selectable date.\n */\nminDate: D;\n/**\n * The maximum selectable date.\n */\nmaxDate: D;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when the currently selected date changes.\n */\nselectedChange = new EventEmitter<D>();\n/**\n * Date filter for the month and year views.\n */\n_dateFilterForViews = (date: D) => {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n/**\n * The current active date. This determines which time period is shown and which date is\n * highlighted when using keyboard navigation.\n * @return {?}\n */\nget _activeDate(): D { return this._clampedActiveDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\nprivate _clampedActiveDate: D;\n/**\n * Whether the calendar is in month view.\n */\n_monthView: boolean;\n/**\n * The label for the current calendar view.\n * @return {?}\n */\nget _periodButtonText(): string {\n    return this._monthView ?\n        this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n            .toLocaleUpperCase() :\n        this._dateAdapter.getYearName(this._activeDate);\n  }\n/**\n * @return {?}\n */\nget _periodButtonLabel(): string {\n    return this._monthView ? this._intl.switchToYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n/**\n * The label for the the previous button.\n * @return {?}\n */\nget _prevButtonLabel(): string {\n    return this._monthView ? this._intl.prevMonthLabel : this._intl.prevYearLabel;\n  }\n/**\n * The label for the the next button.\n * @return {?}\n */\nget _nextButtonLabel(): string {\n    return this._monthView ? this._intl.nextMonthLabel : this._intl.nextYearLabel;\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _intl\n * @param {?} _ngZone\n * @param {?} _isCompatibilityMode\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(private _elementRef: ElementRef,\nprivate _intl: MdDatepickerIntl,\nprivate _ngZone: NgZone,\npublic _isCompatibilityMode: boolean,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._monthView = this.startView != 'year';\n  }\n/**\n * Handles date selection in the month view.\n * @param {?} date\n * @return {?}\n */\n_dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n/**\n * Handles month selection in the year view.\n * @param {?} month\n * @return {?}\n */\n_monthSelected(month: D): void {\n    this._activeDate = month;\n    this._monthView = true;\n  }\n/**\n * Handles user clicks on the period label.\n * @return {?}\n */\n_currentPeriodClicked(): void {\n    this._monthView = !this._monthView;\n  }\n/**\n * Handles user clicks on the previous button.\n * @return {?}\n */\n_previousClicked(): void {\n    this._activeDate = this._monthView ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(this._activeDate, -1);\n  }\n/**\n * Handles user clicks on the next button.\n * @return {?}\n */\n_nextClicked(): void {\n    this._activeDate = this._monthView ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(this._activeDate, 1);\n  }\n/**\n * Whether the previous period button is enabled.\n * @return {?}\n */\n_previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n/**\n * Whether the next period button is enabled.\n * @return {?}\n */\n_nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n/**\n * Handles keydown events on the calendar body.\n * @param {?} event\n * @return {?}\n */\n_handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._monthView) {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else {\n      this._handleCalendarBodyKeydownInYearView(event);\n    }\n  }\n/**\n * Focuses the active cell after the microtask queue is empty.\n * @return {?}\n */\n_focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => this._ngZone.onStable.first().subscribe(() => {\n      let /** @type {?} */ activeEl = this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n      activeEl.focus();\n    }));\n  }\n/**\n * Whether the two dates represent the same view in the current view mode (month or year).\n * @param {?} date1\n * @param {?} date2\n * @return {?}\n */\nprivate _isSameView(date1: D, date2: D): boolean {\n    return this._monthView ?\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n        this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2) :\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n  }\n/**\n * Handles keydown events on the calendar body when calendar is in month view.\n * @param {?} event\n * @return {?}\n */\nprivate _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n/**\n * Handles keydown events on the calendar body when calendar is in year view.\n * @param {?} event\n * @return {?}\n */\nprivate _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._prevMonthInSameCol(this._activeDate);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._nextMonthInSameCol(this._activeDate);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._activeDate);\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n/**\n * Determine the date for the month that comes before the given month in the same column in the\n * calendar table.\n * @param {?} date\n * @return {?}\n */\nprivate _prevMonthInSameCol(date: D): D {\n    // Determine how many months to jump forward given that there are 2 empty slots at the beginning\n    // of each year.\n    let /** @type {?} */ increment = this._dateAdapter.getMonth(date) <= 4 ? -5 :\n        (this._dateAdapter.getMonth(date) >= 7 ? -7 : -12);\n    return this._dateAdapter.addCalendarMonths(date, increment);\n  }\n/**\n * Determine the date for the month that comes after the given month in the same column in the\n * calendar table.\n * @param {?} date\n * @return {?}\n */\nprivate _nextMonthInSameCol(date: D): D {\n    // Determine how many months to jump forward given that there are 2 empty slots at the beginning\n    // of each year.\n    let /** @type {?} */ increment = this._dateAdapter.getMonth(date) <= 4 ? 7 :\n        (this._dateAdapter.getMonth(date) >= 7 ? 5 : 12);\n    return this._dateAdapter.addCalendarMonths(date, increment);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    '[class.mat-calendar]': 'true',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: MdDatepickerIntl, },\n{type: NgZone, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'startAt': [{ type: Input },],\n'startView': [{ type: Input },],\n'selected': [{ type: Input },],\n'minDate': [{ type: Input },],\n'maxDate': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n};\n}\n\nfunction MdCalendar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCalendar.ctorParameters;\n/** @type {?} */\nMdCalendar.propDecorators;\n/**\n * A date representing the period (month or year) to start the calendar in.\n * @type {?}\n */\nMdCalendar.prototype.startAt;\n/**\n * Whether the calendar should be started in month or year view.\n * @type {?}\n */\nMdCalendar.prototype.startView;\n/**\n * The currently selected date.\n * @type {?}\n */\nMdCalendar.prototype.selected;\n/**\n * The minimum selectable date.\n * @type {?}\n */\nMdCalendar.prototype.minDate;\n/**\n * The maximum selectable date.\n * @type {?}\n */\nMdCalendar.prototype.maxDate;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdCalendar.prototype.dateFilter;\n/**\n * Emits when the currently selected date changes.\n * @type {?}\n */\nMdCalendar.prototype.selectedChange;\n/**\n * Date filter for the month and year views.\n * @type {?}\n */\nMdCalendar.prototype._dateFilterForViews;\n/** @type {?} */\nMdCalendar.prototype._clampedActiveDate;\n/**\n * Whether the calendar is in month view.\n * @type {?}\n */\nMdCalendar.prototype._monthView;\n/** @type {?} */\nMdCalendar.prototype._elementRef;\n/** @type {?} */\nMdCalendar.prototype._intl;\n/** @type {?} */\nMdCalendar.prototype._ngZone;\n/** @type {?} */\nMdCalendar.prototype._isCompatibilityMode;\n/** @type {?} */\nMdCalendar.prototype._dateAdapter;\n/** @type {?} */\nMdCalendar.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable} from '@angular/core';\n/**\n * Datepicker data that requires internationalization.\n */\nexport class MdDatepickerIntl {\n/**\n * A label for the calendar popup (used by screen readers).\n */\ncalendarLabel = 'Calendar';\n/**\n * A label for the button used to open the calendar popup (used by screen readers).\n */\nopenCalendarLabel = 'Open calendar';\n/**\n * A label for the previous month button (used by screen readers).\n */\nprevMonthLabel = 'Previous month';\n/**\n * A label for the next month button (used by screen readers).\n */\nnextMonthLabel = 'Next month';\n/**\n * A label for the previous year button (used by screen readers).\n */\nprevYearLabel = 'Previous year';\n/**\n * A label for the next year button (used by screen readers).\n */\nnextYearLabel = 'Next year';\n/**\n * A label for the 'switch to month view' button (used by screen readers).\n */\nswitchToMonthViewLabel = 'Change to month view';\n/**\n * A label for the 'switch to year view' button (used by screen readers).\n */\nswitchToYearViewLabel = 'Change to year view';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDatepickerIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerIntl.ctorParameters;\n/**\n * A label for the calendar popup (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.calendarLabel;\n/**\n * A label for the button used to open the calendar popup (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.openCalendarLabel;\n/**\n * A label for the previous month button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.prevMonthLabel;\n/**\n * A label for the next month button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.nextMonthLabel;\n/**\n * A label for the previous year button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.prevYearLabel;\n/**\n * A label for the next year button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.nextYearLabel;\n/**\n * A label for the 'switch to month view' button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.switchToMonthViewLabel;\n/**\n * A label for the 'switch to year view' button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.switchToYearViewLabel;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MdCalendarCell} from './calendar-body';\nimport {DateAdapter} from '../core/datetime/index';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MD_DATE_FORMATS, MdDateFormats} from '../core/datetime/date-formats';\n/**\n * An internal component used to display a single year in the datepicker.\n * \\@docs-private\n */\nexport class MdYearView<D> implements AfterContentInit {\n/**\n * The date to display in this year view (everything other than the year is ignored).\n * @return {?}\n */\nget activeDate(): D { return this._activeDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset activeDate(value: D) {\n    let /** @type {?} */ oldActiveDate = this._activeDate;\n    this._activeDate = value || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\nprivate _activeDate: D;\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D) {\n    this._selected = value;\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n  }\nprivate _selected: D;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when a new month is selected.\n */\nselectedChange = new EventEmitter<D>();\n/**\n * Grid of calendar cells representing the months of the year.\n */\n_months: MdCalendarCell[][];\n/**\n * The label for this year (e.g. \"2017\").\n */\n_yearLabel: string;\n/**\n * The month in this year that today falls on. Null if today is in a different year.\n */\n_todayMonth: number;\n/**\n * The month in this year that the selected Date falls on.\n * Null if the selected Date is in a different year.\n */\n_selectedMonth: number;\n/**\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(\npublic _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._init();\n  }\n/**\n * Handles when a new month is selected.\n * @param {?} month\n * @return {?}\n */\n_monthSelected(month: number) {\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        this._dateAdapter.getDate(this.activeDate)));\n  }\n/**\n * Initializes this month view.\n * @return {?}\n */\nprivate _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let /** @type {?} */ monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n  }\n/**\n * Gets the month in this year that the given Date falls on.\n * Returns null if the given Date is in another year.\n * @param {?} date\n * @return {?}\n */\nprivate _getMonthInCurrentYear(date: D) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n/**\n * Creates an MdCalendarCell for the given month.\n * @param {?} month\n * @param {?} monthName\n * @return {?}\n */\nprivate _createCellForMonth(month: number, monthName: string) {\n    let /** @type {?} */ ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MdCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n/**\n * Whether the given month is enabled.\n * @param {?} month\n * @return {?}\n */\nprivate _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let /** @type {?} */ date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-year-view',\n  templateUrl: 'year-view.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeDate': [{ type: Input },],\n'selected': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n};\n}\n\nfunction MdYearView_tsickle_Closure_declarations() {\n/** @type {?} */\nMdYearView.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdYearView.ctorParameters;\n/** @type {?} */\nMdYearView.propDecorators;\n/** @type {?} */\nMdYearView.prototype._activeDate;\n/** @type {?} */\nMdYearView.prototype._selected;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdYearView.prototype.dateFilter;\n/**\n * Emits when a new month is selected.\n * @type {?}\n */\nMdYearView.prototype.selectedChange;\n/**\n * Grid of calendar cells representing the months of the year.\n * @type {?}\n */\nMdYearView.prototype._months;\n/**\n * The label for this year (e.g. \"2017\").\n * @type {?}\n */\nMdYearView.prototype._yearLabel;\n/**\n * The month in this year that today falls on. Null if today is in a different year.\n * @type {?}\n */\nMdYearView.prototype._todayMonth;\n/**\n * The month in this year that the selected Date falls on.\n * Null if the selected Date is in a different year.\n * @type {?}\n */\nMdYearView.prototype._selectedMonth;\n/** @type {?} */\nMdYearView.prototype._dateAdapter;\n/** @type {?} */\nMdYearView.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MdCalendarCell} from './calendar-body';\nimport {DateAdapter} from '../core/datetime/index';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MD_DATE_FORMATS, MdDateFormats} from '../core/datetime/date-formats';\n\n\nconst /** @type {?} */ DAYS_PER_WEEK = 7;\n/**\n * An internal component used to display a single month in the datepicker.\n * \\@docs-private\n */\nexport class MdMonthView<D> implements AfterContentInit {\n/**\n * The date to display in this month view (everything other than the month and year is ignored).\n * @return {?}\n */\nget activeDate(): D { return this._activeDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset activeDate(value: D) {\n    let /** @type {?} */ oldActiveDate = this._activeDate;\n    this._activeDate = value || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\nprivate _activeDate: D;\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D) {\n    this._selected = value;\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n  }\nprivate _selected: D;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when a new date is selected.\n */\nselectedChange = new EventEmitter<D>();\n/**\n * The label for this month (e.g. \"January 2017\").\n */\n_monthLabel: string;\n/**\n * Grid of calendar cells representing the dates of the month.\n */\n_weeks: MdCalendarCell[][];\n/**\n * The number of blank cells in the first row before the 1st of the month.\n */\n_firstWeekOffset: number;\n/**\n * The date of the month that the currently selected Date falls on.\n * Null if the currently selected Date is in another month.\n */\n_selectedDate: number;\n/**\n * The date of the month that today falls on. Null if today is in another month.\n */\n_todayDate: number;\n/**\n * The names of the weekdays.\n */\n_weekdays: {long: string, narrow: string}[];\n/**\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(\npublic _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._init();\n  }\n/**\n * Handles when a new date is selected.\n * @param {?} date\n * @return {?}\n */\n_dateSelected(date: number) {\n    if (this._selectedDate == date) {\n      return;\n    }\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate),\n        date));\n  }\n/**\n * Initializes this month view.\n * @return {?}\n */\nprivate _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n  }\n/**\n * Creates MdCalendarCells for the dates in this month.\n * @return {?}\n */\nprivate _createWeekCells() {\n    let /** @type {?} */ daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let /** @type {?} */ dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let /** @type {?} */ i = 0, /** @type {?} */ cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let /** @type {?} */ date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let /** @type {?} */ enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let /** @type {?} */ ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MdCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n/**\n * Gets the date in this month that the given Date falls on.\n * Returns null if the given Date is in another month.\n * @param {?} date\n * @return {?}\n */\nprivate _getDateInCurrentMonth(date: D): number {\n    return this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n/**\n * Checks whether the 2 dates are non-null and fall within the same month of the same year.\n * @param {?} d1\n * @param {?} d2\n * @return {?}\n */\nprivate _hasSameMonthAndYear(d1: D, d2: D): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-month-view',\n  templateUrl: 'month-view.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeDate': [{ type: Input },],\n'selected': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n};\n}\n\nfunction MdMonthView_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMonthView.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMonthView.ctorParameters;\n/** @type {?} */\nMdMonthView.propDecorators;\n/** @type {?} */\nMdMonthView.prototype._activeDate;\n/** @type {?} */\nMdMonthView.prototype._selected;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdMonthView.prototype.dateFilter;\n/**\n * Emits when a new date is selected.\n * @type {?}\n */\nMdMonthView.prototype.selectedChange;\n/**\n * The label for this month (e.g. \"January 2017\").\n * @type {?}\n */\nMdMonthView.prototype._monthLabel;\n/**\n * Grid of calendar cells representing the dates of the month.\n * @type {?}\n */\nMdMonthView.prototype._weeks;\n/**\n * The number of blank cells in the first row before the 1st of the month.\n * @type {?}\n */\nMdMonthView.prototype._firstWeekOffset;\n/**\n * The date of the month that the currently selected Date falls on.\n * Null if the currently selected Date is in another month.\n * @type {?}\n */\nMdMonthView.prototype._selectedDate;\n/**\n * The date of the month that today falls on. Null if today is in another month.\n * @type {?}\n */\nMdMonthView.prototype._todayDate;\n/**\n * The names of the weekdays.\n * @type {?}\n */\nMdMonthView.prototype._weekdays;\n/** @type {?} */\nMdMonthView.prototype._dateAdapter;\n/** @type {?} */\nMdMonthView.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @param {?} provider\n * @return {?}\n */\nexport function createMissingDateImplError(provider: string) {\n  return new Error(\n      `MdDatepicker: No provider found for ${provider}. You must import one of the following` +\n      `modules at your application root: MdNativeDateModule, or provide a custom implementation.`);\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * \\@docs-private\n */\nexport class MdCalendarCell {\n/**\n * @param {?} value\n * @param {?} displayValue\n * @param {?} ariaLabel\n * @param {?} enabled\n */\nconstructor(public value: number,\npublic displayValue: string,\npublic ariaLabel: string,\npublic enabled: boolean) {}\n}\n\nfunction MdCalendarCell_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendarCell.prototype.value;\n/** @type {?} */\nMdCalendarCell.prototype.displayValue;\n/** @type {?} */\nMdCalendarCell.prototype.ariaLabel;\n/** @type {?} */\nMdCalendarCell.prototype.enabled;\n}\n\n/**\n * An internal component used to display calendar data in a table.\n * \\@docs-private\n */\nexport class MdCalendarBody {\n/**\n * The label for the table. (e.g. \"Jan 2017\").\n */\nlabel: string;\n/**\n * The cells to display in the table.\n */\nrows: MdCalendarCell[][];\n/**\n * The value in the table that corresponds to today.\n */\ntodayValue: number;\n/**\n * The value in the table that is currently selected.\n */\nselectedValue: number;\n/**\n * The minimum number of free cells needed to fit the label in the first row.\n */\nlabelMinRequiredCells: number;\n/**\n * The number of columns in the table.\n */\nnumCols = 7;\n/**\n * Whether to allow selection of disabled cells.\n */\nallowDisabledSelection = false;\n/**\n * The cell number of the active cell in the table.\n */\nactiveCell = 0;\n/**\n * Emits when a new value is selected.\n */\nselectedValueChange = new EventEmitter<number>();\n/**\n * @param {?} cell\n * @return {?}\n */\n_cellClicked(cell: MdCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n/**\n * The number of blank cells to put at the beginning for the first row.\n * @return {?}\n */\nget _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n/**\n * @param {?} rowIndex\n * @param {?} colIndex\n * @return {?}\n */\n_isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let /** @type {?} */ cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n'rows': [{ type: Input },],\n'todayValue': [{ type: Input },],\n'selectedValue': [{ type: Input },],\n'labelMinRequiredCells': [{ type: Input },],\n'numCols': [{ type: Input },],\n'allowDisabledSelection': [{ type: Input },],\n'activeCell': [{ type: Input },],\n'selectedValueChange': [{ type: Output },],\n};\n}\n\nfunction MdCalendarBody_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendarBody.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCalendarBody.ctorParameters;\n/** @type {?} */\nMdCalendarBody.propDecorators;\n/**\n * The label for the table. (e.g. \"Jan 2017\").\n * @type {?}\n */\nMdCalendarBody.prototype.label;\n/**\n * The cells to display in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.rows;\n/**\n * The value in the table that corresponds to today.\n * @type {?}\n */\nMdCalendarBody.prototype.todayValue;\n/**\n * The value in the table that is currently selected.\n * @type {?}\n */\nMdCalendarBody.prototype.selectedValue;\n/**\n * The minimum number of free cells needed to fit the label in the first row.\n * @type {?}\n */\nMdCalendarBody.prototype.labelMinRequiredCells;\n/**\n * The number of columns in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.numCols;\n/**\n * Whether to allow selection of disabled cells.\n * @type {?}\n */\nMdCalendarBody.prototype.allowDisabledSelection;\n/**\n * The cell number of the active cell in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.activeCell;\n/**\n * Emits when a new value is selected.\n * @type {?}\n */\nMdCalendarBody.prototype.selectedValueChange;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {MdOptionModule, OverlayModule, MdCommonModule} from '../core';\nimport {CommonModule} from '@angular/common';\nimport {MdAutocomplete} from './autocomplete';\nimport {MdAutocompleteTrigger} from './autocomplete-trigger';\nexport class MdAutocompleteModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdOptionModule, OverlayModule, MdCommonModule, CommonModule],\n  exports: [MdAutocomplete, MdOptionModule, MdAutocompleteTrigger, MdCommonModule],\n  declarations: [MdAutocomplete, MdAutocompleteTrigger],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdAutocompleteModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteModule.ctorParameters;\n}\n\n\n\nexport {AutocompletePositionY,MdAutocomplete} from './autocomplete';\nexport {AUTOCOMPLETE_OPTION_HEIGHT,AUTOCOMPLETE_PANEL_HEIGHT,MD_AUTOCOMPLETE_VALUE_ACCESSOR,MdAutocompleteTrigger} from './autocomplete-trigger';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Input,\n  NgZone,\n  Optional,\n  OnDestroy,\n  ViewContainerRef,\n  Inject,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {Overlay, OverlayRef, OverlayState, TemplatePortal, RepositionScrollStrategy} from '../core';\nimport {MdAutocomplete} from './autocomplete';\nimport {PositionStrategy} from '../core/overlay/position/position-strategy';\nimport {ConnectedPositionStrategy} from '../core/overlay/position/connected-position-strategy';\nimport {Observable} from 'rxjs/Observable';\nimport {MdOptionSelectionChange, MdOption} from '../core/option/option';\nimport {ENTER, UP_ARROW, DOWN_ARROW, ESCAPE} from '../core/keyboard/keycodes';\nimport {Dir} from '../core/rtl/dir';\nimport {MdInputContainer} from '../input/input-container';\nimport {ScrollDispatcher} from '../core/overlay/scroll/scroll-dispatcher';\nimport {Subscription} from 'rxjs/Subscription';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/observable/fromEvent';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/switchMap';\n/**\n * The height of each autocomplete option.\n */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n */\nexport const MD_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdAutocompleteTrigger),\n  multi: true\n};\nexport class MdAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\nprivate _overlayRef: OverlayRef;\nprivate _portal: TemplatePortal;\nprivate _panelOpen: boolean = false;\n/**\n * The subscription to positioning changes in the autocomplete panel.\n */\nprivate _panelPositionSubscription: Subscription;\n/**\n * Strategy that is used to position the panel.\n */\nprivate _positionStrategy: ConnectedPositionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n */\nprivate _manuallyFloatingPlaceholder = false;\n/**\n * View -> model callback called when value changes\n */\n_onChange = (value: any) => {};\n/**\n * View -> model callback called when autocomplete has been touched\n */\n_onTouched = () => {};\n\n  /* The autocomplete panel to be attached to this trigger. */\n   autocomplete: MdAutocomplete;\n/**\n * Property with mat- prefix for no-conflict mode.\n * @return {?}\n */\nget _matAutocomplete(): MdAutocomplete {\n    return this.autocomplete;\n  }\n/**\n * @param {?} autocomplete\n * @return {?}\n */\nset _matAutocomplete(autocomplete: MdAutocomplete) {\n    this.autocomplete = autocomplete;\n  }\n/**\n * @param {?} _element\n * @param {?} _overlay\n * @param {?} _viewContainerRef\n * @param {?} _changeDetectorRef\n * @param {?} _scrollDispatcher\n * @param {?} _dir\n * @param {?} _zone\n * @param {?} _inputContainer\n * @param {?} _document\n */\nconstructor(private _element: ElementRef,\nprivate _overlay: Overlay,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _dir: Dir,\nprivate _zone: NgZone,\nprivate _inputContainer: MdInputContainer,\nprivate _document: any) {}\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._panelPositionSubscription) {\n      this._panelPositionSubscription.unsubscribe();\n    }\n\n    this._destroyPanel();\n  }\n/**\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n/**\n * Opens the autocomplete suggestion panel.\n * @return {?}\n */\nopenPanel(): void {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.getState().width = this._getHostWidth();\n      this._overlayRef.updateSize();\n    }\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this._floatPlaceholder();\n    this._panelOpen = true;\n  }\n/**\n * Closes the autocomplete suggestion panel.\n * @return {?}\n */\nclosePanel(): void {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._panelOpen = false;\n    this._resetPlaceholder();\n\n    // We need to trigger change detection manually, because\n    // `fromEvent` doesn't seem to do it at the proper time.\n    // This ensures that the placeholder is reset when the\n    // user clicks outside.\n    this._changeDetectorRef.detectChanges();\n  }\n/**\n * A stream of actions that should close the autocomplete panel, including\n * when an option is selected, on blur, and when TAB is pressed.\n * @return {?}\n */\nget panelClosingActions(): Observable<MdOptionSelectionChange> {\n    return Observable.merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut,\n      this._outsideClickStream\n    );\n  }\n/**\n * Stream of autocomplete option selections.\n * @return {?}\n */\nget optionSelections(): Observable<MdOptionSelectionChange> {\n    return Observable.merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n  }\n/**\n * The currently active option, coerced to MdOption type.\n * @return {?}\n */\nget activeOption(): MdOption {\n    if (this.autocomplete._keyManager) {\n      return /** @type {?} */(( this.autocomplete._keyManager.activeItem as MdOption));\n    }\n  }\n/**\n * Stream of clicks outside of the autocomplete panel.\n * @return {?}\n */\nprivate get _outsideClickStream(): Observable<any> {\n    if (this._document) {\n      return Observable.fromEvent(this._document, 'click').filter((event: MouseEvent) => {\n        const /** @type {?} */ clickTarget = /** @type {?} */(( event.target as HTMLElement));\n        const /** @type {?} */ inputContainer = this._inputContainer ?\n            this._inputContainer._elementRef.nativeElement : null;\n\n        return this._panelOpen &&\n               clickTarget !== this._element.nativeElement &&\n               (!inputContainer || !inputContainer.contains(clickTarget)) &&\n               !this._overlayRef.overlayElement.contains(clickTarget);\n      });\n    }\n  }\n/**\n * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE && this.panelOpen) {\n      this.closePanel();\n    } else if (this.activeOption && event.keyCode === ENTER) {\n      this.activeOption._selectViaInteraction();\n      event.preventDefault();\n    } else {\n      const /** @type {?} */ prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const /** @type {?} */ isArrowKey = event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW;\n\n      this.autocomplete._keyManager.onKeydown(event);\n\n      if (isArrowKey) {\n        this.openPanel();\n      }\n\n      Promise.resolve().then(() => {\n        if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n          this._scrollToOption();\n        }\n      });\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (document.activeElement === event.target) {\n      this._onChange(( /** @type {?} */((event.target as HTMLInputElement))).value);\n      this.openPanel();\n    }\n  }\n/**\n * In \"auto\" mode, the placeholder will animate down as soon as focus is lost.\n * This causes the value to jump when selecting an option with the mouse.\n * This method manually floats the placeholder until the panel can be closed.\n * @return {?}\n */\nprivate _floatPlaceholder(): void {\n    if (this._inputContainer && this._inputContainer.floatPlaceholder === 'auto') {\n      this._inputContainer.floatPlaceholder = 'always';\n      this._manuallyFloatingPlaceholder = true;\n    }\n  }\n/**\n * If the placeholder has been manually elevated, return it to its normal state.\n * @return {?}\n */\nprivate _resetPlaceholder(): void  {\n    if (this._manuallyFloatingPlaceholder) {\n      this._inputContainer.floatPlaceholder = 'auto';\n      this._manuallyFloatingPlaceholder = false;\n    }\n  }\n/**\n * Given that we are not actually focusing active options, we must manually adjust scroll\n * to reveal options below the fold. First, we find the offset of the option from the top\n * of the panel. The new scrollTop will be that offset - the panel height + the option\n * height, so the active option will be just visible at the bottom of the panel.\n * @return {?}\n */\nprivate _scrollToOption(): void {\n    const /** @type {?} */ optionOffset =\n        this.autocomplete._keyManager.activeItemIndex * AUTOCOMPLETE_OPTION_HEIGHT;\n    const /** @type {?} */ newScrollTop =\n        Math.max(0, optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT);\n    this.autocomplete._setScrollTop(newScrollTop);\n  }\n/**\n * This method listens to a stream of panel closing actions and resets the\n * stream every time the option list changes.\n * @return {?}\n */\nprivate _subscribeToClosingActions(): void {\n    // When the zone is stable initially, and when the option list changes...\n    Observable.merge(this._zone.onStable.first(), this.autocomplete.options.changes)\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        .switchMap(() => {\n          this._resetPanel();\n          return this.panelClosingActions;\n        })\n        // when the first closing event occurs...\n        .first()\n        // set the value, close the panel, and complete.\n        .subscribe(event => this._setValueAndClose(event));\n  }\n/**\n * Destroys the autocomplete suggestion panel.\n * @return {?}\n */\nprivate _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _setTriggerValue(value: any): void {\n    const /** @type {?} */ toDisplay = this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\n    this._element.nativeElement.value = toDisplay || '';\n  }\n/**\n * This method closes the panel, and if a value is specified, also sets the associated\n * control to that value. It will also mark the control as dirty if this interaction\n * stemmed from the user.\n * @param {?} event\n * @return {?}\n */\nprivate _setValueAndClose(event: MdOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n    }\n\n    this.closePanel();\n  }\n/**\n * Clear any previous selected option and emit a selection change event for this option\n * @param {?} skip\n * @return {?}\n */\nprivate _clearPreviousSelectedOption(skip: MdOption) {\n    this.autocomplete.options.forEach((option) => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _createOverlay(): void {\n    this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n    this._overlayRef = this._overlay.create(this._getOverlayConfig());\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayConfig(): OverlayState {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.positionStrategy = this._getOverlayPosition();\n    overlayState.width = this._getHostWidth();\n    overlayState.direction = this._dir ? this._dir.value : 'ltr';\n    overlayState.scrollStrategy = new RepositionScrollStrategy(this._scrollDispatcher);\n    return overlayState;\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy =  this._overlay.position().connectedTo(\n        this._element,\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    this._subscribeToPositionChanges(this._positionStrategy);\n    return this._positionStrategy;\n  }\n/**\n * This method subscribes to position changes in the autocomplete panel, so the panel's\n * y-offset can be adjusted to match the new position.\n * @param {?} strategy\n * @return {?}\n */\nprivate _subscribeToPositionChanges(strategy: ConnectedPositionStrategy) {\n    this._panelPositionSubscription = strategy.onPositionChange.subscribe(change => {\n      this.autocomplete.positionY = change.connectionPair.originY === 'top' ? 'above' : 'below';\n    });\n  }\n/**\n * Returns the width of the input element, so the panel width can match it.\n * @return {?}\n */\nprivate _getHostWidth(): number {\n    return this._element.nativeElement.getBoundingClientRect().width;\n  }\n/**\n * Reset active item to null so arrow events will activate the correct options.\n * @return {?}\n */\nprivate _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(null);\n  }\n/**\n * Resets the active item and re-calculates alignment of the panel in case its size\n * has changed due to fewer or greater number of options.\n * @return {?}\n */\nprivate _resetPanel() {\n    this._resetActiveItem();\n    this._positionStrategy.recalculateLastPosition();\n    this.autocomplete._setVisibility();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[mdAutocomplete], input[matAutocomplete]',\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    'aria-multiline': 'false',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    '(focus)': 'openPanel()',\n    '(input)': '_handleInput($event)',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MD_AUTOCOMPLETE_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Overlay, },\n{type: ViewContainerRef, },\n{type: ChangeDetectorRef, },\n{type: ScrollDispatcher, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: NgZone, },\n{type: MdInputContainer, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'autocomplete': [{ type: Input, args: ['mdAutocomplete', ] },],\n'_matAutocomplete': [{ type: Input, args: ['matAutocomplete', ] },],\n};\n}\n\nfunction MdAutocompleteTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteTrigger.ctorParameters;\n/** @type {?} */\nMdAutocompleteTrigger.propDecorators;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlayRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._portal;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._panelOpen;\n/**\n * The subscription to positioning changes in the autocomplete panel.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._panelPositionSubscription;\n/**\n * Strategy that is used to position the panel.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._positionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._manuallyFloatingPlaceholder;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onChange;\n/**\n * View -> model callback called when autocomplete has been touched\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onTouched;\n/** @type {?} */\nMdAutocompleteTrigger.prototype.autocomplete;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._element;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlay;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._changeDetectorRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._scrollDispatcher;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._dir;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._zone;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._inputContainer;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._document;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {MdOption} from '../core';\nimport {ActiveDescendantKeyManager} from '../core/a11y/activedescendant-key-manager';\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\nexport type AutocompletePositionY = 'above' | 'below';\nexport class MdAutocomplete implements AfterContentInit {\n/**\n * Manages active item in option list based on key events.\n */\n_keyManager: ActiveDescendantKeyManager;\n/**\n * Whether the autocomplete panel displays above or below its trigger.\n */\npositionY: AutocompletePositionY = 'below';\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n */\nshowPanel = false;\n\n   template: TemplateRef<any>;\n   panel: ElementRef;\n   options: QueryList<MdOption>;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n */\ndisplayWith: (value: any) => string;\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n */\nid: string = `md-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n/**\n * @param {?} _changeDetectorRef\n */\nconstructor(private _changeDetectorRef: ChangeDetectorRef) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n  }\n/**\n * Sets the panel scrollTop. This allows us to manually scroll to display\n * options below the fold, as they are not actually being focused when active.\n * @param {?} scrollTop\n * @return {?}\n */\n_setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n/**\n * Panel should hide itself when the option list is empty.\n * @return {?}\n */\n_setVisibility() {\n    Promise.resolve().then(() => {\n      this.showPanel = !!this.options.length;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * Sets a class on the panel based on its position (used to set y-offset).\n * @return {?}\n */\n_getClassList() {\n    return {\n      'mat-autocomplete-panel-below': this.positionY === 'below',\n      'mat-autocomplete-panel-above': this.positionY === 'above',\n      'mat-autocomplete-visible': this.showPanel,\n      'mat-autocomplete-hidden': !this.showPanel\n    };\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-autocomplete, mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'mdAutocomplete',\n  host: {\n    '[class.mat-autocomplete]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'template': [{ type: ViewChild, args: [TemplateRef, ] },],\n'panel': [{ type: ViewChild, args: ['panel', ] },],\n'options': [{ type: ContentChildren, args: [MdOption, ] },],\n'displayWith': [{ type: Input },],\n};\n}\n\nfunction MdAutocomplete_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocomplete.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocomplete.ctorParameters;\n/** @type {?} */\nMdAutocomplete.propDecorators;\n/**\n * Manages active item in option list based on key events.\n * @type {?}\n */\nMdAutocomplete.prototype._keyManager;\n/**\n * Whether the autocomplete panel displays above or below its trigger.\n * @type {?}\n */\nMdAutocomplete.prototype.positionY;\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n * @type {?}\n */\nMdAutocomplete.prototype.showPanel;\n/** @type {?} */\nMdAutocomplete.prototype.template;\n/** @type {?} */\nMdAutocomplete.prototype.panel;\n/** @type {?} */\nMdAutocomplete.prototype.options;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n * @type {?}\n */\nMdAutocomplete.prototype.displayWith;\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n * @type {?}\n */\nMdAutocomplete.prototype.id;\n/** @type {?} */\nMdAutocomplete.prototype._changeDetectorRef;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {QueryList} from '@angular/core';\nimport {ListKeyManager, CanDisable} from './list-key-manager';\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n */\nexport interface Highlightable extends CanDisable {\n  setActiveStyles(): void;\n  setInactiveStyles(): void;\n}\nexport class ActiveDescendantKeyManager extends ListKeyManager<Highlightable> {\n/**\n * This method sets the active item to the item at the specified index.\n * It also adds active styles to the newly active item and removes active\n * styles from the previously active item.\n * @param {?} index\n * @return {?}\n */\nsetActiveItem(index: number): void {\n    Promise.resolve().then(() => {\n      if (this.activeItem) {\n        this.activeItem.setInactiveStyles();\n      }\n      super.setActiveItem(index);\n      if (this.activeItem) {\n        this.activeItem.setActiveStyles();\n      }\n    });\n  }\n\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {\n  OverlayModule,\n  PortalModule,\n  A11yModule,\n  MdCommonModule,\n} from '../core';\nimport {MdDialog} from './dialog';\nimport {MdDialogContainer} from './dialog-container';\nimport {\n  MdDialogClose,\n  MdDialogContent,\n  MdDialogTitle,\n  MdDialogActions\n} from './dialog-content-directives';\nexport class MdDialogModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MdCommonModule,\n  ],\n  exports: [\n    MdDialogContainer,\n    MdDialogClose,\n    MdDialogTitle,\n    MdDialogContent,\n    MdDialogActions,\n    MdCommonModule,\n  ],\n  declarations: [\n    MdDialogContainer,\n    MdDialogClose,\n    MdDialogTitle,\n    MdDialogActions,\n    MdDialogContent,\n  ],\n  providers: [\n    MdDialog,\n  ],\n  entryComponents: [MdDialogContainer],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogModule.ctorParameters;\n}\n\n\nexport {MdDialog} from './dialog';\nexport {throwMdDialogContentAlreadyAttachedError,MdDialogContainer} from './dialog-container';\nexport {MdDialogClose,MdDialogTitle,MdDialogContent,MdDialogActions} from './dialog-content-directives';\nexport {DialogRole,DialogPosition,MdDialogConfig} from './dialog-config';\nexport {MdDialogRef} from './dialog-ref';\nexport {MD_DIALOG_DATA} from './dialog-injector';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Directive, Input} from '@angular/core';\nimport {MdDialogRef} from './dialog-ref';\n/**\n * Button that will close the current dialog.\n */\nexport class MdDialogClose {\n/**\n * Screenreader label for the button.\n */\nariaLabel: string = 'Close dialog';\n/**\n * Dialog close input.\n */\ndialogResult: any;\n/**\n * Dialog close input for compatibility mode.\n * @param {?} value\n * @return {?}\n */\nset _matDialogClose(value: any) { this.dialogResult = value; }\n/**\n * @param {?} dialogRef\n */\nconstructor(public dialogRef: MdDialogRef<any>) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-dialog-close], button[mat-dialog-close]',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialogRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'dialogResult': [{ type: Input, args: ['md-dialog-close', ] },],\n'_matDialogClose': [{ type: Input, args: ['mat-dialog-close', ] },],\n};\n}\n\nfunction MdDialogClose_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogClose.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogClose.ctorParameters;\n/** @type {?} */\nMdDialogClose.propDecorators;\n/**\n * Screenreader label for the button.\n * @type {?}\n */\nMdDialogClose.prototype.ariaLabel;\n/**\n * Dialog close input.\n * @type {?}\n */\nMdDialogClose.prototype.dialogResult;\n/** @type {?} */\nMdDialogClose.prototype.dialogRef;\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nexport class MdDialogTitle { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-title], [mat-dialog-title]',\n  host: {\n    '[class.mat-dialog-title]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogTitle.ctorParameters;\n}\n\n/**\n * Scrollable content container of a dialog.\n */\nexport class MdDialogContent { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-content], md-dialog-content, [mat-dialog-content], mat-dialog-content',\n  host: {\n    '[class.mat-dialog-content]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContent.ctorParameters;\n}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nexport class MdDialogActions { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-actions], md-dialog-actions, [mat-dialog-actions], mat-dialog-actions',\n  host: {\n    '[class.mat-dialog-actions]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogActions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injector, ComponentRef, Injectable, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Overlay, OverlayRef, ComponentType, OverlayState, ComponentPortal} from '../core';\nimport {extendObject} from '../core/util/object-extend';\nimport {ESCAPE} from '../core/keyboard/keycodes';\nimport {DialogInjector} from './dialog-injector';\nimport {MdDialogConfig} from './dialog-config';\nimport {MdDialogRef} from './dialog-ref';\nimport {MdDialogContainer} from './dialog-container';\nimport {TemplatePortal} from '../core/portal/portal';\nimport {BlockScrollStrategy} from '../core/overlay/scroll/block-scroll-strategy';\nimport {ViewportRuler} from '../core/overlay/position/viewport-ruler';\nimport'rxjs/add/operator/first';\n/**\n * Service to open Material Design modal dialogs.\n */\nexport class MdDialog {\nprivate _openDialogsAtThisLevel: MdDialogRef<any>[] = [];\nprivate _afterAllClosedAtThisLevel = new Subject<void>();\nprivate _afterOpenAtThisLevel = new Subject<MdDialogRef<any>>();\nprivate _boundKeydown = this._handleKeydown.bind(this);\n/**\n * Keeps track of the currently-open dialogs.\n * @return {?}\n */\nget _openDialogs(): MdDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog._openDialogs : this._openDialogsAtThisLevel;\n  }\n/**\n * Subject for notifying the user that a dialog has opened.\n * @return {?}\n */\nget _afterOpen(): Subject<MdDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog._afterOpen : this._afterOpenAtThisLevel;\n  }\n/**\n * Subject for notifying the user that all open dialogs have finished closing.\n * @return {?}\n */\nget _afterAllClosed(): Subject<void> {\n    return this._parentDialog ?\n      this._parentDialog._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n/**\n * Gets an observable that is notified when a dialog has been opened.\n */\nafterOpen: Observable<MdDialogRef<any>> = this._afterOpen.asObservable();\n/**\n * Gets an observable that is notified when all open dialog have finished closing.\n */\nafterAllClosed: Observable<void> = this._afterAllClosed.asObservable();\n/**\n * @param {?} _overlay\n * @param {?} _injector\n * @param {?} _viewportRuler\n * @param {?} _location\n * @param {?} _parentDialog\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _injector: Injector,\nprivate _viewportRuler: ViewportRuler,\nprivate _location: Location,\nprivate _parentDialog: MdDialog) {\n\n    // Close all of the dialogs when the user goes forwards/backwards in history or when the\n    // location hash changes. Note that this usually doesn't include clicking on links (unless\n    // the user is using the `HashLocationStrategy`).\n    if (!_parentDialog && _location) {\n      _location.subscribe(() => this.closeAll());\n    }\n  }\n/**\n * Opens a modal dialog containing the given component.\n * @template T\n * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n *     or a TemplateRef to instantiate as the dialog content.\n * @param {?=} config Extra configuration options.\n * @return {?} Reference to the newly-opened dialog.\n */\nopen<T>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MdDialogConfig): MdDialogRef<T> {\n    config = _applyConfigDefaults(config);\n\n    let /** @type {?} */ overlayRef = this._createOverlay(config);\n    let /** @type {?} */ dialogContainer = this._attachDialogContainer(overlayRef, config);\n    let /** @type {?} */ dialogRef =\n        this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    if (!this._openDialogs.length) {\n      document.addEventListener('keydown', this._boundKeydown);\n    }\n\n    this._openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this._afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n/**\n * Closes all of the currently-open dialogs.\n * @return {?}\n */\ncloseAll(): void {\n    let /** @type {?} */ i = this._openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this._openDialogs[i].close();\n    }\n  }\n/**\n * Creates the overlay into which the dialog will be loaded.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to the OverlayRef for the created overlay.\n */\nprivate _createOverlay(config: MdDialogConfig): OverlayRef {\n    let /** @type {?} */ overlayState = this._getOverlayState(config);\n    return this._overlay.create(overlayState);\n  }\n/**\n * Creates an overlay state from a dialog config.\n * @param {?} dialogConfig The dialog configuration.\n * @return {?} The overlay configuration.\n */\nprivate _getOverlayState(dialogConfig: MdDialogConfig): OverlayState {\n    let /** @type {?} */ overlayState = new OverlayState();\n    overlayState.hasBackdrop = dialogConfig.hasBackdrop;\n    overlayState.scrollStrategy = new BlockScrollStrategy(this._viewportRuler);\n    if (dialogConfig.backdropClass) {\n      overlayState.backdropClass = dialogConfig.backdropClass;\n    }\n    overlayState.positionStrategy = this._overlay.position().global();\n\n    return overlayState;\n  }\n/**\n * Attaches an MdDialogContainer to a dialog's already-created overlay.\n * @param {?} overlay Reference to the dialog's underlying overlay.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to a ComponentRef for the attached container.\n */\nprivate _attachDialogContainer(overlay: OverlayRef, config: MdDialogConfig): MdDialogContainer {\n    let /** @type {?} */ viewContainer = config ? config.viewContainerRef : null;\n    let /** @type {?} */ containerPortal = new ComponentPortal(MdDialogContainer, viewContainer);\n\n    let /** @type {?} */ containerRef: ComponentRef<MdDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance.dialogConfig = config;\n\n    return containerRef.instance;\n  }\n/**\n * Attaches the user-provided component to the already-created MdDialogContainer.\n * @template T\n * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n *     or a TemplateRef to instantiate as the content.\n * @param {?} dialogContainer Reference to the wrapping MdDialogContainer.\n * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to the MdDialogRef that should be returned to the user.\n */\nprivate _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MdDialogContainer,\n      overlayRef: OverlayRef,\n      config: MdDialogConfig): MdDialogRef<T> {\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n\n    let /** @type {?} */ dialogRef = new MdDialogRef<T>(overlayRef, dialogContainer);\n\n    if (!config.disableClose) {\n      // When the dialog backdrop is clicked, we want to close it.\n      overlayRef.backdropClick().first().subscribe(() => dialogRef.close());\n    }\n\n    // We create an injector specifically for the component we're instantiating so that it can\n    // inject the MdDialogRef. This allows a component loaded inside of a dialog to close itself\n    // and, optionally, to return a value.\n    let /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    let /** @type {?} */ dialogInjector = new DialogInjector(userInjector || this._injector, dialogRef, config.data);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null));\n    } else {\n      let /** @type {?} */ contentRef = dialogContainer.attachComponentPortal(\n          new ComponentPortal(componentOrTemplateRef, null, dialogInjector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n/**\n * Removes a dialog from the array of open dialogs.\n * @param {?} dialogRef Dialog to be removed.\n * @return {?}\n */\nprivate _removeOpenDialog(dialogRef: MdDialogRef<any>) {\n    let /** @type {?} */ index = this._openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this._openDialogs.splice(index, 1);\n\n      // no open dialogs are left, call next on afterAllClosed Subject\n      if (!this._openDialogs.length) {\n        this._afterAllClosed.next();\n        document.removeEventListener('keydown', this._boundKeydown);\n      }\n    }\n  }\n/**\n * Handles global key presses while there are open dialogs. Closes the\n * top dialog when the user presses escape.\n * @param {?} event\n * @return {?}\n */\nprivate _handleKeydown(event: KeyboardEvent): void {\n    let /** @type {?} */ topDialog = this._openDialogs[this._openDialogs.length - 1];\n    let /** @type {?} */ canClose = topDialog ? !topDialog._containerInstance.dialogConfig.disableClose : false;\n\n    if (event.keyCode === ESCAPE && canClose) {\n      topDialog.close();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: Injector, },\n{type: ViewportRuler, },\n{type: Location, decorators: [{ type: Optional }, ]},\n{type: MdDialog, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialog.ctorParameters;\n/** @type {?} */\nMdDialog.prototype._openDialogsAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterAllClosedAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterOpenAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._boundKeydown;\n/**\n * Gets an observable that is notified when a dialog has been opened.\n * @type {?}\n */\nMdDialog.prototype.afterOpen;\n/**\n * Gets an observable that is notified when all open dialog have finished closing.\n * @type {?}\n */\nMdDialog.prototype.afterAllClosed;\n/** @type {?} */\nMdDialog.prototype._overlay;\n/** @type {?} */\nMdDialog.prototype._injector;\n/** @type {?} */\nMdDialog.prototype._viewportRuler;\n/** @type {?} */\nMdDialog.prototype._location;\n/** @type {?} */\nMdDialog.prototype._parentDialog;\n}\n\n/**\n * Applies default options to the dialog config.\n * @param {?} config Config to be modified.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults(config: MdDialogConfig): MdDialogConfig {\n  return extendObject(new MdDialogConfig(), config);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ComponentRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  animate,\n  trigger,\n  state,\n  style,\n  transition,\n  AnimationEvent,\n} from '@angular/animations';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {BasePortalHost, ComponentPortal, PortalHostDirective, TemplatePortal} from '../core';\nimport {MdDialogConfig} from './dialog-config';\nimport {FocusTrapFactory, FocusTrap} from '../core/a11y/focus-trap';\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalHost without an origin.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdDialogContentAlreadyAttachedError() {\n  throw new Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nexport class MdDialogContainer extends BasePortalHost {\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * The class that traps and manages focus within the dialog.\n */\nprivate _focusTrap: FocusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n */\nprivate _elementFocusedBeforeDialogWasOpened: HTMLElement = null;\n/**\n * Reference to the global document object.\n */\nprivate _document: Document;\n/**\n * The dialog configuration.\n */\ndialogConfig: MdDialogConfig;\n/**\n * State of the dialog animation.\n */\n_state: 'void' | 'enter' | 'exit' = 'enter';\n/**\n * Emits the current animation state whenever it changes.\n */\n_onAnimationStateChange = new EventEmitter<AnimationEvent>();\n/**\n * @param {?} _ngZone\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n * @param {?} _document\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory,\n      _document: any) {\n\n    super();\n    this._document = _document;\n  }\n/**\n * Attach a ComponentPortal as content to this dialog container.\n * @template T\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throwMdDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalHost.attachComponentPortal(portal);\n  }\n/**\n * Attach a TemplatePortal as content to this dialog container.\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    if (this._portalHost.hasAttached()) {\n      throwMdDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalHost.attachTemplatePortal(portal);\n  }\n/**\n * Moves the focus inside the focus trap.\n * @return {?}\n */\nprivate _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n/**\n * Restores focus to the element that was focused before the dialog opened.\n * @return {?}\n */\nprivate _restoreFocus() {\n    const /** @type {?} */ toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && 'focus' in toFocus) {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n/**\n * Saves a reference to the element that was focused before the dialog was opened.\n * @return {?}\n */\nprivate _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = /** @type {?} */(( this._document.activeElement as HTMLElement));\n    }\n  }\n/**\n * Callback, invoked whenever an animation on the host completes.\n * @param {?} event\n * @return {?}\n */\n_onAnimationDone(event: AnimationEvent) {\n    this._onAnimationStateChange.emit(event);\n\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n      this._onAnimationStateChange.complete();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-dialog-container, mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('slideDialog', [\n      state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n      state('enter', style({ transform: 'translate3d(0, 0, 0) scale(1)', opacity: 1 })),\n      state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n      transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    ])\n  ],\n  host: {\n    '[class.mat-dialog-container]': 'true',\n    '[attr.role]': 'dialogConfig?.role',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdDialogContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContainer.ctorParameters;\n/** @type {?} */\nMdDialogContainer.propDecorators;\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n * @type {?}\n */\nMdDialogContainer.prototype._portalHost;\n/**\n * The class that traps and manages focus within the dialog.\n * @type {?}\n */\nMdDialogContainer.prototype._focusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n * @type {?}\n */\nMdDialogContainer.prototype._elementFocusedBeforeDialogWasOpened;\n/**\n * Reference to the global document object.\n * @type {?}\n */\nMdDialogContainer.prototype._document;\n/**\n * The dialog configuration.\n * @type {?}\n */\nMdDialogContainer.prototype.dialogConfig;\n/**\n * State of the dialog animation.\n * @type {?}\n */\nMdDialogContainer.prototype._state;\n/**\n * Emits the current animation state whenever it changes.\n * @type {?}\n */\nMdDialogContainer.prototype._onAnimationStateChange;\n/** @type {?} */\nMdDialogContainer.prototype._ngZone;\n/** @type {?} */\nMdDialogContainer.prototype._elementRef;\n/** @type {?} */\nMdDialogContainer.prototype._focusTrapFactory;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {ViewContainerRef} from '@angular/core';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  top?: string;\n  bottom?: string;\n  left?: string;\n  right?: string;\n}\n/**\n * Configuration for opening a modal dialog with the MdDialog service.\n */\nexport class MdDialogConfig {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\n * This affects what is available for injection and the change detection order for the\n * component instantiated inside of the dialog. This does not affect where the dialog\n * content will be rendered.\n */\nviewContainerRef?: ViewContainerRef;\n/**\n * The ARIA role of the dialog element.\n */\nrole?: DialogRole = 'dialog';\n/**\n * Whether the dialog has a backdrop.\n */\nhasBackdrop?: boolean = true;\n/**\n * Custom class for the backdrop,\n */\nbackdropClass?: string = '';\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n */\ndisableClose?: boolean = false;\n/**\n * Width of the dialog.\n */\nwidth?: string = '';\n/**\n * Height of the dialog.\n */\nheight?: string = '';\n/**\n * Position overrides.\n */\nposition?: DialogPosition;\n/**\n * Data being injected into the child component.\n */\ndata?: any = null;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n\nfunction MdDialogConfig_tsickle_Closure_declarations() {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\n * This affects what is available for injection and the change detection order for the\n * component instantiated inside of the dialog. This does not affect where the dialog\n * content will be rendered.\n * @type {?}\n */\nMdDialogConfig.prototype.viewContainerRef;\n/**\n * The ARIA role of the dialog element.\n * @type {?}\n */\nMdDialogConfig.prototype.role;\n/**\n * Whether the dialog has a backdrop.\n * @type {?}\n */\nMdDialogConfig.prototype.hasBackdrop;\n/**\n * Custom class for the backdrop,\n * @type {?}\n */\nMdDialogConfig.prototype.backdropClass;\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n * @type {?}\n */\nMdDialogConfig.prototype.disableClose;\n/**\n * Width of the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.width;\n/**\n * Height of the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.height;\n/**\n * Position overrides.\n * @type {?}\n */\nMdDialogConfig.prototype.position;\n/**\n * Data being injected into the child component.\n * @type {?}\n */\nMdDialogConfig.prototype.data;\n}\n\n","import {Injector, InjectionToken} from '@angular/core';\nimport {MdDialogRef} from './dialog-ref';\n\nexport const /** @type {?} */ MD_DIALOG_DATA = new InjectionToken<any>('MdDialogData');\n/**\n * Custom injector type specifically for instantiating components with a dialog.\n */\nexport class DialogInjector implements Injector {\n/**\n * @param {?} _parentInjector\n * @param {?} _dialogRef\n * @param {?} _data\n */\nconstructor(\nprivate _parentInjector: Injector,\nprivate _dialogRef: MdDialogRef<any>,\nprivate _data: any) { }\n/**\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue?: any): any {\n    if (token === MdDialogRef) {\n      return this._dialogRef;\n    }\n\n    if (token === MD_DIALOG_DATA) {\n      return this._data;\n    }\n\n    return this._parentInjector.get<any>(token, notFoundValue);\n  }\n}\n\nfunction DialogInjector_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogInjector.prototype._parentInjector;\n/** @type {?} */\nDialogInjector.prototype._dialogRef;\n/** @type {?} */\nDialogInjector.prototype._data;\n}\n\n","import {OverlayRef, GlobalPositionStrategy} from '../core';\nimport {AnimationEvent} from '@angular/animations';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdDialogContainer} from './dialog-container';\nimport'rxjs/add/operator/filter';\n/**\n * Reference to a dialog opened via the MdDialog service.\n */\nexport class MdDialogRef<T> {\n/**\n * The instance of component opened into the dialog.\n */\ncomponentInstance: T;\n/**\n * Subject for notifying the user that the dialog has finished closing.\n */\nprivate _afterClosed: Subject<any> = new Subject();\n/**\n * Result to be passed to afterClosed.\n */\nprivate _result: any;\n/**\n * @param {?} _overlayRef\n * @param {?} _containerInstance\n */\nconstructor(private _overlayRef: OverlayRef,\npublic _containerInstance: MdDialogContainer) {\n    _containerInstance._onAnimationStateChange\n      .filter((event: AnimationEvent) => event.toState === 'exit')\n      .subscribe(() => {\n        this._overlayRef.dispose();\n        this.componentInstance = null;\n      }, null, () => {\n        this._afterClosed.next(this._result);\n        this._afterClosed.complete();\n      });\n  }\n/**\n * Close the dialog.\n * @param {?=} dialogResult Optional result to return to the dialog opener.\n * @return {?}\n */\nclose(dialogResult?: any): void {\n    this._result = dialogResult;\n    this._containerInstance._state = 'exit';\n    this._overlayRef.detachBackdrop(); // Transition the backdrop in parallel with the dialog.\n  }\n/**\n * Gets an observable that is notified when the dialog is finished closing.\n * @return {?}\n */\nafterClosed(): Observable<any> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * Updates the dialog's position.\n * @param {?=} position New dialog position.\n * @return {?}\n */\nupdatePosition(position?: DialogPosition): this {\n    let /** @type {?} */ strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n/**\n * Updates the dialog's width and height.\n * @param {?=} width New width of the dialog.\n * @param {?=} height New height of the dialog.\n * @return {?}\n */\nupdateSize(width = 'auto', height = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n/**\n * Fetches the position strategy object from the overlay ref.\n * @return {?}\n */\nprivate _getPositionStrategy(): GlobalPositionStrategy {\n    return /** @type {?} */(( this._overlayRef.getState().positionStrategy as GlobalPositionStrategy));\n  }\n}\n\nfunction MdDialogRef_tsickle_Closure_declarations() {\n/**\n * The instance of component opened into the dialog.\n * @type {?}\n */\nMdDialogRef.prototype.componentInstance;\n/**\n * Subject for notifying the user that the dialog has finished closing.\n * @type {?}\n */\nMdDialogRef.prototype._afterClosed;\n/**\n * Result to be passed to afterClosed.\n * @type {?}\n */\nMdDialogRef.prototype._result;\n/** @type {?} */\nMdDialogRef.prototype._overlayRef;\n/** @type {?} */\nMdDialogRef.prototype._containerInstance;\n}\n\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule, MdCommonModule} from '../core';\nimport {MdMenu} from './menu-directive';\nimport {MdMenuItem} from './menu-item';\nimport {MdMenuTrigger} from './menu-trigger';\nimport {MdRippleModule} from '../core/ripple/index';\nexport class MdMenuModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    OverlayModule,\n    CommonModule,\n    MdRippleModule,\n    MdCommonModule,\n  ],\n  exports: [MdMenu, MdMenuItem, MdMenuTrigger, MdCommonModule],\n  declarations: [MdMenu, MdMenuItem, MdMenuTrigger],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdMenuModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuModule.ctorParameters;\n}\n\n\n\nexport {MdMenu,MdMenuItem,MdMenuTrigger,MdMenuPanel,MenuPositionX,MenuPositionY} from './menu';\nexport {fadeInItems, transformMenu} from './menu-animations';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n    AfterViewInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewContainerRef,\n} from '@angular/core';\nimport {MdMenuPanel} from './menu-panel';\nimport {throwMdMenuMissingError} from './menu-errors';\nimport {\n    isFakeMousedownFromScreenReader,\n    Dir,\n    LayoutDirection,\n    Overlay,\n    OverlayState,\n    OverlayRef,\n    TemplatePortal,\n    ConnectedPositionStrategy,\n    HorizontalConnectionPos,\n    VerticalConnectionPos,\n    RepositionScrollStrategy,\n    ScrollDispatcher,\n} from '../core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n/**\n * This directive is intended to be used in conjunction with an md-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\nexport class MdMenuTrigger implements AfterViewInit, OnDestroy {\nprivate _portal: TemplatePortal;\nprivate _overlayRef: OverlayRef;\nprivate _menuOpen: boolean = false;\nprivate _backdropSubscription: Subscription;\nprivate _positionSubscription: Subscription;\nprivate _openedByMouse: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMdMenuTriggerFor(): MdMenuPanel { return this.menu; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMdMenuTriggerFor(v: MdMenuPanel) { this.menu = v; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMatMenuTriggerFor(): MdMenuPanel { return this.menu; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMatMenuTriggerFor(v: MdMenuPanel) { this.menu = v; }\n/**\n * @return {?}\n */\nget _matMenuTriggerFor(): MdMenuPanel { return this.menu; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matMenuTriggerFor(v: MdMenuPanel) { this.menu = v; }\n/**\n * References the menu instance that the trigger is associated with.\n */\nmenu: MdMenuPanel;\n/**\n * Event emitted when the associated menu is opened.\n */\nonMenuOpen = new EventEmitter<void>();\n/**\n * Event emitted when the associated menu is closed.\n */\nonMenuClose = new EventEmitter<void>();\n/**\n * @param {?} _overlay\n * @param {?} _element\n * @param {?} _viewContainerRef\n * @param {?} _dir\n * @param {?} _scrollDispatcher\n */\nconstructor(private _overlay: Overlay,\nprivate _element: ElementRef,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _dir: Dir,\nprivate _scrollDispatcher: ScrollDispatcher) { }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._checkMenu();\n    this.menu.close.subscribe(() => this.closeMenu());\n  }\n/**\n * @return {?}\n */\nngOnDestroy() { this.destroyMenu(); }\n/**\n * Whether the menu is open.\n * @return {?}\n */\nget menuOpen(): boolean { return this._menuOpen; }\n/**\n * Toggles the menu between the open and closed states.\n * @return {?}\n */\ntoggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n/**\n * Opens the menu.\n * @return {?}\n */\nopenMenu(): void {\n    if (!this._menuOpen) {\n      this._createOverlay();\n      this._overlayRef.attach(this._portal);\n      this._subscribeToBackdrop();\n      this._initMenu();\n    }\n  }\n/**\n * Closes the menu.\n * @return {?}\n */\ncloseMenu(): void {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n      this._backdropSubscription.unsubscribe();\n      this._resetMenu();\n    }\n  }\n/**\n * Removes the menu from the DOM.\n * @return {?}\n */\ndestroyMenu(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n\n      this._cleanUpSubscriptions();\n    }\n  }\n/**\n * Focuses the menu trigger.\n * @return {?}\n */\nfocus() {\n    this._element.nativeElement.focus();\n  }\n/**\n * The text direction of the containing app.\n * @return {?}\n */\nget dir(): LayoutDirection {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * This method ensures that the menu closes when the overlay backdrop is clicked.\n * We do not use first() here because doing so would not catch clicks from within\n * the menu, and it would fail to unsubscribe properly. Instead, we unsubscribe\n * explicitly when the menu is closed or destroyed.\n * @return {?}\n */\nprivate _subscribeToBackdrop(): void {\n    this._backdropSubscription = this._overlayRef.backdropClick().subscribe(() => {\n      this.menu._emitCloseEvent();\n    });\n  }\n/**\n * This method sets the menu state to open and focuses the first item if\n * the menu was opened via the keyboard.\n * @return {?}\n */\nprivate _initMenu(): void {\n    this._setIsMenuOpen(true);\n\n    // Should only set focus if opened via the keyboard, so keyboard users can\n    // can easily navigate menu items. According to spec, mouse users should not\n    // see the focus style.\n    if (!this._openedByMouse) {\n      this.menu.focusFirstItem();\n    }\n  }\n/**\n * This method resets the menu when it's closed, most importantly restoring\n * focus to the menu trigger if the menu was opened via the keyboard.\n * @return {?}\n */\nprivate _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // Focus only needs to be reset to the host element if the menu was opened\n    // by the keyboard and manually shifted to the first menu item.\n    if (!this._openedByMouse) {\n      this.focus();\n    }\n    this._openedByMouse = false;\n  }\n/**\n * @param {?} isOpen\n * @return {?}\n */\nprivate _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.onMenuOpen.emit() : this.onMenuClose.emit();\n  }\n/**\n *  This method checks that a valid instance of MdMenu has been passed into\n *  mdMenuTriggerFor. If not, an exception is thrown.\n * @return {?}\n */\nprivate _checkMenu() {\n    if (!this.menu) {\n      throwMdMenuMissingError();\n    }\n  }\n/**\n *  This method creates the overlay from the provided menu's template and saves its\n *  OverlayRef so that it can be attached to the DOM when openMenu is called.\n * @return {?}\n */\nprivate _createOverlay(): void {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const /** @type {?} */ config = this._getOverlayConfig();\n      this._subscribeToPositions( /** @type {?} */((config.positionStrategy as ConnectedPositionStrategy)));\n      this._overlayRef = this._overlay.create(config);\n    }\n  }\n/**\n * This method builds the configuration object needed to create the overlay, the OverlayState.\n * @return {?} OverlayState\n */\nprivate _getOverlayConfig(): OverlayState {\n    const /** @type {?} */ overlayState = new OverlayState();\n    overlayState.positionStrategy = this._getPosition()\n                                        .withDirection(this.dir);\n    overlayState.hasBackdrop = true;\n    overlayState.backdropClass = 'cdk-overlay-transparent-backdrop';\n    overlayState.direction = this.dir;\n    overlayState.scrollStrategy = new RepositionScrollStrategy(this._scrollDispatcher);\n    return overlayState;\n  }\n/**\n * Listens to changes in the position of the overlay and sets the correct classes\n * on the menu based on the new position. This ensures the animation origin is always\n * correct, even if a fallback position is used for the overlay.\n * @param {?} position\n * @return {?}\n */\nprivate _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    this._positionSubscription = position.onPositionChange.subscribe((change) => {\n      const /** @type {?} */ posX: MenuPositionX = change.connectionPair.originX === 'start' ? 'after' : 'before';\n      let /** @type {?} */ posY: MenuPositionY = change.connectionPair.originY === 'top' ? 'below' : 'above';\n\n      if (!this.menu.overlapTrigger) {\n        posY = posY === 'below' ? 'above' : 'below';\n      }\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n/**\n * This method builds the position strategy for the overlay, so the menu is properly connected\n * to the trigger.\n * @return {?} ConnectedPositionStrategy\n */\nprivate _getPosition(): ConnectedPositionStrategy  {\n    const [posX, fallbackX]: HorizontalConnectionPos[] =\n      this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    const [overlayY, fallbackOverlayY]: VerticalConnectionPos[] =\n      this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let /** @type {?} */ originY = overlayY;\n    let /** @type {?} */ fallbackOriginY = fallbackOverlayY;\n\n    if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      fallbackOriginY = fallbackOverlayY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n      .connectedTo(this._element,\n          {originX: posX, originY: originY}, {overlayX: posX, overlayY: overlayY})\n      .withFallbackPosition(\n          {originX: fallbackX, originY: originY},\n          {overlayX: fallbackX, overlayY: overlayY})\n      .withFallbackPosition(\n          {originX: posX, originY: fallbackOriginY},\n          {overlayX: posX, overlayY: fallbackOverlayY})\n      .withFallbackPosition(\n          {originX: fallbackX, originY: fallbackOriginY},\n          {overlayX: fallbackX, overlayY: fallbackOverlayY});\n  }\n/**\n * @return {?}\n */\nprivate _cleanUpSubscriptions(): void {\n    if (this._backdropSubscription) {\n      this._backdropSubscription.unsubscribe();\n    }\n    if (this._positionSubscription) {\n      this._positionSubscription.unsubscribe();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `[md-menu-trigger-for], [mat-menu-trigger-for],\n             [mdMenuTriggerFor], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(click)': 'toggleMenu()',\n  },\n  exportAs: 'mdMenuTrigger'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: ElementRef, },\n{type: ViewContainerRef, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: ScrollDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_deprecatedMdMenuTriggerFor': [{ type: Input, args: ['md-menu-trigger-for', ] },],\n'_deprecatedMatMenuTriggerFor': [{ type: Input, args: ['mat-menu-trigger-for', ] },],\n'_matMenuTriggerFor': [{ type: Input, args: ['matMenuTriggerFor', ] },],\n'menu': [{ type: Input, args: ['mdMenuTriggerFor', ] },],\n'onMenuOpen': [{ type: Output },],\n'onMenuClose': [{ type: Output },],\n};\n}\n\nfunction MdMenuTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuTrigger.ctorParameters;\n/** @type {?} */\nMdMenuTrigger.propDecorators;\n/** @type {?} */\nMdMenuTrigger.prototype._portal;\n/** @type {?} */\nMdMenuTrigger.prototype._overlayRef;\n/** @type {?} */\nMdMenuTrigger.prototype._menuOpen;\n/** @type {?} */\nMdMenuTrigger.prototype._backdropSubscription;\n/** @type {?} */\nMdMenuTrigger.prototype._positionSubscription;\n/** @type {?} */\nMdMenuTrigger.prototype._openedByMouse;\n/**\n * References the menu instance that the trigger is associated with.\n * @type {?}\n */\nMdMenuTrigger.prototype.menu;\n/**\n * Event emitted when the associated menu is opened.\n * @type {?}\n */\nMdMenuTrigger.prototype.onMenuOpen;\n/**\n * Event emitted when the associated menu is closed.\n * @type {?}\n */\nMdMenuTrigger.prototype.onMenuClose;\n/** @type {?} */\nMdMenuTrigger.prototype._overlay;\n/** @type {?} */\nMdMenuTrigger.prototype._element;\n/** @type {?} */\nMdMenuTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMdMenuTrigger.prototype._dir;\n/** @type {?} */\nMdMenuTrigger.prototype._scrollDispatcher;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","// TODO(kara): prevent-close functionality\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMdMenuInvalidPositionX, throwMdMenuInvalidPositionY} from './menu-errors';\nimport {MdMenuItem} from './menu-item';\nimport {FocusKeyManager} from '../core/a11y/focus-key-manager';\nimport {MdMenuPanel} from './menu-panel';\nimport {Subscription} from 'rxjs/Subscription';\nimport {transformMenu, fadeInItems} from './menu-animations';\nimport {ESCAPE} from '../core/keyboard/keycodes';\nexport class MdMenu implements AfterContentInit, MdMenuPanel, OnDestroy {\nprivate _keyManager: FocusKeyManager;\nprivate _xPosition: MenuPositionX = 'after';\nprivate _yPosition: MenuPositionY = 'below';\n/**\n * Subscription to tab events on the menu panel\n */\nprivate _tabSubscription: Subscription;\n/**\n * Config object to be passed into the menu's ngClass\n */\n_classList: any = {};\n/**\n * Position of the menu in the X axis.\n * @return {?}\n */\nget xPosition() { return this._xPosition; }\n/**\n * @param {?} value\n * @return {?}\n */\nset xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMdMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n/**\n * Position of the menu in the Y axis.\n * @return {?}\n */\nget yPosition() { return this._yPosition; }\n/**\n * @param {?} value\n * @return {?}\n */\nset yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMdMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n   templateRef: TemplateRef<any>;\n/**\n * List of the items inside of a menu.\n */\nitems: QueryList<MdMenuItem>;\n/**\n * Whether the menu should overlap its trigger.\n */\noverlapTrigger = true;\n/**\n * This method takes classes set on the host md-menu element and applies them on the\n * menu template that displays in the overlay container.  Otherwise, it's difficult\n * to style the containing menu from outside the component.\n * @param {?} classes list of class names\n * @return {?}\n */\nset classList(classes: string) {\n    this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n      obj[className] = true;\n      return obj;\n    }, {});\n    this.setPositionClasses();\n  }\n/**\n * Event emitted when the menu is closed.\n */\nclose = new EventEmitter<void>();\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this.items).withWrap();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this._emitCloseEvent());\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._tabSubscription) {\n      this._tabSubscription.unsubscribe();\n    }\n  }\n/**\n * Handle a keyboard event from the menu, delegating to the appropriate action.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this._emitCloseEvent();\n        return;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n/**\n * Focus the first item in the menu. This method is used by the menu trigger\n * to focus the first item when the menu is opened by the ENTER key.\n * @return {?}\n */\nfocusFirstItem() {\n    this._keyManager.setFirstItemActive();\n  }\n/**\n * This emits a close event to which the trigger is subscribed. When emitted, the\n * trigger will close the menu.\n * @return {?}\n */\n_emitCloseEvent(): void {\n    this.close.emit();\n  }\n/**\n * It's necessary to set position-based classes to ensure the menu panel animation\n * folds out from the correct direction.\n * @param {?=} posX\n * @param {?=} posY\n * @return {?}\n */\nsetPositionClasses(posX = this.xPosition, posY = this.yPosition): void {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-menu, mat-menu',\n  host: {'role': 'menu'},\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    transformMenu,\n    fadeInItems\n  ],\n  exportAs: 'mdMenu'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'xPosition': [{ type: Input },],\n'yPosition': [{ type: Input },],\n'templateRef': [{ type: ViewChild, args: [TemplateRef, ] },],\n'items': [{ type: ContentChildren, args: [MdMenuItem, ] },],\n'overlapTrigger': [{ type: Input },],\n'classList': [{ type: Input, args: ['class', ] },],\n'close': [{ type: Output },],\n};\n}\n\nfunction MdMenu_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenu.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenu.ctorParameters;\n/** @type {?} */\nMdMenu.propDecorators;\n/** @type {?} */\nMdMenu.prototype._keyManager;\n/** @type {?} */\nMdMenu.prototype._xPosition;\n/** @type {?} */\nMdMenu.prototype._yPosition;\n/**\n * Subscription to tab events on the menu panel\n * @type {?}\n */\nMdMenu.prototype._tabSubscription;\n/**\n * Config object to be passed into the menu's ngClass\n * @type {?}\n */\nMdMenu.prototype._classList;\n/** @type {?} */\nMdMenu.prototype.templateRef;\n/**\n * List of the items inside of a menu.\n * @type {?}\n */\nMdMenu.prototype.items;\n/**\n * Whether the menu should overlap its trigger.\n * @type {?}\n */\nMdMenu.prototype.overlapTrigger;\n/**\n * Event emitted when the menu is closed.\n * @type {?}\n */\nMdMenu.prototype.close;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Below are all the animations for the md-menu component.\n * Animation duration and timing values are based on AngularJS Material.\n */\n\n\n/**\n * This animation controls the menu panel's entry and exit from the page.\n *\n * When the menu panel is added to the DOM, it scales in and fades in its border.\n *\n * When the menu panel is removed from the DOM, it simply fades out after a brief\n * delay to display the ripple.\n */\n\n// TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\nexport const /** @type {?} */ transformMenu: AnimationTriggerMetadata = trigger('transformMenu', [\n  state('showing', style({\n    opacity: 1,\n    transform: `scale(1)`\n  })),\n  transition('void => *', [\n    style({\n      opacity: 0,\n      transform: `scale(0)`\n    }),\n    animate(`200ms cubic-bezier(0.25, 0.8, 0.25, 1)`)\n  ]),\n  transition('* => void', [\n    animate('50ms 100ms linear', style({opacity: 0}))\n  ])\n]);\n/**\n * This animation fades in the background color and content of the menu panel\n * after its containing element is scaled in.\n */\nexport const fadeInItems: AnimationTriggerMetadata = trigger('fadeInItems', [\n  state('showing', style({opacity: 1})),\n  transition('void => *', [\n    style({opacity: 0}),\n    animate(`200ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)`)\n  ])\n]);\n","import {Component, ElementRef, Input} from '@angular/core';\nimport {Focusable} from '../core/a11y/focus-key-manager';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\n/**\n * This directive is intended to be used inside an md-menu tag.\n * It exists mostly to set the role attribute.\n */\nexport class MdMenuItem implements Focusable {\n/**\n * Whether the menu item is disabled\n */\nprivate _disabled: boolean = false;\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) {}\n/**\n * Focuses the menu item.\n * @return {?}\n */\nfocus(): void {\n    this._getHostElement().focus();\n  }\n/**\n * Whether the menu item is disabled.\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Used to set the `tabindex`.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this._disabled ? '-1' : '0';\n  }\n/**\n * Used to set the HTML `disabled` attribute. Necessary for links to be disabled properly.\n * @return {?}\n */\n_getDisabledAttr(): boolean {\n    return this._disabled ? true : null;\n  }\n/**\n * Returns the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n/**\n * Prevents the default element actions if it is disabled.\n * @param {?} event\n * @return {?}\n */\n_checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-menu-item], [mat-menu-item]',\n  host: {\n    'role': 'menuitem',\n    '[class.mat-menu-item]': 'true',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': '_getDisabledAttr()',\n    '(click)': '_checkDisabled($event)',\n  },\n  templateUrl: 'menu-item.html',\n  exportAs: 'mdMenuItem'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdMenuItem_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuItem.ctorParameters;\n/** @type {?} */\nMdMenuItem.propDecorators;\n/**\n * Whether the menu item is disabled\n * @type {?}\n */\nMdMenuItem.prototype._disabled;\n/** @type {?} */\nMdMenuItem.prototype._elementRef;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid md-menu instance\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdMenuMissingError() {\n  throw new Error(`md-menu-trigger: must pass in an md-menu instance.\n\n    Example:\n      <md-menu #menu=\"mdMenu\"></md-menu>\n      <button [mdMenuTriggerFor]=\"menu\"></button>`);\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdMenuInvalidPositionX() {\n  throw new Error(`x-position value must be either 'before' or after'.\n      Example: <md-menu x-position=\"before\" #menu=\"mdMenu\"></md-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdMenuInvalidPositionY() {\n  throw new Error(`y-position value must be either 'above' or below'.\n      Example: <md-menu y-position=\"above\" #menu=\"mdMenu\"></md-menu>`);\n}\n","import {NgModule} from '@angular/core';\nimport {OverlayModule, MdCommonModule} from '../core';\nimport {PlatformModule} from '../core/platform/index';\nimport {MdTooltip, TooltipComponent} from './tooltip';\nexport class MdTooltipModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [OverlayModule, MdCommonModule, PlatformModule],\n  exports: [MdTooltip, TooltipComponent, MdCommonModule],\n  declarations: [MdTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTooltipModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTooltipModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTooltipModule.ctorParameters;\n}\n\n\n\nexport {TooltipPosition,TOUCHEND_HIDE_DELAY,SCROLL_THROTTLE_MS,throwMdTooltipInvalidPositionError,MdTooltip,TooltipVisibility,TooltipComponent} from './tooltip';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  Directive,\n  Input,\n  ElementRef,\n  ViewContainerRef,\n  NgZone,\n  Optional,\n  OnDestroy,\n  Renderer2,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  style,\n  trigger,\n  state,\n  transition,\n  animate,\n  AnimationEvent,\n} from '@angular/animations';\nimport {\n  Overlay,\n  OverlayState,\n  OverlayRef,\n  ComponentPortal,\n  OverlayConnectionPosition,\n  OriginConnectionPosition,\n  RepositionScrollStrategy,\n} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Dir} from '../core/rtl/dir';\nimport {Platform} from '../core/platform/index';\nimport'rxjs/add/operator/first';\nimport {ScrollDispatcher} from '../core/overlay/scroll/scroll-dispatcher';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n/**\n * Time in ms to delay before changing the tooltip visibility to hidden\n */\nexport const TOUCHEND_HIDE_DELAY = 1500;\n/**\n * Time in ms to throttle repositioning after scroll events.\n */\nexport const SCROLL_THROTTLE_MS = 20;\n/**\n * Throws an error if the user supplied an invalid tooltip position.\n * @param {?} position\n * @return {?}\n */\nexport function throwMdTooltipInvalidPositionError(position: string) {\n  throw new Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n * \n * https://material.google.com/components/tooltips.html\n */\nexport class MdTooltip implements OnDestroy {\n  _overlayRef: OverlayRef;\n  _tooltipInstance: TooltipComponent;\nprivate _position: TooltipPosition = 'below';\nprivate _disabled: boolean = false;\n/**\n * Allows the user to define the position of the tooltip relative to the parent element\n * @return {?}\n */\nget position(): TooltipPosition { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n/**\n * Disables the display of the tooltip.\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _positionDeprecated(): TooltipPosition { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _positionDeprecated(value: TooltipPosition) { this._position = value; }\n/**\n * The default delay in ms before showing the tooltip after show is called\n */\nshowDelay = 0;\n/**\n * The default delay in ms before hiding the tooltip after hide is called\n */\nhideDelay = 0;\nprivate _message: string;\n/**\n * The message to be displayed in the tooltip\n * @return {?}\n */\nget message() { return this._message; }\n/**\n * @param {?} value\n * @return {?}\n */\nset message(value: string) {\n    this._message = value;\n    if (this._tooltipInstance) {\n      this._setTooltipMessage(this._message);\n    }\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMessage(): string { return this.message; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMessage(v: string) { this.message = v; }\n/**\n * @return {?}\n */\nget _matMessage() { return this.message; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matMessage(v) { this.message = v; }\n/**\n * @return {?}\n */\nget _matPosition() { return this.position; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matPosition(v) { this.position = v; }\n/**\n * @return {?}\n */\nget _matDisabled() { return this.disabled; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matDisabled(v) { this.disabled = v; }\n/**\n * @return {?}\n */\nget _matHideDelay() { return this.hideDelay; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matHideDelay(v) { this.hideDelay = v; }\n/**\n * @return {?}\n */\nget _matShowDelay() { return this.showDelay; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matShowDelay(v) { this.showDelay = v; }\n/**\n * @param {?} _overlay\n * @param {?} _elementRef\n * @param {?} _scrollDispatcher\n * @param {?} _viewContainerRef\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _platform\n * @param {?} _dir\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _elementRef: ElementRef,\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2,\nprivate _platform: Platform,\nprivate _dir: Dir) {\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      _renderer.listen(_elementRef.nativeElement, 'mouseenter', () => this.show());\n      _renderer.listen(_elementRef.nativeElement, 'mouseleave', () => this.hide());\n    }\n  }\n/**\n * Dispose the tooltip when destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n  }\n/**\n * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n * @param {?=} delay\n * @return {?}\n */\nshow(delay: number = this.showDelay): void {\n    if (this.disabled || !this._message || !this._message.trim()) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipMessage(this._message);\n    this._tooltipInstance.show(this._position, delay);\n  }\n/**\n * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n * @param {?=} delay\n * @return {?}\n */\nhide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n/**\n * Shows/hides the tooltip\n * @return {?}\n */\ntoggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n/**\n * Returns true if the tooltip is currently visible to the user\n * @return {?}\n */\n_isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n/**\n * Create the tooltip to display\n * @return {?}\n */\nprivate _createTooltip(): void {\n    this._createOverlay();\n    let /** @type {?} */ portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = this._overlayRef.attach(portal).instance;\n\n    // Dispose the overlay when finished the shown tooltip.\n    this._tooltipInstance.afterHidden().subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n/**\n * Create the overlay config and position strategy\n * @return {?}\n */\nprivate _createOverlay(): void {\n    let /** @type {?} */ origin = this._getOrigin();\n    let /** @type {?} */ position = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    // After position changes occur and the overlay is clipped by a parent scrollable then\n    // close the tooltip.\n    let /** @type {?} */ strategy = this._overlay.position().connectedTo(this._elementRef, origin, position);\n    strategy.withScrollableContainers(this._scrollDispatcher.getScrollContainers(this._elementRef));\n    strategy.onPositionChange.subscribe(change => {\n      if (change.scrollableViewProperties.isOverlayClipped &&\n          this._tooltipInstance && this._tooltipInstance.isVisible()) {\n        this.hide(0);\n      }\n    });\n\n    let /** @type {?} */ config = new OverlayState();\n    config.direction = this._dir ? this._dir.value : 'ltr';\n    config.positionStrategy = strategy;\n    config.scrollStrategy =\n        new RepositionScrollStrategy(this._scrollDispatcher, SCROLL_THROTTLE_MS);\n\n    this._overlayRef = this._overlay.create(config);\n  }\n/**\n * Disposes the current tooltip and the overlay it is attached to\n * @return {?}\n */\nprivate _disposeTooltip(): void {\n    this._overlayRef.dispose();\n    this._overlayRef = null;\n    this._tooltipInstance = null;\n  }\n/**\n * Returns the origin position based on the user's position preference\n * @return {?}\n */\n_getOrigin(): OriginConnectionPosition {\n    if (this.position == 'above' || this.position == 'below') {\n      return {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    }\n\n    const /** @type {?} */ isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    if (this.position == 'left' ||\n        this.position == 'before' && isDirectionLtr ||\n        this.position == 'after' && !isDirectionLtr) {\n      return {originX: 'start', originY: 'center'};\n    }\n\n    if (this.position == 'right' ||\n        this.position == 'after' && isDirectionLtr ||\n        this.position == 'before' && !isDirectionLtr) {\n      return {originX: 'end', originY: 'center'};\n    }\n\n    throwMdTooltipInvalidPositionError(this.position);\n  }\n/**\n * Returns the overlay position based on the user's preference\n * @return {?}\n */\n_getOverlayPosition(): OverlayConnectionPosition {\n    if (this.position == 'above') {\n      return {overlayX: 'center', overlayY: 'bottom'};\n    }\n\n    if (this.position == 'below') {\n      return {overlayX: 'center', overlayY: 'top'};\n    }\n\n    const /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n    if (this.position == 'left' ||\n        this.position == 'before' && isLtr ||\n        this.position == 'after' && !isLtr) {\n      return {overlayX: 'end', overlayY: 'center'};\n    }\n\n    if (this.position == 'right' ||\n        this.position == 'after' && isLtr ||\n        this.position == 'before' && !isLtr) {\n      return {overlayX: 'start', overlayY: 'center'};\n    }\n\n    throwMdTooltipInvalidPositionError(this.position);\n  }\n/**\n * Updates the tooltip message and repositions the overlay according to the new message length\n * @param {?} message\n * @return {?}\n */\nprivate _setTooltipMessage(message: string) {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    this._tooltipInstance.message = message;\n    this._tooltipInstance._markForCheck();\n\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => {\n      if (this._tooltipInstance) {\n        this._overlayRef.updatePosition();\n      }\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tooltip], [mdTooltip], [mat-tooltip], [matTooltip]',\n  host: {\n    '(longpress)': 'show()',\n    '(touchend)': 'hide(' + TOUCHEND_HIDE_DELAY + ')',\n  },\n  exportAs: 'mdTooltip',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: ElementRef, },\n{type: ScrollDispatcher, },\n{type: ViewContainerRef, },\n{type: NgZone, },\n{type: Renderer2, },\n{type: Platform, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'position': [{ type: Input, args: ['mdTooltipPosition', ] },],\n'disabled': [{ type: Input, args: ['mdTooltipDisabled', ] },],\n'_positionDeprecated': [{ type: Input, args: ['tooltip-position', ] },],\n'showDelay': [{ type: Input, args: ['mdTooltipShowDelay', ] },],\n'hideDelay': [{ type: Input, args: ['mdTooltipHideDelay', ] },],\n'message': [{ type: Input, args: ['mdTooltip', ] },],\n'_deprecatedMessage': [{ type: Input, args: ['md-tooltip', ] },],\n'_matMessage': [{ type: Input, args: ['matTooltip', ] },],\n'_matPosition': [{ type: Input, args: ['matTooltipPosition', ] },],\n'_matDisabled': [{ type: Input, args: ['matTooltipDisabled', ] },],\n'_matHideDelay': [{ type: Input, args: ['matTooltipHideDelay', ] },],\n'_matShowDelay': [{ type: Input, args: ['matTooltipShowDelay', ] },],\n};\n}\n\nfunction MdTooltip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTooltip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTooltip.ctorParameters;\n/** @type {?} */\nMdTooltip.propDecorators;\n/** @type {?} */\nMdTooltip.prototype._overlayRef;\n/** @type {?} */\nMdTooltip.prototype._tooltipInstance;\n/** @type {?} */\nMdTooltip.prototype._position;\n/** @type {?} */\nMdTooltip.prototype._disabled;\n/**\n * The default delay in ms before showing the tooltip after show is called\n * @type {?}\n */\nMdTooltip.prototype.showDelay;\n/**\n * The default delay in ms before hiding the tooltip after hide is called\n * @type {?}\n */\nMdTooltip.prototype.hideDelay;\n/** @type {?} */\nMdTooltip.prototype._message;\n/** @type {?} */\nMdTooltip.prototype._overlay;\n/** @type {?} */\nMdTooltip.prototype._elementRef;\n/** @type {?} */\nMdTooltip.prototype._scrollDispatcher;\n/** @type {?} */\nMdTooltip.prototype._viewContainerRef;\n/** @type {?} */\nMdTooltip.prototype._ngZone;\n/** @type {?} */\nMdTooltip.prototype._renderer;\n/** @type {?} */\nMdTooltip.prototype._platform;\n/** @type {?} */\nMdTooltip.prototype._dir;\n}\n\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n/**\n * Internal component that wraps the tooltip's content.\n * \\@docs-private\n */\nexport class TooltipComponent {\n/**\n * Message to display in the tooltip\n */\nmessage: string;\n/**\n * The timeout ID of any current timer set to show the tooltip\n */\n_showTimeoutId: number;\n/**\n * The timeout ID of any current timer set to hide the tooltip\n */\n_hideTimeoutId: number;\n/**\n * Property watched by the animation framework to show or hide the tooltip\n */\n_visibility: TooltipVisibility = 'initial';\n/**\n * Whether interactions on the page should close the tooltip\n */\n_closeOnInteraction: boolean = false;\n/**\n * The transform origin used in the animation for showing and hiding the tooltip\n */\n_transformOrigin: string = 'bottom';\n/**\n * Subject for notifying that the tooltip has been hidden from the view\n */\nprivate _onHide: Subject<any> = new Subject();\n/**\n * @param {?} _dir\n * @param {?} _changeDetectorRef\n */\nconstructor(\nprivate _dir: Dir,\nprivate _changeDetectorRef: ChangeDetectorRef) {}\n/**\n * Shows the tooltip with an animation originating from the provided origin\n * @param {?} position Position of the tooltip.\n * @param {?} delay Amount of milliseconds to the delay showing the tooltip.\n * @return {?}\n */\nshow(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n\n    this._setTransformOrigin(position);\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // If this was set to true immediately, then a body click that triggers show() would\n      // trigger interaction and close the tooltip right after it was displayed.\n      this._closeOnInteraction = false;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n      setTimeout(() => this._closeOnInteraction = true, 0);\n    }, delay);\n  }\n/**\n * Begins the animation to hide the tooltip after the provided delay in ms.\n * @param {?} delay Amount of milliseconds to delay showing the tooltip.\n * @return {?}\n */\nhide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._closeOnInteraction = false;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n/**\n * Returns an observable that notifies when the tooltip has been hidden from view\n * @return {?}\n */\nafterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n/**\n * Whether the tooltip is being displayed\n * @return {?}\n */\nisVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n/**\n * Sets the tooltip transform origin according to the tooltip position\n * @param {?} value\n * @return {?}\n */\n_setTransformOrigin(value: TooltipPosition) {\n    const /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n    switch (value) {\n      case 'before': this._transformOrigin = isLtr ? 'right' : 'left'; break;\n      case 'after':  this._transformOrigin = isLtr ? 'left' : 'right'; break;\n      case 'left':   this._transformOrigin = 'right'; break;\n      case 'right':  this._transformOrigin = 'left'; break;\n      case 'above':  this._transformOrigin = 'bottom'; break;\n      case 'below':  this._transformOrigin = 'top'; break;\n      default: throwMdTooltipInvalidPositionError(value);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_afterVisibilityAnimation(e: AnimationEvent): void {\n    if (e.toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n  }\n/**\n * Interactions on the HTML body should close the tooltip immediately as defined in the\n * material design spec.\n * https://material.google.com/components/tooltips.html#tooltips-interaction\n * @return {?}\n */\n_handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n/**\n * Marks that the tooltip needs to be checked in the next change detection run.\n * Mainly used for rendering the initial text before positioning a tooltip, which\n * can be problematic in components with OnPush change detection.\n * @return {?}\n */\n_markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tooltip-component, mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  animations: [\n    trigger('state', [\n      state('void', style({transform: 'scale(0)'})),\n      state('initial', style({transform: 'scale(0)'})),\n      state('visible', style({transform: 'scale(1)'})),\n      state('hidden', style({transform: 'scale(0)'})),\n      transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n      transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n    ])\n  ],\n  host: {\n    '(body:click)': 'this._handleBodyInteraction()'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n];\n}\n\nfunction TooltipComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTooltipComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTooltipComponent.ctorParameters;\n/**\n * Message to display in the tooltip\n * @type {?}\n */\nTooltipComponent.prototype.message;\n/**\n * The timeout ID of any current timer set to show the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._showTimeoutId;\n/**\n * The timeout ID of any current timer set to hide the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._hideTimeoutId;\n/**\n * Property watched by the animation framework to show or hide the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._visibility;\n/**\n * Whether interactions on the page should close the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._closeOnInteraction;\n/**\n * The transform origin used in the animation for showing and hiding the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._transformOrigin;\n/**\n * Subject for notifying that the tooltip has been hidden from the view\n * @type {?}\n */\nTooltipComponent.prototype._onHide;\n/** @type {?} */\nTooltipComponent.prototype._dir;\n/** @type {?} */\nTooltipComponent.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {MdCommonModule} from '../core';\nimport {MdToolbar, MdToolbarRow} from './toolbar';\nexport class MdToolbarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [MdToolbar, MdToolbarRow, MdCommonModule],\n  declarations: [MdToolbar, MdToolbarRow],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdToolbarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbarModule.ctorParameters;\n}\n\n\n\nexport {MdToolbarRow,MdToolbar} from './toolbar';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ViewEncapsulation,\n  Directive,\n  ElementRef,\n  Renderer2,\n} from '@angular/core';\nexport class MdToolbarRow {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-toolbar-row, mat-toolbar-row',\n  host: {\n    '[class.mat-toolbar-row]': 'true',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdToolbarRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbarRow.ctorParameters;\n}\n\nexport class MdToolbar {\nprivate _color: string;\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n */\nconstructor(private _elementRef: ElementRef,\nprivate _renderer: Renderer2) { }\n/**\n * The color of the toolbar. Can be primary, accent, or warn.\n * @return {?}\n */\nget color(): string {\n    return this._color;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) {\n    this._updateColor(value);\n  }\n/**\n * @param {?} newColor\n * @return {?}\n */\nprivate _updateColor(newColor: string) {\n    this._setElementColor(this._color, false);\n    this._setElementColor(newColor, true);\n    this._color = newColor;\n  }\n/**\n * @param {?} color\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setElementColor(color: string, isAdd: boolean) {\n    if (color != null && color != '') {\n      let /** @type {?} */ element = this._elementRef.nativeElement;\n\n      if (isAdd) {\n        this._renderer.addClass(element, `mat-${color}`);\n      } else {\n        this._renderer.removeClass(element, `mat-${color}`);\n      }\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-toolbar, mat-toolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  host: {\n    '[class.mat-toolbar]': 'true',\n    'role': 'toolbar'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n};\n}\n\nfunction MdToolbar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbar.ctorParameters;\n/** @type {?} */\nMdToolbar.propDecorators;\n/** @type {?} */\nMdToolbar.prototype._color;\n/** @type {?} */\nMdToolbar.prototype._elementRef;\n/** @type {?} */\nMdToolbar.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {PortalModule} from '../core';\nimport {MdRippleModule} from '../core/ripple/index';\nimport {ObserveContentModule} from '../core/observe-content/observe-content';\nimport {MdTab} from './tab';\nimport {MdTabGroup} from './tab-group';\nimport {MdTabLabel} from './tab-label';\nimport {MdTabLabelWrapper} from './tab-label-wrapper';\nimport {MdTabNavBar, MdTabLink, MdTabLinkRipple} from './tab-nav-bar/tab-nav-bar';\nimport {MdInkBar} from './ink-bar';\nimport {MdTabBody} from './tab-body';\nimport {VIEWPORT_RULER_PROVIDER} from '../core/overlay/position/viewport-ruler';\nimport {MdTabHeader} from './tab-header';\nimport {ScrollDispatchModule} from '../core/overlay/scroll/index';\nexport class MdTabsModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    PortalModule,\n    MdRippleModule,\n    ObserveContentModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MdTabGroup,\n    MdTabLabel,\n    MdTab,\n    MdTabNavBar,\n    MdTabLink,\n    MdTabLinkRipple\n  ],\n  declarations: [\n    MdTabGroup,\n    MdTabLabel,\n    MdTab,\n    MdInkBar,\n    MdTabLabelWrapper,\n    MdTabNavBar,\n    MdTabLink,\n    MdTabBody,\n    MdTabLinkRipple,\n    MdTabHeader\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTabsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabsModule.ctorParameters;\n}\n\n\n\nexport {MdTabChangeEvent,MdTabHeaderPosition,MdTabGroup} from './tab-group';\nexport {MdInkBar} from './ink-bar';\nexport {MdTabBody, MdTabBodyOriginState, MdTabBodyPositionState} from './tab-body';\nexport {MdTabHeader, ScrollDirection} from './tab-header';\nexport {MdTabLabelWrapper} from './tab-label-wrapper';\nexport {MdTab} from './tab';\nexport {MdTabLabel} from './tab-label';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  ViewChild,\n  Component,\n  Input,\n  QueryList,\n  ElementRef,\n  ViewEncapsulation,\n  ContentChildren,\n  Output,\n  EventEmitter,\n  Optional,\n  AfterContentChecked,\n  AfterContentInit,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {RIGHT_ARROW, LEFT_ARROW, ENTER, Dir, LayoutDirection, coerceBooleanProperty} from '../core';\nimport {MdTabLabelWrapper} from './tab-label-wrapper';\nimport {MdInkBar} from './ink-bar';\nimport {Subscription} from 'rxjs/Subscription';\nimport {Observable} from 'rxjs/Observable';\nimport {applyCssTransform} from '../core/style/apply-transform';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/operator/auditTime';\nimport'rxjs/add/observable/of';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/startWith';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * \\@docs-private\n */\nexport class MdTabHeader implements AfterContentChecked, AfterContentInit, OnDestroy {\n   _labelWrappers: QueryList<MdTabLabelWrapper>;\n\n   _inkBar: MdInkBar;\n   _tabListContainer: ElementRef;\n   _tabList: ElementRef;\n/**\n * The tab index that is focused.\n */\nprivate _focusIndex: number = 0;\n/**\n * The distance in pixels that the tab labels should be translated to the left.\n */\nprivate _scrollDistance = 0;\n/**\n * Whether the header should scroll to the selected index after the view has been checked.\n */\nprivate _selectedIndexChanged = false;\n/**\n * Combines listeners that will re-align the ink bar whenever they're invoked.\n */\nprivate _realignInkBar: Subscription = null;\n/**\n * Whether the controls for pagination should be displayed\n */\n_showPaginationControls = false;\n/**\n * Whether the tab list can be scrolled more towards the end of the tab label list.\n */\n_disableScrollAfter = true;\n/**\n * Whether the tab list can be scrolled more towards the beginning of the tab label list.\n */\n_disableScrollBefore = true;\n/**\n * The number of tab labels that are displayed on the header. When this changes, the header\n * should re-evaluate the scroll position.\n */\nprivate _tabLabelCount: number;\n/**\n * Whether the scroll distance has changed and should be applied after the view is checked.\n */\nprivate _scrollDistanceChanged: boolean;\nprivate _selectedIndex: number = 0;\n/**\n * The index of the active tab.\n * @return {?}\n */\nget selectedIndex(): number { return this._selectedIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectedIndex(value: number) {\n    this._selectedIndexChanged = this._selectedIndex != value;\n\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n/**\n * Whether ripples for the tab-header labels should be disabled or not.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\nprivate _disableRipple: boolean = false;\n/**\n * Event emitted when the option is selected.\n */\nselectFocusedIndex = new EventEmitter();\n/**\n * Event emitted when a label is focused.\n */\nindexFocused = new EventEmitter();\n/**\n * @param {?} _elementRef\n * @param {?} _ngZone\n * @param {?} _dir\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _ngZone: NgZone,\nprivate _dir: Dir) { }\n/**\n * @return {?}\n */\nngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case ENTER:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        break;\n    }\n  }\n/**\n * Aligns the ink bar to the selected tab on load.\n * @return {?}\n */\nngAfterContentInit() {\n    this._realignInkBar = this._ngZone.runOutsideAngular(() => {\n      let /** @type {?} */ dirChange = this._dir ? this._dir.dirChange : Observable.of(null);\n      let /** @type {?} */ resize = typeof window !== 'undefined' ?\n          Observable.fromEvent(window, 'resize').auditTime(10) :\n          Observable.of(null);\n\n      return Observable.merge(dirChange, resize).startWith(null).subscribe(() => {\n        this._updatePagination();\n        this._alignInkBarToSelectedTab();\n      });\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._realignInkBar) {\n      this._realignInkBar.unsubscribe();\n      this._realignInkBar = null;\n    }\n  }\n/**\n * Callback for when the MutationObserver detects that the content has changed.\n * @return {?}\n */\n_onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n  }\n/**\n * Updating the view whether pagination should be enabled or not\n * @return {?}\n */\n_updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n/**\n * When the focus index is set, we must manually send focus to the correct label\n * @param {?} value\n * @return {?}\n */\nset focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n\n    this._setTabFocus(value);\n  }\n/**\n * Tracks which element has focus; used for keyboard navigation\n * @return {?}\n */\nget focusIndex(): number { return this._focusIndex; }\n/**\n * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n * providing a valid index and return true.\n * @param {?} index\n * @return {?}\n */\n_isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const /** @type {?} */ tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return tab && !tab.disabled;\n  }\n/**\n * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n * scrolling is enabled.\n * @param {?} tabIndex\n * @return {?}\n */\n_setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const /** @type {?} */ containerEl = this._tabListContainer.nativeElement;\n      const /** @type {?} */ dir = this._getLayoutDirection();\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n/**\n * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n * Valid offsets are 1 and -1.\n * @param {?} offset\n * @return {?}\n */\n_moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const /** @type {?} */ tabs: MdTabLabelWrapper[] = this._labelWrappers.toArray();\n      for (let /** @type {?} */ i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n/**\n * Increment the focus index by 1 until a valid tab is found.\n * @return {?}\n */\n_focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n/**\n * Decrement the focus index by 1 until a valid tab is found.\n * @return {?}\n */\n_focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n/**\n * The layout direction of the containing app.\n * @return {?}\n */\n_getLayoutDirection(): LayoutDirection {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * Performs the CSS transformation on the tab list that will cause the list to scroll.\n * @return {?}\n */\n_updateTabScrollPosition() {\n    let /** @type {?} */ translateX = this.scrollDistance + 'px';\n    if (this._getLayoutDirection() == 'ltr') {\n      translateX = '-' + translateX;\n    }\n\n    applyCssTransform(this._tabList.nativeElement, `translate3d(${translateX}, 0, 0)`);\n  }\n/**\n * Sets the distance in pixels that the tab header should be transformed in the X-axis.\n * @param {?} v\n * @return {?}\n */\nset scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n\n    this._checkScrollingControls();\n  }\n/**\n * @return {?}\n */\nget scrollDistance(): number { return this._scrollDistance;  }\n/**\n * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n * the end of the list, respectively). The distance to scroll is computed to be a third of the\n * length of the tab list view window.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @param {?} scrollDir\n * @return {?}\n */\n_scrollHeader(scrollDir: ScrollDirection) {\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n/**\n * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @param {?} labelIndex\n * @return {?}\n */\n_scrollToLabel(labelIndex: number) {\n    const /** @type {?} */ selectedLabel = this._labelWrappers\n        ? this._labelWrappers.toArray()[labelIndex]\n        :  null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let /** @type {?} */ labelBeforePos: number, /** @type {?} */ labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const /** @type {?} */ beforeVisiblePos = this.scrollDistance;\n    const /** @type {?} */ afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n/**\n * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n * tab list is wider than the size of the header container, then the pagination controls should\n * be shown.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_checkPaginationEnabled() {\n    this._showPaginationControls =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!this._showPaginationControls) {\n      this.scrollDistance = 0;\n    }\n  }\n/**\n * Evaluate whether the before and after controls should be enabled or disabled.\n * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n * before button. If the header is at the end of the list (scroll distance is equal to the\n * maximum distance we can scroll), then disable the after button.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n  }\n/**\n * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n * is equal to the difference in width between the tab list container and tab header container.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_getMaxScrollDistance(): number {\n    const /** @type {?} */ lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return lengthOfTabList - viewLength;\n  }\n/**\n * Tells the ink-bar to align itself to the current label wrapper\n * @return {?}\n */\nprivate _alignInkBarToSelectedTab(): void {\n    const /** @type {?} */ selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length\n        ? this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement\n        : null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-header, mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_labelWrappers': [{ type: ContentChildren, args: [MdTabLabelWrapper, ] },],\n'_inkBar': [{ type: ViewChild, args: [MdInkBar, ] },],\n'_tabListContainer': [{ type: ViewChild, args: ['tabListContainer', ] },],\n'_tabList': [{ type: ViewChild, args: ['tabList', ] },],\n'selectedIndex': [{ type: Input },],\n'disableRipple': [{ type: Input },],\n'selectFocusedIndex': [{ type: Output },],\n'indexFocused': [{ type: Output },],\n};\n}\n\nfunction MdTabHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabHeader.ctorParameters;\n/** @type {?} */\nMdTabHeader.propDecorators;\n/** @type {?} */\nMdTabHeader.prototype._labelWrappers;\n/** @type {?} */\nMdTabHeader.prototype._inkBar;\n/** @type {?} */\nMdTabHeader.prototype._tabListContainer;\n/** @type {?} */\nMdTabHeader.prototype._tabList;\n/**\n * The tab index that is focused.\n * @type {?}\n */\nMdTabHeader.prototype._focusIndex;\n/**\n * The distance in pixels that the tab labels should be translated to the left.\n * @type {?}\n */\nMdTabHeader.prototype._scrollDistance;\n/**\n * Whether the header should scroll to the selected index after the view has been checked.\n * @type {?}\n */\nMdTabHeader.prototype._selectedIndexChanged;\n/**\n * Combines listeners that will re-align the ink bar whenever they're invoked.\n * @type {?}\n */\nMdTabHeader.prototype._realignInkBar;\n/**\n * Whether the controls for pagination should be displayed\n * @type {?}\n */\nMdTabHeader.prototype._showPaginationControls;\n/**\n * Whether the tab list can be scrolled more towards the end of the tab label list.\n * @type {?}\n */\nMdTabHeader.prototype._disableScrollAfter;\n/**\n * Whether the tab list can be scrolled more towards the beginning of the tab label list.\n * @type {?}\n */\nMdTabHeader.prototype._disableScrollBefore;\n/**\n * The number of tab labels that are displayed on the header. When this changes, the header\n * should re-evaluate the scroll position.\n * @type {?}\n */\nMdTabHeader.prototype._tabLabelCount;\n/**\n * Whether the scroll distance has changed and should be applied after the view is checked.\n * @type {?}\n */\nMdTabHeader.prototype._scrollDistanceChanged;\n/** @type {?} */\nMdTabHeader.prototype._selectedIndex;\n/** @type {?} */\nMdTabHeader.prototype._disableRipple;\n/**\n * Event emitted when the option is selected.\n * @type {?}\n */\nMdTabHeader.prototype.selectFocusedIndex;\n/**\n * Event emitted when a label is focused.\n * @type {?}\n */\nMdTabHeader.prototype.indexFocused;\n/** @type {?} */\nMdTabHeader.prototype._elementRef;\n/** @type {?} */\nMdTabHeader.prototype._ngZone;\n/** @type {?} */\nMdTabHeader.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  ViewChild,\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnInit,\n  ElementRef,\n  Optional,\n  AfterViewChecked,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationEvent,\n} from '@angular/animations';\nimport {TemplatePortal, PortalHostDirective, Dir, LayoutDirection} from '../core';\nimport'rxjs/add/operator/map';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MdTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MdTabBodyOriginState = 'left' | 'right';\n/**\n * Wrapper for the contents of a tab.\n * \\@docs-private\n */\nexport class MdTabBody implements OnInit, AfterViewChecked {\n/**\n * The portal host inside of this container into which the tab body content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * Event emitted when the tab begins to animate towards the center as the active tab.\n */\nonCentering: EventEmitter<number> = new EventEmitter<number>();\n/**\n * Event emitted when the tab completes its animation towards the center.\n */\nonCentered: EventEmitter<void> = new EventEmitter<void>(true);\n/**\n * The tab body content to display.\n */\n_content: TemplatePortal;\n/**\n * The shifted index position of the tab body, where zero represents the active center tab.\n */\n_position: MdTabBodyPositionState;\n/**\n * @param {?} position\n * @return {?}\n */\nset position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n/**\n * The origin position from which this tab should appear when it is centered into view.\n */\n_origin: MdTabBodyOriginState;\n/**\n * The origin position from which this tab should appear when it is centered into view.\n * @param {?} origin\n * @return {?}\n */\nset origin(origin: number) {\n    if (origin == null) { return; }\n\n    const /** @type {?} */ dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n/**\n * @param {?} _dir\n * @param {?} _elementRef\n */\nconstructor(\nprivate _dir: Dir,\nprivate _elementRef: ElementRef) { }\n/**\n * After initialized, check if the content is centered and has an origin. If so, set the\n * special position states that transition the tab from the left or right before centering.\n * @return {?}\n */\nngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n/**\n * After the view has been set, check if the tab content is set to the center and attach the\n * content if it is not already attached.\n * @return {?}\n */\nngAfterViewChecked() {\n    if (this._isCenterPosition(this._position) && !this._portalHost.hasAttached()) {\n      this._portalHost.attach(this._content);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_onTranslateTabStarted(e: AnimationEvent) {\n    if (this._isCenterPosition(e.toState)) {\n      this.onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_onTranslateTabComplete(e: AnimationEvent) {\n    // If the end state is that the tab is not centered, then detach the content.\n    if (!this._isCenterPosition(e.toState) && !this._isCenterPosition(this._position)) {\n      this._portalHost.detach();\n    }\n\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this.onCentered.emit();\n    }\n  }\n/**\n * The text direction of the containing app.\n * @return {?}\n */\n_getLayoutDirection(): LayoutDirection {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * Whether the provided position state is considered center, regardless of origin.\n * @param {?} position\n * @return {?}\n */\nprivate _isCenterPosition(position: MdTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-body, mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    '[class.mat-tab-body]': 'true',\n  },\n  animations: [\n    trigger('translateTab', [\n      state('void', style({transform: 'translate3d(0, 0, 0)'})),\n      state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n      state('left-origin-center', style({transform: 'translate3d(0, 0, 0)'})),\n      state('right-origin-center', style({transform: 'translate3d(0, 0, 0)'})),\n      state('center', style({transform: 'translate3d(0, 0, 0)'})),\n      state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n      transition('* => left, * => right, left => center, right => center',\n          animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n      transition('void => left-origin-center', [\n        style({transform: 'translate3d(-100%, 0, 0)'}),\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n      ]),\n      transition('void => right-origin-center', [\n        style({transform: 'translate3d(100%, 0, 0)'}),\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n      ])\n    ])\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n'onCentering': [{ type: Output },],\n'onCentered': [{ type: Output },],\n'_content': [{ type: Input, args: ['content', ] },],\n'position': [{ type: Input, args: ['position', ] },],\n'origin': [{ type: Input, args: ['origin', ] },],\n};\n}\n\nfunction MdTabBody_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabBody.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabBody.ctorParameters;\n/** @type {?} */\nMdTabBody.propDecorators;\n/**\n * The portal host inside of this container into which the tab body content will be loaded.\n * @type {?}\n */\nMdTabBody.prototype._portalHost;\n/**\n * Event emitted when the tab begins to animate towards the center as the active tab.\n * @type {?}\n */\nMdTabBody.prototype.onCentering;\n/**\n * Event emitted when the tab completes its animation towards the center.\n * @type {?}\n */\nMdTabBody.prototype.onCentered;\n/**\n * The tab body content to display.\n * @type {?}\n */\nMdTabBody.prototype._content;\n/**\n * The shifted index position of the tab body, where zero represents the active center tab.\n * @type {?}\n */\nMdTabBody.prototype._position;\n/**\n * The origin position from which this tab should appear when it is centered into view.\n * @type {?}\n */\nMdTabBody.prototype._origin;\n/** @type {?} */\nMdTabBody.prototype._dir;\n/** @type {?} */\nMdTabBody.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  Input,\n  ViewChild,\n  ElementRef,\n  ViewEncapsulation,\n  Directive,\n  NgZone,\n  Inject,\n  Optional,\n  OnDestroy,\n  AfterContentInit,\n} from '@angular/core';\nimport {MdInkBar} from '../ink-bar';\nimport {MdRipple} from '../../core/ripple/index';\nimport {ViewportRuler} from '../../core/overlay/position/viewport-ruler';\nimport {MD_RIPPLE_GLOBAL_OPTIONS, RippleGlobalOptions, Dir, Platform} from '../../core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport'rxjs/add/operator/auditTime';\nimport'rxjs/add/observable/of';\nimport'rxjs/add/observable/merge';\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\nexport class MdTabNavBar implements AfterContentInit, OnDestroy {\n/**\n * Combines listeners that will re-align the ink bar whenever they're invoked.\n */\nprivate _realignInkBar: Subscription = null;\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n   _inkBar: MdInkBar;\n/**\n * @param {?} _dir\n * @param {?} _ngZone\n */\nconstructor(\nprivate _dir: Dir,\nprivate _ngZone: NgZone) { }\n/**\n * Notifies the component that the active link has been changed.\n * @param {?} element\n * @return {?}\n */\nupdateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._realignInkBar = this._ngZone.runOutsideAngular(() => {\n      let /** @type {?} */ dirChange = this._dir ? this._dir.dirChange : Observable.of(null);\n      let /** @type {?} */ resize = typeof window !== 'undefined' ?\n          Observable.fromEvent(window, 'resize').auditTime(10) :\n          Observable.of(null);\n\n      return Observable.merge(dirChange, resize).subscribe(() => this._alignInkBar());\n    });\n  }\n/**\n * Checks if the active link has been changed and, if so, will update the ink bar.\n * @return {?}\n */\nngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._realignInkBar) {\n      this._realignInkBar.unsubscribe();\n      this._realignInkBar = null;\n    }\n  }\n/**\n * Aligns the ink bar to the active link.\n * @return {?}\n */\nprivate _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-tab-nav-bar], [mat-tab-nav-bar]',\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_inkBar': [{ type: ViewChild, args: [MdInkBar, ] },],\n};\n}\n\nfunction MdTabNavBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabNavBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabNavBar.ctorParameters;\n/** @type {?} */\nMdTabNavBar.propDecorators;\n/**\n * Combines listeners that will re-align the ink bar whenever they're invoked.\n * @type {?}\n */\nMdTabNavBar.prototype._realignInkBar;\n/** @type {?} */\nMdTabNavBar.prototype._activeLinkChanged;\n/** @type {?} */\nMdTabNavBar.prototype._activeLinkElement;\n/** @type {?} */\nMdTabNavBar.prototype._inkBar;\n/** @type {?} */\nMdTabNavBar.prototype._dir;\n/** @type {?} */\nMdTabNavBar.prototype._ngZone;\n}\n\n/**\n * Link inside of a `md-tab-nav-bar`.\n */\nexport class MdTabLink {\nprivate _isActive: boolean = false;\n/**\n * Whether the link is active.\n * @return {?}\n */\nget active(): boolean { return this._isActive; }\n/**\n * @param {?} value\n * @return {?}\n */\nset active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._mdTabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n/**\n * @param {?} _mdTabNavBar\n * @param {?} _elementRef\n */\nconstructor(private _mdTabNavBar: MdTabNavBar,\nprivate _elementRef: ElementRef) {}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-link], [mat-tab-link]',\n  host: {'class': 'mat-tab-link'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdTabNavBar, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'active': [{ type: Input },],\n};\n}\n\nfunction MdTabLink_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLink.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLink.ctorParameters;\n/** @type {?} */\nMdTabLink.propDecorators;\n/** @type {?} */\nMdTabLink.prototype._isActive;\n/** @type {?} */\nMdTabLink.prototype._mdTabNavBar;\n/** @type {?} */\nMdTabLink.prototype._elementRef;\n}\n\n/**\n * Simple directive that extends the ripple and matches the selector of the MdTabLink. This\n * adds the ripple behavior to nav bar labels.\n */\nexport class MdTabLinkRipple extends MdRipple {\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} platform\n * @param {?} globalOptions\n */\nconstructor(\n      elementRef: ElementRef,\n      ngZone: NgZone,\n      ruler: ViewportRuler,\n      platform: Platform,\n        globalOptions: RippleGlobalOptions) {\n    super(elementRef, ngZone, ruler, platform, globalOptions);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-link], [mat-tab-link]',\n  host: {'class': 'mat-tab-link'},\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\n}\n\nfunction MdTabLinkRipple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLinkRipple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLinkRipple.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Directive, Renderer2, ElementRef, NgZone} from '@angular/core';\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * \\@docs-private\n */\nexport class MdInkBar {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _ngZone\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _ngZone: NgZone) {}\n/**\n * Calculates the styles from the provided element in order to align the ink-bar to that element.\n * Shows the ink bar if previously set as hidden.\n * @param {?} element\n * @return {?}\n */\nalignToElement(element: HTMLElement) {\n    this.show();\n\n    this._ngZone.runOutsideAngular(() => {\n      requestAnimationFrame(() => {\n        this._renderer.setStyle(this._elementRef.nativeElement, 'left',\n            this._getLeftPosition(element));\n        this._renderer.setStyle(this._elementRef.nativeElement, 'width',\n            this._getElementWidth(element));\n      });\n    });\n  }\n/**\n * Shows the ink bar.\n * @return {?}\n */\nshow(): void {\n    this._renderer.setStyle(this._elementRef.nativeElement, 'visibility', 'visible');\n  }\n/**\n * Hides the ink bar.\n * @return {?}\n */\nhide(): void {\n    this._renderer.setStyle(this._elementRef.nativeElement, 'visibility', 'hidden');\n  }\n/**\n * Generates the pixel distance from the left based on the provided element in string format.\n * @param {?} element\n * @return {?}\n */\nprivate _getLeftPosition(element: HTMLElement): string {\n    return element ? element.offsetLeft + 'px' : '0';\n  }\n/**\n * Generates the pixel width from the provided element in string format.\n * @param {?} element\n * @return {?}\n */\nprivate _getElementWidth(element: HTMLElement): string {\n    return element ? element.offsetWidth + 'px' : '0';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-ink-bar, mat-ink-bar',\n  host: {\n    '[class.mat-ink-bar]': 'true',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: NgZone, },\n];\n}\n\nfunction MdInkBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInkBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInkBar.ctorParameters;\n/** @type {?} */\nMdInkBar.prototype._renderer;\n/** @type {?} */\nMdInkBar.prototype._elementRef;\n/** @type {?} */\nMdInkBar.prototype._ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Directive, ElementRef, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\n/**\n * Used in the `md-tab-group` view to display tab labels.\n * \\@docs-private\n */\nexport class MdTabLabelWrapper {\n/**\n * @param {?} elementRef\n */\nconstructor(public elementRef: ElementRef) {}\n/**\n * Whether the tab label is disabled.\n */\nprivate _disabled: boolean = false;\n/**\n * Whether the element is disabled.\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Sets focus on the wrapper element\n * @return {?}\n */\nfocus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n/**\n * @return {?}\n */\ngetOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n/**\n * @return {?}\n */\ngetOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-label-wrapper], [mat-tab-label-wrapper]',\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdTabLabelWrapper_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLabelWrapper.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLabelWrapper.ctorParameters;\n/** @type {?} */\nMdTabLabelWrapper.propDecorators;\n/**\n * Whether the tab label is disabled.\n * @type {?}\n */\nMdTabLabelWrapper.prototype._disabled;\n/** @type {?} */\nMdTabLabelWrapper.prototype.elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  ViewChild,\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  QueryList,\n  ContentChildren,\n  ElementRef,\n  Renderer2,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {MdTab} from './tab';\nimport'rxjs/add/operator/map';\n/**\n * Used to generate unique ID's for each tab component\n */\nlet nextId = 0;\n/**\n * A simple change event emitted on focus or selection changes.\n */\nexport class MdTabChangeEvent {\n  index: number;\n  tab: MdTab;\n}\n\nfunction MdTabChangeEvent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabChangeEvent.prototype.index;\n/** @type {?} */\nMdTabChangeEvent.prototype.tab;\n}\n\n\n/** Possible positions for the tab header. */\nexport type MdTabHeaderPosition = 'above' | 'below';\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\nexport class MdTabGroup {\n   _tabs: QueryList<MdTab>;\n\n   _tabBodyWrapper: ElementRef;\n/**\n * Whether this component has been initialized.\n */\nprivate _isInitialized: boolean = false;\n/**\n * The tab index that should be selected after the content has been checked.\n */\nprivate _indexToSelect = 0;\n/**\n * Snapshot of the height of the tab body wrapper before another tab is activated.\n */\nprivate _tabBodyWrapperHeight: number = null;\n/**\n * Whether the tab group should grow to the size of the active tab\n */\nprivate _dynamicHeight: boolean = false;\n/**\n * @return {?}\n */\nget dynamicHeight(): boolean { return this._dynamicHeight; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n/**\n * @deprecated\n * @return {?}\n */\nget _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n/**\n * Whether ripples for the tab-group should be disabled or not.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\nprivate _disableRipple: boolean = false;\nprivate _selectedIndex: number = null;\n/**\n * The index of the active tab.\n * @param {?} value\n * @return {?}\n */\nset selectedIndex(value: number) { this._indexToSelect = value; }\n/**\n * @return {?}\n */\nget selectedIndex(): number { return this._selectedIndex; }\n/**\n * Position of the tab header.\n */\nheaderPosition: MdTabHeaderPosition = 'above';\n/**\n * Output to enable support for two-way binding on `[(selectedIndex)]`\n * @return {?}\n */\nget selectedIndexChange(): Observable<number> {\n    return this.selectChange.map(event => event.index);\n  }\n/**\n * Event emitted when focus has changed within a tab group.\n */\nfocusChange: EventEmitter<MdTabChangeEvent> = new EventEmitter<MdTabChangeEvent>();\n/**\n * Event emitted when the tab selection has changed.\n */\nselectChange: EventEmitter<MdTabChangeEvent> = new EventEmitter<MdTabChangeEvent>(true);\nprivate _groupId: number;\n/**\n * @param {?} _renderer\n */\nconstructor(private _renderer: Renderer2) {\n    this._groupId = nextId++;\n  }\n/**\n * After the content is checked, this component knows what tabs have been defined\n * and what the selected index should be. This is where we can know exactly what position\n * each tab should be in according to the new selected index, and additionally we know how\n * a new selected tab should transition in (from the left or right).\n * @return {?}\n */\nngAfterContentChecked(): void {\n    // Clamp the next selected index to the bounds of 0 and the tabs length. Note the `|| 0`, which\n    // ensures that values like NaN can't get through and which would otherwise throw the\n    // component into an infinite loop (since Math.max(NaN, 0) === NaN).\n    this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != this._indexToSelect && this._selectedIndex != null) {\n      this.selectChange.emit(this._createChangeEvent(this._indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MdTab, index: number) => {\n      tab.position = index - this._indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = this._indexToSelect - this._selectedIndex;\n      }\n    });\n\n    this._selectedIndex = this._indexToSelect;\n  }\n/**\n * Waits one frame for the view to update, then updates the ink bar\n * Note: This must be run outside of the zone or it will create an infinite change detection loop.\n * @return {?}\n */\nngAfterViewChecked(): void {\n    this._isInitialized = true;\n  }\n/**\n * @param {?} index\n * @return {?}\n */\n_focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n/**\n * @param {?} index\n * @return {?}\n */\nprivate _createChangeEvent(index: number): MdTabChangeEvent {\n    const /** @type {?} */ event = new MdTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n/**\n * Returns a unique id for each tab label element\n * @param {?} i\n * @return {?}\n */\n_getTabLabelId(i: number): string {\n    return `md-tab-label-${this._groupId}-${i}`;\n  }\n/**\n * Returns a unique id for each tab content element\n * @param {?} i\n * @return {?}\n */\n_getTabContentId(i: number): string {\n    return `md-tab-content-${this._groupId}-${i}`;\n  }\n/**\n * Sets the height of the body wrapper to the height of the activating tab if dynamic\n * height property is true.\n * @param {?} tabHeight\n * @return {?}\n */\n_setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height',\n        this._tabBodyWrapperHeight + 'px');\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height',\n          tabHeight + 'px');\n    }\n  }\n/**\n * Removes the height of the tab body wrapper.\n * @return {?}\n */\n_removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height', '');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-group, mat-tab-group',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  host: {\n    '[class.mat-tab-group]': 'true',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_tabs': [{ type: ContentChildren, args: [MdTab, ] },],\n'_tabBodyWrapper': [{ type: ViewChild, args: ['tabBodyWrapper', ] },],\n'dynamicHeight': [{ type: Input },],\n'_dynamicHeightDeprecated': [{ type: Input, args: ['md-dynamic-height', ] },],\n'disableRipple': [{ type: Input },],\n'selectedIndex': [{ type: Input },],\n'headerPosition': [{ type: Input },],\n'selectedIndexChange': [{ type: Output },],\n'focusChange': [{ type: Output },],\n'selectChange': [{ type: Output },],\n};\n}\n\nfunction MdTabGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabGroup.ctorParameters;\n/** @type {?} */\nMdTabGroup.propDecorators;\n/** @type {?} */\nMdTabGroup.prototype._tabs;\n/** @type {?} */\nMdTabGroup.prototype._tabBodyWrapper;\n/**\n * Whether this component has been initialized.\n * @type {?}\n */\nMdTabGroup.prototype._isInitialized;\n/**\n * The tab index that should be selected after the content has been checked.\n * @type {?}\n */\nMdTabGroup.prototype._indexToSelect;\n/**\n * Snapshot of the height of the tab body wrapper before another tab is activated.\n * @type {?}\n */\nMdTabGroup.prototype._tabBodyWrapperHeight;\n/**\n * Whether the tab group should grow to the size of the active tab\n * @type {?}\n */\nMdTabGroup.prototype._dynamicHeight;\n/** @type {?} */\nMdTabGroup.prototype._disableRipple;\n/** @type {?} */\nMdTabGroup.prototype._selectedIndex;\n/**\n * Position of the tab header.\n * @type {?}\n */\nMdTabGroup.prototype.headerPosition;\n/**\n * Event emitted when focus has changed within a tab group.\n * @type {?}\n */\nMdTabGroup.prototype.focusChange;\n/**\n * Event emitted when the tab selection has changed.\n * @type {?}\n */\nMdTabGroup.prototype.selectChange;\n/** @type {?} */\nMdTabGroup.prototype._groupId;\n/** @type {?} */\nMdTabGroup.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {TemplatePortal} from '../core/portal/portal';\nimport {\n  ViewContainerRef, Input, TemplateRef, ViewChild, OnInit, ContentChild,\n  Component\n} from '@angular/core';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\n\nimport {MdTabLabel} from './tab-label';\nexport class MdTab implements OnInit {\n/**\n * Content for the tab label given by <ng-template md-tab-label>.\n */\ntemplateLabel: MdTabLabel;\n/**\n * Template inside the MdTab view that contains an <ng-content>.\n */\n_content: TemplateRef<any>;\n/**\n * The plain text label for the tab, used when there is no template label.\n */\ntextLabel: string = '';\n/**\n * The portal that will be the hosted content of the tab\n */\nprivate _contentPortal: TemplatePortal = null;\n/**\n * @return {?}\n */\nget content(): TemplatePortal { return this._contentPortal; }\n/**\n * The relatively indexed position where 0 represents the center, negative is left, and positive\n * represents the right.\n */\nposition: number = null;\n/**\n * The initial relatively index origin of the tab if it was created and selected after there\n * was already a selected tab. Provides context of what position the tab should originate from.\n */\norigin: number = null;\nprivate _disabled = false;\n/**\n * Whether the tab is disabled\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n/**\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} _viewContainerRef\n */\nconstructor(private _viewContainerRef: ViewContainerRef) { }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab, mat-tab',\n  templateUrl: 'tab.html',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'templateLabel': [{ type: ContentChild, args: [MdTabLabel, ] },],\n'_content': [{ type: ViewChild, args: [TemplateRef, ] },],\n'textLabel': [{ type: Input, args: ['label', ] },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdTab_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTab.ctorParameters;\n/** @type {?} */\nMdTab.propDecorators;\n/**\n * Content for the tab label given by <ng-template md-tab-label>.\n * @type {?}\n */\nMdTab.prototype.templateLabel;\n/**\n * Template inside the MdTab view that contains an <ng-content>.\n * @type {?}\n */\nMdTab.prototype._content;\n/**\n * The plain text label for the tab, used when there is no template label.\n * @type {?}\n */\nMdTab.prototype.textLabel;\n/**\n * The portal that will be the hosted content of the tab\n * @type {?}\n */\nMdTab.prototype._contentPortal;\n/**\n * The relatively indexed position where 0 represents the center, negative is left, and positive\n * represents the right.\n * @type {?}\n */\nMdTab.prototype.position;\n/**\n * The initial relatively index origin of the tab if it was created and selected after there\n * was already a selected tab. Provides context of what position the tab should originate from.\n * @type {?}\n */\nMdTab.prototype.origin;\n/** @type {?} */\nMdTab.prototype._disabled;\n/** @type {?} */\nMdTab.prototype._viewContainerRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {TemplatePortalDirective} from '../core';\n/**\n * Used to flag tab labels for use with the portal directive\n */\nexport class MdTabLabel extends TemplatePortalDirective {\n/**\n * @param {?} templateRef\n * @param {?} viewContainerRef\n */\nconstructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-label], [mat-tab-label]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n];\n}\n\nfunction MdTabLabel_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLabel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLabel.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {OverlayModule, PortalModule, MdCommonModule, LIVE_ANNOUNCER_PROVIDER} from '../core';\nimport {CommonModule} from '@angular/common';\nimport {MdSnackBar} from './snack-bar';\nimport {MdSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\nexport class MdSnackBarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MdCommonModule,\n  ],\n  exports: [MdSnackBarContainer, MdCommonModule],\n  declarations: [MdSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MdSnackBarContainer, SimpleSnackBar],\n  providers: [MdSnackBar, LIVE_ANNOUNCER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSnackBarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBarModule.ctorParameters;\n}\n\n\n\nexport {MdSnackBar} from './snack-bar';\nexport {SnackBarState,SHOW_ANIMATION,HIDE_ANIMATION,MdSnackBarContainer} from './snack-bar-container';\nexport {MdSnackBarConfig} from './snack-bar-config';\nexport {MdSnackBarRef} from './snack-bar-ref';\nexport {SimpleSnackBar} from './simple-snack-bar';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable, ComponentRef, Optional, SkipSelf} from '@angular/core';\nimport {\n  ComponentType,\n  ComponentPortal,\n  Overlay,\n  OverlayRef,\n  OverlayState,\n  LiveAnnouncer,\n} from '../core';\nimport {MdSnackBarConfig} from './snack-bar-config';\nimport {MdSnackBarRef} from './snack-bar-ref';\nimport {MdSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {extendObject} from '../core/util/object-extend';\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nexport class MdSnackBar {\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n * If there is a parent snack-bar service, all operations should delegate to that parent\n * via `_openedSnackBarRef`.\n */\nprivate _snackBarRefAtThisLevel: MdSnackBarRef<any>;\n/**\n * Reference to the currently opened snackbar at *any* level.\n * @return {?}\n */\nget _openedSnackBarRef(): MdSnackBarRef<any> {\n    return this._parentSnackBar ?\n        this._parentSnackBar._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset _openedSnackBarRef(value: MdSnackBarRef<any>) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n/**\n * @param {?} _overlay\n * @param {?} _live\n * @param {?} _parentSnackBar\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _live: LiveAnnouncer,\nprivate _parentSnackBar: MdSnackBar) {}\n/**\n * Creates and dispatches a snack bar with a custom component for the content, removing any\n * currently opened snack bars.\n * \n * @template T\n * @param {?} component Component to be instantiated.\n * @param {?=} config Extra configuration for the snack bar.\n * @return {?}\n */\nopenFromComponent<T>(component: ComponentType<T>, config?: MdSnackBarConfig): MdSnackBarRef<T> {\n    config = _applyConfigDefaults(config);\n    let /** @type {?} */ overlayRef = this._createOverlay(config);\n    let /** @type {?} */ snackBarContainer = this._attachSnackBarContainer(overlayRef, config);\n    let /** @type {?} */ snackBarRef = this._attachSnackbarContent(component, snackBarContainer, overlayRef);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    // If a snack bar is already in view, dismiss it and enter the new snack bar after exit\n    // animation is complete.\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    // If no snack bar is in view, enter the new snack bar.\n    } else {\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => {\n        setTimeout(() => snackBarRef.dismiss(), config.duration);\n      });\n    }\n\n    this._live.announce(config.announcementMessage, config.politeness);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n/**\n * Opens a snackbar with a message and an optional action.\n * @param {?} message The message to show in the snackbar.\n * @param {?=} action The label for the snackbar action.\n * @param {?=} config Additional configuration options for the snackbar.\n * @return {?}\n */\nopen(message: string, action = '', config: MdSnackBarConfig = {}): MdSnackBarRef<SimpleSnackBar> {\n    config.announcementMessage = message;\n    let /** @type {?} */ simpleSnackBarRef = this.openFromComponent(SimpleSnackBar, config);\n    simpleSnackBarRef.instance.snackBarRef = simpleSnackBarRef;\n    simpleSnackBarRef.instance.message = message;\n    simpleSnackBarRef.instance.action = action;\n    return simpleSnackBarRef;\n  }\n/**\n * Dismisses the currently-visible snack bar.\n * @return {?}\n */\ndismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n/**\n * Attaches the snack bar container component to the overlay.\n * @param {?} overlayRef\n * @param {?} config\n * @return {?}\n */\nprivate _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MdSnackBarConfig): MdSnackBarContainer {\n    let /** @type {?} */ containerPortal = new ComponentPortal(MdSnackBarContainer, config.viewContainerRef);\n    let /** @type {?} */ containerRef: ComponentRef<MdSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n\n    return containerRef.instance;\n  }\n/**\n * Places a new component as the content of the snack bar container.\n * @template T\n * @param {?} component\n * @param {?} container\n * @param {?} overlayRef\n * @return {?}\n */\nprivate _attachSnackbarContent<T>(component: ComponentType<T>,\n                                    container: MdSnackBarContainer,\n                                    overlayRef: OverlayRef): MdSnackBarRef<T> {\n    let /** @type {?} */ portal = new ComponentPortal(component);\n    let /** @type {?} */ contentRef = container.attachComponentPortal(portal);\n    return new MdSnackBarRef(contentRef.instance, container, overlayRef);\n  }\n/**\n * Creates a new overlay and places it in the correct location.\n * @param {?} config The user-specified snack bar config.\n * @return {?}\n */\nprivate _createOverlay(config: MdSnackBarConfig): OverlayRef {\n    let /** @type {?} */ state = new OverlayState();\n    state.direction = config.direction;\n    state.positionStrategy = this._overlay.position().global().centerHorizontally().bottom('0');\n    return this._overlay.create(state);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: LiveAnnouncer, },\n{type: MdSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBar.ctorParameters;\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n * If there is a parent snack-bar service, all operations should delegate to that parent\n * via `_openedSnackBarRef`.\n * @type {?}\n */\nMdSnackBar.prototype._snackBarRefAtThisLevel;\n/** @type {?} */\nMdSnackBar.prototype._overlay;\n/** @type {?} */\nMdSnackBar.prototype._live;\n/** @type {?} */\nMdSnackBar.prototype._parentSnackBar;\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param {?} config The configuration to which the defaults will be applied.\n * @return {?} The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config: MdSnackBarConfig): MdSnackBarConfig {\n  return extendObject(new MdSnackBarConfig(), config);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n * \n * @param {?} dest The object which will have properties copied to it.\n * @param {...?} sources The source objects from which properties will be copied.\n * @return {?}\n */\nexport function extendObject(dest: any, ...sources: any[]): any {\n  if (dest == null) {\n    throw TypeError('Cannot convert undefined or null to object');\n  }\n\n  for (let /** @type {?} */ source of sources) {\n    if (source != null) {\n      for (let /** @type {?} */ key in source) {\n        if (source.hasOwnProperty(key)) {\n          dest[key] = source[key];\n        }\n      }\n    }\n  }\n\n  return dest;\n}\n","import {Component, ViewEncapsulation} from '@angular/core';\nimport {MdSnackBarRef} from './snack-bar-ref';\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nexport class SimpleSnackBar {\n/**\n * The message to be shown in the snack bar.\n */\nmessage: string;\n/**\n * The label for the button in the snack bar.\n */\naction: string;\n/**\n * The instance of the component making up the content of the snack bar.\n */\nsnackBarRef: MdSnackBarRef<SimpleSnackBar>;\n/**\n * Dismisses the snack bar.\n * @return {?}\n */\ndismiss(): void {\n    this.snackBarRef._action();\n  }\n/**\n * If the action button should be shown.\n * @return {?}\n */\nget hasAction(): boolean {\n    return !!this.action;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    '[class.mat-simple-snackbar]': 'true',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SimpleSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nSimpleSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSimpleSnackBar.ctorParameters;\n/**\n * The message to be shown in the snack bar.\n * @type {?}\n */\nSimpleSnackBar.prototype.message;\n/**\n * The label for the button in the snack bar.\n * @type {?}\n */\nSimpleSnackBar.prototype.action;\n/**\n * The instance of the component making up the content of the snack bar.\n * @type {?}\n */\nSimpleSnackBar.prototype.snackBarRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ComponentRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  Renderer2,\n  ElementRef,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n  AnimationEvent,\n} from '@angular/animations';\nimport {\n  BasePortalHost,\n  ComponentPortal,\n  TemplatePortal,\n  PortalHostDirective,\n} from '../core';\nimport {MdSnackBarConfig} from './snack-bar-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n\nexport type SnackBarState = 'initial' | 'visible' | 'complete' | 'void';\n\n// TODO(jelbourn): we can't use constants from animation.ts here because you can't use\n// a text interpolation in anything that is analyzed statically with ngc (for AoT compile).\nexport const /** @type {?} */ SHOW_ANIMATION = '225ms cubic-bezier(0.4,0.0,1,1)';\nexport const /** @type {?} */ HIDE_ANIMATION = '195ms cubic-bezier(0.0,0.0,0.2,1)';\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nexport class MdSnackBarContainer extends BasePortalHost implements OnDestroy {\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * Subject for notifying that the snack bar has exited from view.\n */\nprivate onExit: Subject<any> = new Subject();\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n */\nprivate onEnter: Subject<any> = new Subject();\n/**\n * The state of the snack bar animations.\n */\nanimationState: SnackBarState = 'initial';\n/**\n * The snack bar configuration.\n */\nsnackBarConfig: MdSnackBarConfig;\n/**\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef) {\n    super();\n  }\n/**\n * Attach a component portal as content to this snack bar container.\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throw new Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    if (this.snackBarConfig.extraClasses) {\n      // Not the most efficient way of adding classes, but the renderer doesn't allow us\n      // to pass in an array or a space-separated list.\n      for (let /** @type {?} */ cssClass of this.snackBarConfig.extraClasses) {\n        this._renderer.addClass(this._elementRef.nativeElement, cssClass);\n      }\n    }\n\n    return this._portalHost.attachComponentPortal(portal);\n  }\n/**\n * Attach a template portal as content to this snack bar container.\n * @param {?} portal\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    throw new Error('Not yet implemented');\n  }\n/**\n * Handle end of animations, updating the state of the snackbar.\n * @param {?} event\n * @return {?}\n */\nonAnimationEnd(event: AnimationEvent) {\n    if (event.toState === 'void' || event.toState === 'complete') {\n      this._completeExit();\n    }\n\n    if (event.toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const /** @type {?} */ onEnter = this.onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n/**\n * Begin animation of snack bar entrance into view.\n * @return {?}\n */\nenter(): void {\n    this.animationState = 'visible';\n  }\n/**\n * Returns an observable resolving when the enter animation completes.\n * @return {?}\n */\n_onEnter(): Observable<void> {\n    this.animationState = 'visible';\n    return this.onEnter.asObservable();\n  }\n/**\n * Begin animation of the snack bar exiting from view.\n * @return {?}\n */\nexit(): Observable<void> {\n    this.animationState = 'complete';\n    return this._onExit();\n  }\n/**\n * Returns an observable that completes after the closing animation is done.\n * @return {?}\n */\n_onExit(): Observable<void> {\n    return this.onExit.asObservable();\n  }\n/**\n * Makes sure the exit callbacks have been invoked when the element is destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    this._completeExit();\n  }\n/**\n * Waits for the zone to settle before removing the element. Helps prevent\n * errors where we end up removing an element which is in the middle of an animation.\n * @return {?}\n */\nprivate _completeExit() {\n    // Note: we shouldn't use `this` inside the zone callback,\n    // because it can cause a memory leak.\n    const /** @type {?} */ onExit = this.onExit;\n\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => {\n      onExit.next();\n      onExit.complete();\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  host: {\n    'role': 'alert',\n    '[@state]': 'animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n  animations: [\n    trigger('state', [\n      state('initial', style({transform: 'translateY(100%)'})),\n      state('visible', style({transform: 'translateY(0%)'})),\n      state('complete', style({transform: 'translateY(100%)'})),\n      transition('visible => complete', animate(HIDE_ANIMATION)),\n      transition('initial => visible, void => visible', animate(SHOW_ANIMATION)),\n    ])\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdSnackBarContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBarContainer.ctorParameters;\n/** @type {?} */\nMdSnackBarContainer.propDecorators;\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n * @type {?}\n */\nMdSnackBarContainer.prototype._portalHost;\n/**\n * Subject for notifying that the snack bar has exited from view.\n * @type {?}\n */\nMdSnackBarContainer.prototype.onExit;\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n * @type {?}\n */\nMdSnackBarContainer.prototype.onEnter;\n/**\n * The state of the snack bar animations.\n * @type {?}\n */\nMdSnackBarContainer.prototype.animationState;\n/**\n * The snack bar configuration.\n * @type {?}\n */\nMdSnackBarContainer.prototype.snackBarConfig;\n/** @type {?} */\nMdSnackBarContainer.prototype._ngZone;\n/** @type {?} */\nMdSnackBarContainer.prototype._renderer;\n/** @type {?} */\nMdSnackBarContainer.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {OverlayRef} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdSnackBarContainer} from './snack-bar-container';\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MdSnackBarRef<T> {\nprivate _instance: T;\n/**\n * The instance of the component making up the content of the snack bar.\n * @return {?}\n */\nget instance(): T {\n    return this._instance;\n  }\n/**\n * The instance of the component making up the content of the snack bar.\n * \\@docs-private\n */\ncontainerInstance: MdSnackBarContainer;\n/**\n * Subject for notifying the user that the snack bar has closed.\n */\nprivate _afterClosed: Subject<any> = new Subject();\n/**\n * Subject for notifying the user that the snack bar has opened and appeared.\n */\nprivate _afterOpened: Subject<any>;\n/**\n * Subject for notifying the user that the snack bar action was called.\n */\nprivate _onAction: Subject<any> = new Subject();\n/**\n * @param {?} instance\n * @param {?} containerInstance\n * @param {?} _overlayRef\n */\nconstructor(instance: T,\n              containerInstance: MdSnackBarContainer,\nprivate _overlayRef: OverlayRef) {\n    // Sets the readonly instance of the snack bar content component.\n    this._instance = instance;\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit().subscribe(() => this._finishDismiss());\n  }\n/**\n * Dismisses the snack bar.\n * @return {?}\n */\ndismiss(): void {\n    if (!this._afterClosed.closed) {\n      this.containerInstance.exit();\n    }\n  }\n/**\n * Marks the snackbar action clicked.\n * @return {?}\n */\n_action(): void {\n    if (!this._onAction.closed) {\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n/**\n * Marks the snackbar as opened\n * @return {?}\n */\n_open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n/**\n * Cleans up the DOM after closing.\n * @return {?}\n */\nprivate _finishDismiss(): void {\n    this._overlayRef.dispose();\n    this._afterClosed.next();\n    this._afterClosed.complete();\n  }\n/**\n * Gets an observable that is notified when the snack bar is finished closing.\n * @return {?}\n */\nafterDismissed(): Observable<void> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * Gets an observable that is notified when the snack bar has opened and appeared.\n * @return {?}\n */\nafterOpened(): Observable<void> {\n    return this.containerInstance._onEnter();\n  }\n/**\n * Gets an observable that is notified when the snack bar action is called.\n * @return {?}\n */\nonAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n\nfunction MdSnackBarRef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarRef.prototype._instance;\n/**\n * The instance of the component making up the content of the snack bar.\n * \\@docs-private\n * @type {?}\n */\nMdSnackBarRef.prototype.containerInstance;\n/**\n * Subject for notifying the user that the snack bar has closed.\n * @type {?}\n */\nMdSnackBarRef.prototype._afterClosed;\n/**\n * Subject for notifying the user that the snack bar has opened and appeared.\n * @type {?}\n */\nMdSnackBarRef.prototype._afterOpened;\n/**\n * Subject for notifying the user that the snack bar action was called.\n * @type {?}\n */\nMdSnackBarRef.prototype._onAction;\n/** @type {?} */\nMdSnackBarRef.prototype._overlayRef;\n}\n\n","import {ViewContainerRef} from '@angular/core';\nimport {AriaLivePoliteness, LayoutDirection} from '../core';\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MdSnackBarConfig {\n/**\n * The politeness level for the MdAriaLiveAnnouncer announcement.\n */\npoliteness?: AriaLivePoliteness = 'assertive';\n/**\n * Message to be announced by the MdAriaLiveAnnouncer\n */\nannouncementMessage?: string = '';\n/**\n * The view container to place the overlay for the snack bar into.\n */\nviewContainerRef?: ViewContainerRef = null;\n/**\n * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n */\nduration?: number = 0;\n/**\n * Extra CSS classes to be added to the snack bar container.\n */\nextraClasses?: string[];\n/**\n * Text layout direction for the snack bar.\n */\ndirection?: LayoutDirection = 'ltr';\n}\n\nfunction MdSnackBarConfig_tsickle_Closure_declarations() {\n/**\n * The politeness level for the MdAriaLiveAnnouncer announcement.\n * @type {?}\n */\nMdSnackBarConfig.prototype.politeness;\n/**\n * Message to be announced by the MdAriaLiveAnnouncer\n * @type {?}\n */\nMdSnackBarConfig.prototype.announcementMessage;\n/**\n * The view container to place the overlay for the snack bar into.\n * @type {?}\n */\nMdSnackBarConfig.prototype.viewContainerRef;\n/**\n * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.duration;\n/**\n * Extra CSS classes to be added to the snack bar container.\n * @type {?}\n */\nMdSnackBarConfig.prototype.extraClasses;\n/**\n * Text layout direction for the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.direction;\n}\n\n","import {NgModule} from '@angular/core';\nimport {\n  MdErrorDirective,\n  MdHint,\n  MdInputContainer,\n  MdInputDirective,\n  MdPlaceholder,\n  MdPrefix,\n  MdSuffix\n} from './input-container';\nimport {MdTextareaAutosize} from './autosize';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {PlatformModule} from '../core/platform/index';\nexport class MdInputModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    MdErrorDirective,\n    MdHint,\n    MdInputContainer,\n    MdInputDirective,\n    MdPlaceholder,\n    MdPrefix,\n    MdSuffix,\n    MdTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    PlatformModule,\n  ],\n  exports: [\n    MdErrorDirective,\n    MdHint,\n    MdInputContainer,\n    MdInputDirective,\n    MdPlaceholder,\n    MdPrefix,\n    MdSuffix,\n    MdTextareaAutosize,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdInputModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputModule.ctorParameters;\n}\n\n\n\nexport {MdTextareaAutosize} from './autosize';\nexport {FloatPlaceholderType,MdPlaceholder,MdHint,MdErrorDirective,MdPrefix,MdSuffix,MdInputDirective,MdInputContainer} from './input-container';\nexport {getMdInputContainerPlaceholderConflictError,getMdInputContainerUnsupportedTypeError,getMdInputContainerDuplicatedHintError,getMdInputContainerMissingMdInputError} from './input-container-errors';\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Directive, ElementRef, Input, AfterViewInit} from '@angular/core';\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nexport class MdTextareaAutosize implements AfterViewInit {\nprivate _minRows: number;\nprivate _maxRows: number;\n/**\n * @deprecated Use mdAutosizeMinRows\n * @return {?}\n */\nget minRows() { return this._minRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n/**\n * @deprecated Use mdAutosizeMaxRows\n * @return {?}\n */\nget maxRows() { return this._maxRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n/**\n * Minimum number of rows for this textarea.\n * @return {?}\n */\nget mdAutosizeMinRows(): number { return this.minRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset mdAutosizeMinRows(value: number) { this.minRows = value; }\n/**\n * Maximum number of rows for this textarea.\n * @return {?}\n */\nget mdAutosizeMaxRows(): number { return this.maxRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset mdAutosizeMaxRows(value: number) { this.maxRows = value; }\n/**\n * Cached height of a textarea with a single row.\n */\nprivate _cachedLineHeight: number;\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) { }\n/**\n * Sets the minimum height of the textarea as determined by minRows.\n * @return {?}\n */\n_setMinHeight(): void {\n    const /** @type {?} */ minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n/**\n * Sets the maximum height of the textarea as determined by maxRows.\n * @return {?}\n */\n_setMaxHeight(): void {\n    const /** @type {?} */ maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._cacheTextareaLineHeight();\n    this.resizeToFitContent();\n  }\n/**\n * Sets a style property on the textarea element.\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\nprivate _setTextareaStyle(property: string, value: string): void {\n    const /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n    textarea.style[property] = value;\n  }\n/**\n * Cache the height of a single-row textarea.\n * \n * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n * maxRows. For the initial version, we will assume that the height of a single line in the\n * textarea does not ever change.\n * @return {?}\n */\nprivate _cacheTextareaLineHeight(): void {\n    let /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n\n    // Use a clone element because we have to override some styles.\n    let /** @type {?} */ textareaClone = /** @type {?} */(( textarea.cloneNode(false) as HTMLTextAreaElement));\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    textarea.parentNode.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n/**\n * Resize the textarea to fit its content.\n * @return {?}\n */\nresizeToFitContent() {\n    let /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    textarea.style.height = 'auto';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'textarea[md-autosize], textarea[mdTextareaAutosize],' +\n            'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'mdTextareaAutosize',\n  host: {\n    '(input)': 'resizeToFitContent()',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'minRows': [{ type: Input },],\n'maxRows': [{ type: Input },],\n'mdAutosizeMinRows': [{ type: Input },],\n'mdAutosizeMaxRows': [{ type: Input },],\n};\n}\n\nfunction MdTextareaAutosize_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTextareaAutosize.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTextareaAutosize.ctorParameters;\n/** @type {?} */\nMdTextareaAutosize.propDecorators;\n/** @type {?} */\nMdTextareaAutosize.prototype._minRows;\n/** @type {?} */\nMdTextareaAutosize.prototype._maxRows;\n/**\n * Cached height of a textarea with a single row.\n * @type {?}\n */\nMdTextareaAutosize.prototype._cachedLineHeight;\n/** @type {?} */\nMdTextareaAutosize.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  AfterContentInit,\n  AfterContentChecked,\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  Self,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {coerceBooleanProperty} from '../core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {getSupportedInputTypes} from '../core/platform/features';\nimport {\n  getMdInputContainerDuplicatedHintError,\n  getMdInputContainerMissingMdInputError,\n  getMdInputContainerPlaceholderConflictError,\n  getMdInputContainerUnsupportedTypeError\n} from './input-container-errors';\n\n\n// Invalid input type. Using one of these will throw an MdInputContainerUnsupportedTypeError.\nconst /** @type {?} */ MD_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'color',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\n/** Type for the available floatPlaceholder values. */\nexport type FloatPlaceholderType = 'always' | 'never' | 'auto';\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * The placeholder directive. The content can declare this to implement more\n * complex placeholders.\n */\nexport class MdPlaceholder {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-placeholder, mat-placeholder'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPlaceholder.ctorParameters;\n}\n\n/**\n * Hint text to be shown underneath the input.\n */\nexport class MdHint {\n/**\n * Whether to align the hint label at the start or end of the line.\n */\nalign: 'start' | 'end' = 'start';\n/**\n * Unique ID for the hint. Used for the aria-describedby on the input.\n */\nid: string = `md-input-hint-${nextUniqueId++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-hint, mat-hint',\n  host: {\n    '[class.mat-hint]': 'true',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'id': [{ type: Input },],\n};\n}\n\nfunction MdHint_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHint.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHint.ctorParameters;\n/** @type {?} */\nMdHint.propDecorators;\n/**\n * Whether to align the hint label at the start or end of the line.\n * @type {?}\n */\nMdHint.prototype.align;\n/**\n * Unique ID for the hint. Used for the aria-describedby on the input.\n * @type {?}\n */\nMdHint.prototype.id;\n}\n\n/**\n * Single error message to be shown underneath the input.\n */\nexport class MdErrorDirective { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-error, mat-error',\n  host: {\n    '[class.mat-input-error]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdErrorDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nMdErrorDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdErrorDirective.ctorParameters;\n}\n\n/**\n * Prefix to be placed the the front of the input.\n */\nexport class MdPrefix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdPrefix], [matPrefix], [md-prefix]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPrefix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefix.ctorParameters;\n}\n\n/**\n * Suffix to be placed at the end of the input.\n */\nexport class MdSuffix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdSuffix], [matSuffix], [md-suffix]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSuffix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSuffix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSuffix.ctorParameters;\n}\n\n/**\n * Marker for the input element that `MdInputContainer` is wrapping.\n */\nexport class MdInputDirective {\n/**\n * Variables used as cache for getters and setters.\n */\nprivate _type = 'text';\nprivate _placeholder: string = '';\nprivate _disabled = false;\nprivate _required = false;\nprivate _id: string;\nprivate _cachedUid: string;\n/**\n * Whether the element is focused or not.\n */\nfocused = false;\n/**\n * Sets the aria-describedby attribute on the input for improved a11y.\n */\nariaDescribedby: string;\n/**\n * Whether the element is disabled.\n * @return {?}\n */\nget disabled() {\n    return this._ngControl ? this._ngControl.disabled : this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Unique id of the element.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * @param {?} value\n * @return {?}\n */\nset id(value: string) {this._id = value || this._uid; }\n/**\n * Placeholder attribute of the element.\n * @return {?}\n */\nget placeholder() { return this._placeholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\n    if (this._placeholder !== value) {\n      this._placeholder = value;\n      this._placeholderChange.emit(this._placeholder);\n    }\n  }\n/**\n * Whether the element is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) { this._required = coerceBooleanProperty(value); }\n/**\n * Input type of the element.\n * @return {?}\n */\nget type() { return this._type; }\n/**\n * @param {?} value\n * @return {?}\n */\nset type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._renderer.setProperty(this._elementRef.nativeElement, 'type', this._type);\n    }\n  }\n/**\n * The input element's value.\n * @return {?}\n */\nget value() { return this._elementRef.nativeElement.value; }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: string) { this._elementRef.nativeElement.value = value; }\n/**\n * Emits an event when the placeholder changes so that the `md-input-container` can re-validate.\n */\n_placeholderChange = new EventEmitter<string>();\n/**\n * Whether the input is empty.\n * @return {?}\n */\nget empty() {\n    return !this._isNeverEmpty() &&\n        (this.value == null || this.value === '') &&\n        // Check if the input contains bad input. If so, we know that it only appears empty because\n        // the value failed to parse. From the user's perspective it is not empty.\n        // TODO(mmalerba): Add e2e test for bad input case.\n        !this._isBadInput();\n  }\n/**\n * @return {?}\n */\nprivate get _uid() { return this._cachedUid = this._cachedUid || `md-input-${nextUniqueId++}`; }\nprivate _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _ngControl\n */\nconstructor(private _elementRef: ElementRef,\nprivate _renderer: Renderer2,\npublic _ngControl: NgControl) {\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n/**\n * Focuses the input element.\n * @return {?}\n */\nfocus() { this._elementRef.nativeElement.focus(); }\n/**\n * @return {?}\n */\n_onFocus() { this.focused = true; }\n/**\n * @return {?}\n */\n_onBlur() { this.focused = false; }\n/**\n * @return {?}\n */\n_onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n/**\n * Make sure the input is a supported type.\n * @return {?}\n */\nprivate _validateType() {\n    if (MD_INPUT_INVALID_TYPES.indexOf(this._type) !== -1) {\n      throw getMdInputContainerUnsupportedTypeError(this._type);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _isNeverEmpty() { return this._neverEmptyInputTypes.indexOf(this._type) !== -1; }\n/**\n * @return {?}\n */\nprivate _isBadInput() {\n    return false;\n    // return (this._elementRef.nativeElement as HTMLInputElement).validity.badInput;\n  }\n/**\n * Determines if the component host is a textarea. If not recognizable it returns false.\n * @return {?}\n */\nprivate _isTextarea() {\n    let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n    return nativeElement ? nativeElement.nodeName.toLowerCase() === 'textarea' : false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `input[mdInput], textarea[mdInput], input[matInput], textarea[matInput]`,\n  host: {\n    '[class.mat-input-element]': 'true',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.aria-describedby]': 'ariaDescribedby || null',\n    '(blur)': '_onBlur()',\n    '(focus)': '_onFocus()',\n    '(input)': '_onInput()',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: NgControl, decorators: [{ type: Optional }, { type: Self }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'id': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'required': [{ type: Input },],\n'type': [{ type: Input },],\n'_placeholderChange': [{ type: Output },],\n};\n}\n\nfunction MdInputDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputDirective.ctorParameters;\n/** @type {?} */\nMdInputDirective.propDecorators;\n/**\n * Variables used as cache for getters and setters.\n * @type {?}\n */\nMdInputDirective.prototype._type;\n/** @type {?} */\nMdInputDirective.prototype._placeholder;\n/** @type {?} */\nMdInputDirective.prototype._disabled;\n/** @type {?} */\nMdInputDirective.prototype._required;\n/** @type {?} */\nMdInputDirective.prototype._id;\n/** @type {?} */\nMdInputDirective.prototype._cachedUid;\n/**\n * Whether the element is focused or not.\n * @type {?}\n */\nMdInputDirective.prototype.focused;\n/**\n * Sets the aria-describedby attribute on the input for improved a11y.\n * @type {?}\n */\nMdInputDirective.prototype.ariaDescribedby;\n/**\n * Emits an event when the placeholder changes so that the `md-input-container` can re-validate.\n * @type {?}\n */\nMdInputDirective.prototype._placeholderChange;\n/** @type {?} */\nMdInputDirective.prototype._neverEmptyInputTypes;\n/** @type {?} */\nMdInputDirective.prototype._elementRef;\n/** @type {?} */\nMdInputDirective.prototype._renderer;\n/** @type {?} */\nMdInputDirective.prototype._ngControl;\n}\n\n/**\n * Container for text inputs that applies Material Design styling and behavior.\n */\nexport class MdInputContainer implements AfterViewInit, AfterContentInit, AfterContentChecked {\n/**\n * Alignment of the input container's content.\n */\nalign: 'start' | 'end' = 'start';\n/**\n * Color of the input divider, based on the theme.\n */\ncolor: 'primary' | 'accent' | 'warn' = 'primary';\n/**\n * @deprecated Use color instead.\n * @return {?}\n */\nget dividerColor() { return this.color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dividerColor(value) { this.color = value; }\n/**\n * Whether the required marker should be hidden.\n * @return {?}\n */\nget hideRequiredMarker() { return this._hideRequiredMarker; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hideRequiredMarker(value: any) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\nprivate _hideRequiredMarker: boolean;\n/**\n * Whether the floating label should always float or not.\n * @return {?}\n */\nget _shouldAlwaysFloat() { return this._floatPlaceholder === 'always'; }\n/**\n * Whether the placeholder can float or not.\n * @return {?}\n */\nget _canPlaceholderFloat() { return this._floatPlaceholder !== 'never'; }\n/**\n * State of the md-hint and md-error animations.\n */\n_subscriptAnimationState: string = '';\n/**\n * Text for the input hint.\n * @return {?}\n */\nget hintLabel() { return this._hintLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\nprivate _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `md-input-hint-${nextUniqueId++}`;\n/**\n * Whether the placeholder should always float, never float or float as the user types.\n * @return {?}\n */\nget floatPlaceholder() { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: FloatPlaceholderType) {\n    this._floatPlaceholder = value || 'auto';\n  }\nprivate _floatPlaceholder: FloatPlaceholderType = 'auto';\n/**\n * Reference to the input's underline element.\n */\nunderlineRef: ElementRef;\n\n   _mdInputChild: MdInputDirective;\n\n   _placeholderChild: MdPlaceholder;\n\n   _errorChildren: QueryList<MdErrorDirective>;\n\n   _hintChildren: QueryList<MdHint>;\n\n   _prefixChildren: QueryList<MdPrefix>;\n\n   _suffixChildren: QueryList<MdSuffix>;\n/**\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n */\nconstructor(\npublic _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _parentForm: NgForm,\nprivate _parentFormGroup: FormGroupDirective) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._validateInputChild();\n    this._processHints();\n    this._validatePlaceholders();\n\n    // Re-validate when things change.\n    this._hintChildren.changes.subscribe(() => this._processHints());\n    this._mdInputChild._placeholderChange.subscribe(() => this._validatePlaceholders());\n  }\n/**\n * @return {?}\n */\nngAfterContentChecked() {\n    this._validateInputChild();\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n/**\n * Determines whether a class from the NgControl should be forwarded to the host element.\n * @param {?} prop\n * @return {?}\n */\n_shouldForward(prop: string): boolean {\n    let /** @type {?} */ control = this._mdInputChild ? this._mdInputChild._ngControl : null;\n    return control && ( /** @type {?} */((control as any)))[prop];\n  }\n/**\n * Whether the input has a placeholder.\n * @return {?}\n */\n_hasPlaceholder() { return !!(this._mdInputChild.placeholder || this._placeholderChild); }\n/**\n * Focuses the underlying input.\n * @return {?}\n */\n_focusInput() { this._mdInputChild.focus(); }\n/**\n * Whether the input container is in an error state.\n * @return {?}\n */\n_isErrorState(): boolean {\n    const /** @type {?} */ control = this._mdInputChild._ngControl;\n    const /** @type {?} */ isInvalid = control && control.invalid;\n    const /** @type {?} */ isTouched = control && control.touched;\n    const /** @type {?} */ isSubmitted = (this._parentFormGroup && this._parentFormGroup.submitted) ||\n        (this._parentForm && this._parentForm.submitted);\n\n    return !!(isInvalid && (isTouched || isSubmitted));\n  }\n/**\n * Determines whether to display hints or errors.\n * @return {?}\n */\n_getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren.length > 0 && this._isErrorState()) ? 'error' : 'hint';\n  }\n/**\n * Ensure that there is only one placeholder (either `input` attribute or child element with the\n * `md-placeholder` attribute.\n * @return {?}\n */\nprivate _validatePlaceholders() {\n    if (this._mdInputChild.placeholder && this._placeholderChild) {\n      throw getMdInputContainerPlaceholderConflictError();\n    }\n  }\n/**\n * Does any extra processing that is required when handling the hints.\n * @return {?}\n */\nprivate _processHints() {\n    this._validateHints();\n    this._syncAriaDescribedby();\n  }\n/**\n * Ensure that there is a maximum of one of each `<md-hint>` alignment specified, with the\n * attribute being considered as `align=\"start\"`.\n * @return {?}\n */\nprivate _validateHints() {\n    if (this._hintChildren) {\n      let /** @type {?} */ startHint: MdHint = null;\n      let /** @type {?} */ endHint: MdHint = null;\n      this._hintChildren.forEach((hint: MdHint) => {\n        if (hint.align == 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMdInputContainerDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align == 'end') {\n          if (endHint) {\n            throw getMdInputContainerDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n/**\n * Sets the child input's `aria-describedby` to a space-separated list of the ids\n * of the currently-specified hints, as well as a generated id for the hint label.\n * @return {?}\n */\nprivate _syncAriaDescribedby() {\n    if (this._mdInputChild) {\n      let /** @type {?} */ ids: string[] = [];\n      let /** @type {?} */ startHint = this._hintChildren ?\n          this._hintChildren.find(hint => hint.align === 'start') : null;\n      let /** @type {?} */ endHint = this._hintChildren ?\n          this._hintChildren.find(hint => hint.align === 'end') : null;\n\n      if (startHint) {\n        ids.push(startHint.id);\n      } else if (this._hintLabel) {\n        ids.push(this._hintLabelId);\n      }\n\n      if (endHint) {\n        ids.push(endHint.id);\n      }\n\n      this._mdInputChild.ariaDescribedby = ids.join(' ');\n    }\n  }\n/**\n * Throws an error if the container's input child was removed.\n * @return {?}\n */\nprivate _validateInputChild() {\n    if (!this._mdInputChild) {\n      throw getMdInputContainerMissingMdInputError();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-input-container, mat-input-container',\n  templateUrl: 'input-container.html',\n  styleUrls: ['input-container.css'],\n  animations: [\n    trigger('transitionMessages', [\n      state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n      transition('void => enter', [\n        style({ opacity: 0, transform: 'translateY(-100%)' }),\n        animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n      ])\n    ])\n  ],\n  host: {\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n    '[class.mat-input-container]': 'true',\n    '[class.mat-input-invalid]': '_isErrorState()',\n    '[class.mat-focused]': '_mdInputChild.focused',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '(click)': '_focusInput()',\n  },\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'color': [{ type: Input },],\n'dividerColor': [{ type: Input },],\n'hideRequiredMarker': [{ type: Input },],\n'hintLabel': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'underlineRef': [{ type: ViewChild, args: ['underline', ] },],\n'_mdInputChild': [{ type: ContentChild, args: [MdInputDirective, ] },],\n'_placeholderChild': [{ type: ContentChild, args: [MdPlaceholder, ] },],\n'_errorChildren': [{ type: ContentChildren, args: [MdErrorDirective, ] },],\n'_hintChildren': [{ type: ContentChildren, args: [MdHint, ] },],\n'_prefixChildren': [{ type: ContentChildren, args: [MdPrefix, ] },],\n'_suffixChildren': [{ type: ContentChildren, args: [MdSuffix, ] },],\n};\n}\n\nfunction MdInputContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputContainer.ctorParameters;\n/** @type {?} */\nMdInputContainer.propDecorators;\n/**\n * Alignment of the input container's content.\n * @type {?}\n */\nMdInputContainer.prototype.align;\n/**\n * Color of the input divider, based on the theme.\n * @type {?}\n */\nMdInputContainer.prototype.color;\n/** @type {?} */\nMdInputContainer.prototype._hideRequiredMarker;\n/**\n * State of the md-hint and md-error animations.\n * @type {?}\n */\nMdInputContainer.prototype._subscriptAnimationState;\n/** @type {?} */\nMdInputContainer.prototype._hintLabel;\n/** @type {?} */\nMdInputContainer.prototype._hintLabelId;\n/** @type {?} */\nMdInputContainer.prototype._floatPlaceholder;\n/**\n * Reference to the input's underline element.\n * @type {?}\n */\nMdInputContainer.prototype.underlineRef;\n/** @type {?} */\nMdInputContainer.prototype._mdInputChild;\n/** @type {?} */\nMdInputContainer.prototype._placeholderChild;\n/** @type {?} */\nMdInputContainer.prototype._errorChildren;\n/** @type {?} */\nMdInputContainer.prototype._hintChildren;\n/** @type {?} */\nMdInputContainer.prototype._prefixChildren;\n/** @type {?} */\nMdInputContainer.prototype._suffixChildren;\n/** @type {?} */\nMdInputContainer.prototype._elementRef;\n/** @type {?} */\nMdInputContainer.prototype._changeDetectorRef;\n/** @type {?} */\nMdInputContainer.prototype._parentForm;\n/** @type {?} */\nMdInputContainer.prototype._parentFormGroup;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdInputContainerPlaceholderConflictError(): Error {\n  return new Error('Placeholder attribute and child element were both specified.');\n}\n/**\n * \\@docs-private\n * @param {?} type\n * @return {?}\n */\nexport function getMdInputContainerUnsupportedTypeError(type: string): Error {\n  return new Error(`Input type \"${type}\" isn't supported by md-input-container.`);\n}\n/**\n * \\@docs-private\n * @param {?} align\n * @return {?}\n */\nexport function getMdInputContainerDuplicatedHintError(align: string): Error {\n  return new Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdInputContainerMissingMdInputError(): Error {\n  return new Error('md-input-container must contain an mdInput directive. ' +\n                   'Did you forget to add mdInput to the native input or textarea element?');\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  HostBinding,\n  Input,\n} from '@angular/core';\n/**\n * <md-progress-bar> component.\n */\nexport class MdProgressBar {\n/**\n * Color of the progress bar.\n */\ncolor: 'primary' | 'accent' | 'warn' = 'primary';\nprivate _value: number = 0;\n/**\n * Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow.\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) { this._value = clamp(v || 0); }\nprivate _bufferValue: number = 0;\n/**\n * Buffer value of the progress bar. Defaults to zero.\n * @return {?}\n */\nget bufferValue() { return this._bufferValue; }\n/**\n * @param {?} v\n * @return {?}\n */\nset bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n/**\n * Mode of the progress bar.\n * \n * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n * 'determinate'.\n * Mirrored to mode attribute.\n */\nmode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n/**\n * Gets the current transform value for the progress bar's primary indicator.\n * @return {?}\n */\n_primaryTransform() {\n    let /** @type {?} */ scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n/**\n * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\n * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n * @return {?}\n */\n_bufferTransform() {\n    if (this.mode == 'buffer') {\n      let /** @type {?} */ scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-progress-bar, mat-progress-bar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.mat-progress-bar]': 'true',\n  },\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'value': [{ type: Input },{ type: HostBinding, args: ['attr.aria-valuenow', ] },],\n'bufferValue': [{ type: Input },],\n'mode': [{ type: Input },{ type: HostBinding, args: ['attr.mode', ] },],\n};\n}\n\nfunction MdProgressBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressBar.ctorParameters;\n/** @type {?} */\nMdProgressBar.propDecorators;\n/**\n * Color of the progress bar.\n * @type {?}\n */\nMdProgressBar.prototype.color;\n/** @type {?} */\nMdProgressBar.prototype._value;\n/** @type {?} */\nMdProgressBar.prototype._bufferValue;\n/**\n * Mode of the progress bar.\n * \n * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n * 'determinate'.\n * Mirrored to mode attribute.\n * @type {?}\n */\nMdProgressBar.prototype.mode;\n}\n\n/**\n * Clamps a value to be between two numbers, by default 0 and 100.\n * @param {?} v\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {MdCommonModule} from '../core';\nimport {\n  MdProgressSpinner,\n  MdSpinner,\n  MdProgressSpinnerCssMatStyler,\n} from './progress-spinner';\nclass MdProgressSpinnerModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [\n    MdProgressSpinner,\n    MdSpinner,\n    MdCommonModule,\n    MdProgressSpinnerCssMatStyler\n  ],\n  declarations: [\n    MdProgressSpinner,\n    MdSpinner,\n    MdProgressSpinnerCssMatStyler\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressSpinnerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinnerModule.ctorParameters;\n}\n\n\nexport {MdProgressSpinnerModule};\nexport {PROGRESS_SPINNER_STROKE_WIDTH,ProgressSpinnerMode,MdProgressSpinnerCssMatStyler,MdProgressSpinner,MdSpinner} from './progress-spinner';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  HostBinding,\n  ChangeDetectionStrategy,\n  OnDestroy,\n  Input,\n  ElementRef,\n  NgZone,\n  Renderer2,\n  Directive,\n  ViewChild,\n} from '@angular/core';\n/**\n * A single degree in radians.\n */\nconst DEGREE_IN_RADIANS = Math.PI / 180;\n/**\n * Duration of the indeterminate animation.\n */\nconst DURATION_INDETERMINATE = 667;\n/**\n * Duration of the indeterminate animation.\n */\nconst DURATION_DETERMINATE = 225;\n/**\n * Start animation value of the indeterminate animation\n */\nconst startIndeterminate = 3;\n/**\n * End animation value of the indeterminate animation\n */\nconst endIndeterminate = 80;\n/**\n * Maximum angle for the arc. The angle can't be exactly 360, because the arc becomes hidden.\n */\nconst MAX_ANGLE = 359.99 / 100;\n/**\n * Whether the user's browser supports requestAnimationFrame.\n */\nconst HAS_RAF = typeof requestAnimationFrame !== 'undefined';\n/**\n * Default stroke width as a percentage of the viewBox.\n */\nexport const PROGRESS_SPINNER_STROKE_WIDTH = 10;\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\ntype EasingFn = (currentTime: number, startValue: number,\n                 changeInValue: number, duration: number) => number;\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdProgressSpinnerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-progress-spinner, mat-progress-spinner',\n  host: {\n    '[class.mat-progress-spinner]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressSpinnerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinnerCssMatStyler.ctorParameters;\n}\n\n/**\n * <md-progress-spinner> component.\n */\nexport class MdProgressSpinner implements OnDestroy {\n/**\n * The id of the last requested animation.\n */\nprivate _lastAnimationId: number = 0;\n/**\n * The id of the indeterminate interval.\n */\nprivate _interdeterminateInterval: number;\n/**\n * The SVG <path> node that is used to draw the circle.\n */\nprivate _path: ElementRef;\nprivate _mode: ProgressSpinnerMode = 'determinate';\nprivate _value: number;\nprivate _color: string = 'primary';\n/**\n * Stroke width of the progress spinner. By default uses 10px as stroke width.\n */\nstrokeWidth: number = PROGRESS_SPINNER_STROKE_WIDTH;\n/**\n * Values for aria max and min are only defined as numbers when in a determinate mode.  We do this\n * because voiceover does not report the progress indicator as indeterminate if the aria min\n * and/or max value are number values.\n * @return {?}\n */\nget _ariaValueMin() {\n    return this.mode == 'determinate' ? 0 : null;\n  }\n/**\n * @return {?}\n */\nget _ariaValueMax() {\n    return this.mode == 'determinate' ? 100 : null;\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget interdeterminateInterval() {\n    return this._interdeterminateInterval;\n  }\n/**\n * \\@docs-private\n * @param {?} interval\n * @return {?}\n */\nset interdeterminateInterval(interval: number) {\n    clearInterval(this._interdeterminateInterval);\n    this._interdeterminateInterval = interval;\n  }\n/**\n * Clean up any animations that were running.\n * @return {?}\n */\nngOnDestroy() {\n    this._cleanupIndeterminateAnimation();\n  }\n/**\n * The color of the progress-spinner. Can be primary, accent, or warn.\n * @return {?}\n */\nget color(): string { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) {\n    if (value) {\n      this._renderer.removeClass(this._elementRef.nativeElement, `mat-${this._color}`);\n      this._renderer.addClass(this._elementRef.nativeElement, `mat-${value}`);\n      this._color = value;\n    }\n  }\n/**\n * Value of the progress circle. It is bound to the host as the attribute aria-valuenow.\n * @return {?}\n */\nget value() {\n    if (this.mode == 'determinate') {\n      return this._value;\n    }\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) {\n    if (v != null && this.mode == 'determinate') {\n      let /** @type {?} */ newValue = clamp(v);\n      this._animateCircle(this.value || 0, newValue);\n      this._value = newValue;\n    }\n  }\n/**\n * Mode of the progress circle\n * \n * Input must be one of the values from ProgressMode, defaults to 'determinate'.\n * mode is bound to the host as the attribute host.\n * @return {?}\n */\nget mode() {\n    return this._mode;\n  }\n/**\n * @param {?} mode\n * @return {?}\n */\nset mode(mode: ProgressSpinnerMode) {\n    if (mode !== this._mode) {\n      if (mode === 'indeterminate') {\n        this._startIndeterminateAnimation();\n      } else {\n        this._cleanupIndeterminateAnimation();\n        this._animateCircle(0, this._value);\n      }\n      this._mode = mode;\n    }\n  }\n/**\n * @param {?} _ngZone\n * @param {?} _elementRef\n * @param {?} _renderer\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer2) { }\n/**\n * Animates the circle from one percentage value to another.\n * \n * @param {?} animateFrom The percentage of the circle filled starting the animation.\n * @param {?} animateTo The percentage of the circle filled ending the animation.\n * @param {?=} ease The easing function to manage the pace of change in the animation.\n * @param {?=} duration The length of time to show the animation, in milliseconds.\n * @param {?=} rotation The starting angle of the circle fill, with 0° represented at the top center\n *    of the circle.\n * @return {?}\n */\nprivate _animateCircle(animateFrom: number, animateTo: number, ease: EasingFn = linearEase,\n                        duration = DURATION_DETERMINATE, rotation = 0) {\n\n    let /** @type {?} */ id = ++this._lastAnimationId;\n    let /** @type {?} */ startTime = Date.now();\n    let /** @type {?} */ changeInValue = animateTo - animateFrom;\n\n    // No need to animate it if the values are the same\n    if (animateTo === animateFrom) {\n      this._renderArc(animateTo, rotation);\n    } else {\n      let /** @type {?} */ animation = () => {\n        // If there is no requestAnimationFrame, skip ahead to the end of the animation.\n        let /** @type {?} */ elapsedTime = HAS_RAF ?\n            Math.max(0, Math.min(Date.now() - startTime, duration)) :\n            duration;\n\n        this._renderArc(\n          ease(elapsedTime, animateFrom, changeInValue, duration),\n          rotation\n        );\n\n        // Prevent overlapping animations by checking if a new animation has been called for and\n        // if the animation has lasted longer than the animation duration.\n        if (id === this._lastAnimationId && elapsedTime < duration) {\n          requestAnimationFrame(animation);\n        }\n      };\n\n      // Run the animation outside of Angular's zone, in order to avoid\n      // hitting ZoneJS and change detection on each frame.\n      this._ngZone.runOutsideAngular(animation);\n    }\n  }\n/**\n * Starts the indeterminate animation interval, if it is not already running.\n * @return {?}\n */\nprivate _startIndeterminateAnimation() {\n    let /** @type {?} */ rotationStartPoint = 0;\n    let /** @type {?} */ start = startIndeterminate;\n    let /** @type {?} */ end = endIndeterminate;\n    let /** @type {?} */ duration = DURATION_INDETERMINATE;\n    let /** @type {?} */ animate = () => {\n      this._animateCircle(start, end, materialEase, duration, rotationStartPoint);\n      // Prevent rotation from reaching Number.MAX_SAFE_INTEGER.\n      rotationStartPoint = (rotationStartPoint + end) % 100;\n      let /** @type {?} */ temp = start;\n      start = -end;\n      end = -temp;\n    };\n\n    if (!this.interdeterminateInterval) {\n      this._ngZone.runOutsideAngular(() => {\n        this.interdeterminateInterval = setInterval(animate, duration + 50, 0, false);\n        animate();\n      });\n    }\n  }\n/**\n * Removes interval, ending the animation.\n * @return {?}\n */\nprivate _cleanupIndeterminateAnimation() {\n    this.interdeterminateInterval = null;\n  }\n/**\n * Renders the arc onto the SVG element. Proxies `getArc` while setting the proper\n * DOM attribute on the `<path>`.\n * @param {?} currentValue\n * @param {?=} rotation\n * @return {?}\n */\nprivate _renderArc(currentValue: number, rotation = 0) {\n    if (this._path) {\n      const /** @type {?} */ svgArc = getSvgArc(currentValue, rotation, this.strokeWidth);\n      this._renderer.setAttribute(this._path.nativeElement, 'd', svgArc);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-progress-spinner, mat-progress-spinner',\n  host: {\n    'role': 'progressbar',\n    '[attr.aria-valuemin]': '_ariaValueMin',\n    '[attr.aria-valuemax]': '_ariaValueMax'\n  },\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_path': [{ type: ViewChild, args: ['path', ] },],\n'strokeWidth': [{ type: Input },],\n'color': [{ type: Input },],\n'value': [{ type: Input },{ type: HostBinding, args: ['attr.aria-valuenow', ] },],\n'mode': [{ type: HostBinding, args: ['attr.mode', ] },{ type: Input },],\n};\n}\n\nfunction MdProgressSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinner.ctorParameters;\n/** @type {?} */\nMdProgressSpinner.propDecorators;\n/**\n * The id of the last requested animation.\n * @type {?}\n */\nMdProgressSpinner.prototype._lastAnimationId;\n/**\n * The id of the indeterminate interval.\n * @type {?}\n */\nMdProgressSpinner.prototype._interdeterminateInterval;\n/**\n * The SVG <path> node that is used to draw the circle.\n * @type {?}\n */\nMdProgressSpinner.prototype._path;\n/** @type {?} */\nMdProgressSpinner.prototype._mode;\n/** @type {?} */\nMdProgressSpinner.prototype._value;\n/** @type {?} */\nMdProgressSpinner.prototype._color;\n/**\n * Stroke width of the progress spinner. By default uses 10px as stroke width.\n * @type {?}\n */\nMdProgressSpinner.prototype.strokeWidth;\n/** @type {?} */\nMdProgressSpinner.prototype._ngZone;\n/** @type {?} */\nMdProgressSpinner.prototype._elementRef;\n/** @type {?} */\nMdProgressSpinner.prototype._renderer;\n}\n\n/**\n * <md-spinner> component.\n * \n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <md-progress-spinner> instance.\n */\nexport class MdSpinner extends MdProgressSpinner implements OnDestroy {\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} renderer\n */\nconstructor(elementRef: ElementRef, ngZone: NgZone, renderer: Renderer2) {\n    super(ngZone, elementRef, renderer);\n    this.mode = 'indeterminate';\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // The `ngOnDestroy` from `MdProgressSpinner` should be called explicitly, because\n    // in certain cases Angular won't call it (e.g. when using AoT and in unit tests).\n    super.ngOnDestroy();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-spinner, mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    '[class.mat-spinner]': 'true',\n  },\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: Renderer2, },\n];\n}\n\nfunction MdSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSpinner.ctorParameters;\n}\n\n/**\n * Clamps a value to be between 0 and 100.\n * @param {?} v\n * @return {?}\n */\nfunction clamp(v: number) {\n  return Math.max(0, Math.min(100, v));\n}\n/**\n * Converts Polar coordinates to Cartesian.\n * @param {?} radius\n * @param {?} pathRadius\n * @param {?} angleInDegrees\n * @return {?}\n */\nfunction polarToCartesian(radius: number, pathRadius: number, angleInDegrees: number) {\n  let /** @type {?} */ angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;\n\n  return (radius + (pathRadius * Math.cos(angleInRadians))) +\n    ',' + (radius + (pathRadius * Math.sin(angleInRadians)));\n}\n/**\n * Easing function for linear animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction linearEase(currentTime: number, startValue: number,\n                    changeInValue: number, duration: number) {\n  return changeInValue * currentTime / duration + startValue;\n}\n/**\n * Easing function to match material design indeterminate animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction materialEase(currentTime: number, startValue: number,\n                      changeInValue: number, duration: number) {\n  let /** @type {?} */ time = currentTime / duration;\n  let /** @type {?} */ timeCubed = Math.pow(time, 3);\n  let /** @type {?} */ timeQuad = Math.pow(time, 4);\n  let /** @type {?} */ timeQuint = Math.pow(time, 5);\n  return startValue + changeInValue * ((6 * timeQuint) + (-15 * timeQuad) + (10 * timeCubed));\n}\n/**\n * Determines the path value to define the arc.  Converting percentage values to to polar\n * coordinates on the circle, and then to cartesian coordinates in the viewport.\n * \n * @param {?} currentValue The current percentage value of the progress circle, the percentage of the\n *    circle to fill.\n * @param {?} rotation The starting point of the circle with 0 being the 0 degree point.\n * @param {?} strokeWidth Stroke width of the progress spinner arc.\n * @return {?} A string for an SVG path representing a circle filled from the starting point to the\n *    percentage value provided.\n */\nfunction getSvgArc(currentValue: number, rotation: number, strokeWidth: number) {\n  let /** @type {?} */ startPoint = rotation || 0;\n  let /** @type {?} */ radius = 50;\n  let /** @type {?} */ pathRadius = radius - strokeWidth;\n\n  let /** @type {?} */ startAngle = startPoint * MAX_ANGLE;\n  let /** @type {?} */ endAngle = currentValue * MAX_ANGLE;\n  let /** @type {?} */ start = polarToCartesian(radius, pathRadius, startAngle);\n  let /** @type {?} */ end = polarToCartesian(radius, pathRadius, endAngle + startAngle);\n  let /** @type {?} */ arcSweep = endAngle < 0 ? 0 : 1;\n  let /** @type {?} */ largeArcFlag: number;\n\n  if (endAngle < 0) {\n    largeArcFlag = endAngle >= -180 ? 0 : 1;\n  } else {\n    largeArcFlag = endAngle <= 180 ? 0 : 1;\n  }\n\n  return `M${start}A${pathRadius},${pathRadius} 0 ${largeArcFlag},${arcSweep} ${end}`;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\r\nimport {MdCommonModule} from '../core';\r\nimport {MdIcon} from './icon';\r\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\nexport class MdIconModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n  imports: [MdCommonModule],\r\n  exports: [MdIcon, MdCommonModule],\r\n  declarations: [MdIcon],\r\n  providers: [ICON_REGISTRY_PROVIDER],\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdIconModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconModule.ctorParameters;\n}\n\r\n\r\n\r\nexport {MdIcon} from './icon';\r\nexport {getMdIconNameNotFoundError,getMdIconNoHttpProviderError,MdIconRegistry,ICON_REGISTRY_PROVIDER_FACTORY,ICON_REGISTRY_PROVIDER} from './icon-registry';\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Renderer2,\n  SimpleChange,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {MdIconRegistry} from './icon-registry';\n/**\n * Component to display an icon. It can be used in the following ways:\n * - Specify the svgSrc input to load an SVG icon from a URL. The SVG content is directly inlined\n *   as a child of the <md-icon> component, so that CSS styles can easily be applied to it.\n *   The URL is loaded via an XMLHttpRequest, so it must be on the same domain as the page or its\n *   server must be configured to allow cross-domain requests.\n *   Example:\n *     <md-icon svgSrc=\"assets/arrow.svg\"></md-icon>\n * \n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MdIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <md-icon svgIcon=\"left-arrow\"></md-icon>\n *     <md-icon svgIcon=\"animals:cat\"></md-icon>\n * \n * - Use a font ligature as an icon by putting the ligature text in the content of the <md-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MdIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <md-icon>home</md-icon>\n *     <md-icon fontSet=\"myfont\">sun</md-icon>\n * \n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <md-icon fontSet=\"fa\" fontIcon=\"alarm\"></md-icon>\n */\nexport class MdIcon implements OnChanges, OnInit, AfterViewChecked {\nprivate _color: string;\n/**\n * Name of the icon in the SVG icon set.\n */\nsvgIcon: string;\n/**\n * Font set that the icon is a part of.\n */\nfontSet: string;\n/**\n * Name of an icon within a font set.\n */\nfontIcon: string;\n/**\n * Alt label to be used for accessibility.\n */\nalt: string;\n/**\n * Screenreader label for the icon.\n */\nhostAriaLabel: string = '';\n/**\n * Color of the icon.\n * @return {?}\n */\nget color(): string { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) { this._updateColor(value); }\nprivate _previousFontSetClass: string;\nprivate _previousFontIconClass: string;\nprivate _previousAriaLabel: string;\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _mdIconRegistry\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _mdIconRegistry: MdIconRegistry) { }\n/**\n * @param {?} newColor\n * @return {?}\n */\n_updateColor(newColor: string) {\n    this._setElementColor(this._color, false);\n    this._setElementColor(newColor, true);\n    this._color = newColor;\n  }\n/**\n * @param {?} color\n * @param {?} isAdd\n * @return {?}\n */\n_setElementColor(color: string, isAdd: boolean) {\n    if (color != null && color != '') {\n      if (isAdd) {\n        this._renderer.addClass(this._elementRef.nativeElement, `mat-${color}`);\n      } else {\n        this._renderer.removeClass(this._elementRef.nativeElement, `mat-${color}`);\n      }\n    }\n  }\n/**\n * Splits an svgIcon binding value into its icon set and icon name components.\n * Returns a 2-element array of [(icon set), (icon name)].\n * The separator for the two fields is ':'. If there is no separator, an empty\n * string is returned for the icon set and the entire value is returned for\n * the icon name. If the argument is falsy, returns an array of two empty strings.\n * Throws an error if the name contains two or more ':' separators.\n * Examples:\n *   'social:cake' -> ['social', 'cake']\n *   'penguin' -> ['', 'penguin']\n *   null -> ['', '']\n *   'a:b:c' -> (throws Error)\n * @param {?} iconName\n * @return {?}\n */\nprivate _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const /** @type {?} */ parts = iconName.split(':');\n    switch (parts.length) {\n      case 1:\n        // Use default namespace.\n        return ['', parts[0]];\n      case 2:\n        return /** @type {?} */(( <[string, string]>parts));\n      default:\n        throw new Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: { [propertyName: string]: SimpleChange }) {\n    const /** @type {?} */ changedInputs = Object.keys(changes);\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changedInputs.indexOf('svgIcon') != -1 || changedInputs.indexOf('svgSrc') != -1) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n        this._mdIconRegistry.getNamedSvgIcon(iconName, namespace).first().subscribe(\n            svg => this._setSvgElement(svg),\n            (err: Error) => console.log(`Error retrieving icon: ${err.message}`));\n      }\n    }\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n    this._updateAriaLabel();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <md-icon>arrow</md-icon>. In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewChecked() {\n    // Update aria label here because it may depend on the projected text content.\n    // (e.g. <md-icon>home</md-icon> should use 'home').\n    this._updateAriaLabel();\n  }\n/**\n * @return {?}\n */\nprivate _updateAriaLabel() {\n      const /** @type {?} */ ariaLabel = this._getAriaLabel();\n      if (ariaLabel && ariaLabel !== this._previousAriaLabel) {\n        this._previousAriaLabel = ariaLabel;\n        this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-label', ariaLabel);\n      }\n  }\n/**\n * @return {?}\n */\nprivate _getAriaLabel() {\n    // If the parent provided an aria-label attribute value, use it as-is. Otherwise look for a\n    // reasonable value from the alt attribute, font icon name, SVG icon name, or (for ligatures)\n    // the text content of the directive.\n    const /** @type {?} */ label =\n        this.hostAriaLabel ||\n        this.alt ||\n        this.fontIcon ||\n        this._splitIconName(this.svgIcon)[1];\n    if (label) {\n      return label;\n    }\n    // The \"content\" of an SVG icon is not a useful label.\n    if (this._usingFontIcon()) {\n      const /** @type {?} */ text = this._elementRef.nativeElement.textContent;\n      if (text) {\n        return text;\n      }\n    }\n    // TODO: Warn here in dev mode.\n    return null;\n  }\n/**\n * @return {?}\n */\nprivate _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n/**\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgElement(svg: SVGElement) {\n    const /** @type {?} */ layoutElement = this._elementRef.nativeElement;\n    // Remove existing child nodes and add the new SVG element.\n    // We would use renderer.detachView(Array.from(layoutElement.childNodes)) here,\n    // but it fails in IE11: https://github.com/angular/angular/issues/6327\n    layoutElement.innerHTML = '';\n    this._renderer.appendChild(layoutElement, svg);\n  }\n/**\n * @return {?}\n */\nprivate _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n    const /** @type {?} */ elem = this._elementRef.nativeElement;\n    const /** @type {?} */ fontSetClass = this.fontSet ?\n        this._mdIconRegistry.classNameForFontAlias(this.fontSet) :\n        this._mdIconRegistry.getDefaultFontSetClass();\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        this._renderer.removeClass(elem, this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        this._renderer.addClass(elem, fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        this._renderer.removeClass(elem, this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        this._renderer.addClass(elem, this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'md-icon, mat-icon',\n  styleUrls: ['icon.css'],\n  host: {\n    'role': 'img',\n    '[class.mat-icon]': 'true',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: MdIconRegistry, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'svgIcon': [{ type: Input },],\n'fontSet': [{ type: Input },],\n'fontIcon': [{ type: Input },],\n'alt': [{ type: Input },],\n'hostAriaLabel': [{ type: Input, args: ['aria-label', ] },],\n'color': [{ type: Input },],\n};\n}\n\nfunction MdIcon_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIcon.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIcon.ctorParameters;\n/** @type {?} */\nMdIcon.propDecorators;\n/** @type {?} */\nMdIcon.prototype._color;\n/**\n * Name of the icon in the SVG icon set.\n * @type {?}\n */\nMdIcon.prototype.svgIcon;\n/**\n * Font set that the icon is a part of.\n * @type {?}\n */\nMdIcon.prototype.fontSet;\n/**\n * Name of an icon within a font set.\n * @type {?}\n */\nMdIcon.prototype.fontIcon;\n/**\n * Alt label to be used for accessibility.\n * @type {?}\n */\nMdIcon.prototype.alt;\n/**\n * Screenreader label for the icon.\n * @type {?}\n */\nMdIcon.prototype.hostAriaLabel;\n/** @type {?} */\nMdIcon.prototype._previousFontSetClass;\n/** @type {?} */\nMdIcon.prototype._previousFontIconClass;\n/** @type {?} */\nMdIcon.prototype._previousAriaLabel;\n/** @type {?} */\nMdIcon.prototype._elementRef;\n/** @type {?} */\nMdIcon.prototype._renderer;\n/** @type {?} */\nMdIcon.prototype._mdIconRegistry;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable, SecurityContext, Optional, SkipSelf} from '@angular/core';\r\nimport {SafeResourceUrl, DomSanitizer} from '@angular/platform-browser';\r\nimport {Http} from '@angular/http';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport'rxjs/add/observable/forkJoin';\r\nimport'rxjs/add/observable/of';\r\nimport'rxjs/add/operator/map';\r\nimport'rxjs/add/operator/filter';\r\nimport'rxjs/add/operator/do';\r\nimport'rxjs/add/operator/share';\r\nimport'rxjs/add/operator/finally';\r\nimport'rxjs/add/operator/catch';\r\nimport'rxjs/add/observable/throw';\n/**\n * Returns an exception to be thrown in the case when attempting to\rload an icon with a name that cannot be found.\r\\@docs-private\n * @param {?} iconName\n * @return {?}\n */\nexport function getMdIconNameNotFoundError(iconName: string): Error {\r\n  return new Error(`Unable to find icon with the name \"${iconName}\"`);\r\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\r`<md-icon>` without including \\@angular/http.\r\\@docs-private\n * @return {?}\n */\nexport function getMdIconNoHttpProviderError(): Error {\r\n  return new Error('Could not find Http provider for use with Angular Material icons. ' +\r\n                   'Please include the HttpModule from @angular/http in your app imports.');\r\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\r\\@docs-private\n */\nclass SvgIconConfig {\r\n  svgElement: SVGElement = null;\n/**\n * @param {?} url\n */\nconstructor(public url: SafeResourceUrl) { }\r\n}\n\nfunction SvgIconConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nSvgIconConfig.prototype.svgElement;\n/** @type {?} */\nSvgIconConfig.prototype.url;\n}\n\n/**\n * Service to register and display icons used by the <md-icon> component.\r- Registers icon URLs by namespace and name.\r- Registers icon set URLs by namespace.\r- Registers aliases for CSS classes, for use with icon fonts.\r- Loads icons from URLs and extracts individual icons from icon sets.\n */\nexport class MdIconRegistry {\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n */\nprivate _svgIconConfigs = new Map<string, SvgIconConfig>();\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\rMultiple icon sets can be registered under the same namespace.\n */\nprivate _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n/**\n * Cache for icons loaded by direct URLs.\n */\nprivate _cachedIconsByUrl = new Map<string, SVGElement>();\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n */\nprivate _inProgressUrlFetches = new Map<string, Observable<string>>();\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n */\nprivate _fontCssClassesByAlias = new Map<string, string>();\n/**\n * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.\rThe default 'material-icons' value assumes that the material icon font has been loaded as\rdescribed at http://google.github.io/material-design-icons/#icon-font-for-the-web\n */\nprivate _defaultFontSetClass = 'material-icons';\n/**\n * @param {?} _http\n * @param {?} _sanitizer\n */\nconstructor(\nprivate _http: Http,\nprivate _sanitizer: DomSanitizer) {}\n/**\n * Registers an icon by URL in the default namespace.\r\\@param iconName Name under which the icon should be registered.\r\\@param url\n * @param {?} iconName\n * @param {?} url\n * @return {?}\n */\naddSvgIcon(iconName: string, url: SafeResourceUrl): this {\r\n    return this.addSvgIconInNamespace('', iconName, url);\r\n  }\n/**\n * Registers an icon by URL in the specified namespace.\r\\@param namespace Namespace in which the icon should be registered.\r\\@param iconName Name under which the icon should be registered.\r\\@param url\n * @param {?} namespace\n * @param {?} iconName\n * @param {?} url\n * @return {?}\n */\naddSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\r\n    const /** @type {?} */ key = iconKey(namespace, iconName);\r\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\r\n    return this;\r\n  }\n/**\n * Registers an icon set by URL in the default namespace.\r\\@param url\n * @param {?} url\n * @return {?}\n */\naddSvgIconSet(url: SafeResourceUrl): this {\r\n    return this.addSvgIconSetInNamespace('', url);\r\n  }\n/**\n * Registers an icon set by URL in the specified namespace.\r\\@param namespace Namespace in which to register the icon set.\r\\@param url\n * @param {?} namespace\n * @param {?} url\n * @return {?}\n */\naddSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\r\n    const /** @type {?} */ config = new SvgIconConfig(url);\r\n    if (this._iconSetConfigs.has(namespace)) {\r\n      this._iconSetConfigs.get(namespace).push(config);\r\n    } else {\r\n      this._iconSetConfigs.set(namespace, [config]);\r\n    }\r\n    return this;\r\n  }\n/**\n * Defines an alias for a CSS class name to be used for icon fonts. Creating an mdIcon\rcomponent with the alias as the fontSet input will cause the class name to be applied\rto the <md-icon> element.\r\r\\@param alias Alias for the font.\r\\@param className Class name override to be used instead of the alias.\n * @param {?} alias\n * @param {?=} className\n * @return {?}\n */\nregisterFontClassAlias(alias: string, className = alias): this {\r\n    this._fontCssClassesByAlias.set(alias, className);\r\n    return this;\r\n  }\n/**\n * Returns the CSS class name associated with the alias by a previous call to\rregisterFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n * @param {?} alias\n * @return {?}\n */\nclassNameForFontAlias(alias: string): string {\r\n    return this._fontCssClassesByAlias.get(alias) || alias;\r\n  }\n/**\n * Sets the CSS class name to be used for icon fonts when an <md-icon> component does not\rhave a fontSet input value, and is not loading an icon by name or URL.\r\r\\@param className\n * @param {?} className\n * @return {?}\n */\nsetDefaultFontSetClass(className: string): this {\r\n    this._defaultFontSetClass = className;\r\n    return this;\r\n  }\n/**\n * Returns the CSS class name to be used for icon fonts when an <md-icon> component does not\rhave a fontSet input value, and is not loading an icon by name or URL.\n * @return {?}\n */\ngetDefaultFontSetClass(): string {\r\n    return this._defaultFontSetClass;\r\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) from the given URL.\rThe response from the URL may be cached so this will not always cause an HTTP request, but\rthe produced element will always be a new copy of the originally fetched icon. (That is,\rit will not contain any modifications made to elements previously returned).\r\r\\@param safeUrl URL from which to fetch the SVG icon.\n * @param {?} safeUrl\n * @return {?}\n */\ngetSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\r\n    let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\r\n\r\n    if (this._cachedIconsByUrl.has(url)) {\r\n      return Observable.of(cloneSvg(this._cachedIconsByUrl.get(url)));\r\n    }\r\n    return this._loadSvgIconFromConfig(new SvgIconConfig(url))\r\n        .do(svg => this._cachedIconsByUrl.set(url, svg))\r\n        .map(svg => cloneSvg(svg));\r\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) with the given name\rand namespace. The icon must have been previously registered with addIcon or addIconSet;\rif not, the Observable will throw an error.\r\r\\@param name Name of the icon to be retrieved.\r\\@param namespace Namespace in which to look for the icon.\n * @param {?} name\n * @param {?=} namespace\n * @return {?}\n */\ngetNamedSvgIcon(name: string, namespace = ''): Observable<SVGElement> {\r\n    // Return (copy of) cached icon if possible.\r\n    const /** @type {?} */ key = iconKey(namespace, name);\r\n    if (this._svgIconConfigs.has(key)) {\r\n      return this._getSvgFromConfig(this._svgIconConfigs.get(key));\r\n    }\r\n    // See if we have any icon sets registered for the namespace.\r\n    const /** @type {?} */ iconSetConfigs = this._iconSetConfigs.get(namespace);\r\n    if (iconSetConfigs) {\r\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\r\n    }\r\n    return Observable.throw(getMdIconNameNotFoundError(key));\r\n  }\n/**\n * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n * @param {?} config\n * @return {?}\n */\nprivate _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\r\n    if (config.svgElement) {\r\n      // We already have the SVG element for this icon, return a copy.\r\n      return Observable.of(cloneSvg(config.svgElement));\r\n    } else {\r\n      // Fetch the icon from the config's URL, cache it, and return a copy.\r\n      return this._loadSvgIconFromConfig(config)\r\n          .do(svg => config.svgElement = svg)\r\n          .map(svg => cloneSvg(svg));\r\n    }\r\n  }\n/**\n * Attempts to find an icon with the specified name in any of the SVG icon sets.\rFirst searches the available cached icons for a nested element with a matching name, and\rif found copies the element to a new <svg> element. If not found, fetches all icon sets\rthat have not been cached, and searches again after all fetches are completed.\rThe returned Observable produces the SVG element if possible, and throws\ran error if no icon with the specified name can be found.\n * @param {?} name\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\r\n      Observable<SVGElement> {\r\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\r\n    // requested name.\r\n    const /** @type {?} */ namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\r\n    if (namedIcon) {\r\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\r\n      // time anyway, there's probably not much advantage compared to just always extracting\r\n      // it from the icon set.\r\n      return Observable.of(namedIcon);\r\n    }\r\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\r\n    // fetched, fetch them now and look for iconName in the results.\r\n    const /** @type {?} */ iconSetFetchRequests: Observable<SVGElement>[] = iconSetConfigs\r\n        .filter(iconSetConfig => !iconSetConfig.svgElement)\r\n        .map(iconSetConfig =>\r\n            this._loadSvgIconSetFromConfig(iconSetConfig)\r\n                .catch((err: any, caught: Observable<SVGElement>): Observable<SVGElement> => {\r\n                  let /** @type {?} */ url =\r\n                      this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\r\n\r\n                  // Swallow errors fetching individual URLs so the combined Observable won't\r\n                  // necessarily fail.\r\n                  console.log(`Loading icon set URL: ${url} failed: ${err}`);\r\n                  return Observable.of(null);\r\n                })\r\n                .do(svg => {\r\n                  // Cache SVG element.\r\n                  if (svg) {\r\n                    iconSetConfig.svgElement = svg;\r\n                  }\r\n                }));\r\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\r\n    // cached SVG element (unless the request failed), and we can check again for the icon.\r\n    return Observable.forkJoin(iconSetFetchRequests)\r\n        .map((ignoredResults: any) => {\r\n          const /** @type {?} */ foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\r\n          if (!foundIcon) {\r\n            throw getMdIconNameNotFoundError(name);\r\n          }\r\n          return foundIcon;\r\n        });\r\n  }\n/**\n * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\rtag matches the specified name. If found, copies the nested element to a new SVG element and\rreturns it. Returns null if no matching element is found.\n * @param {?} iconName\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\r\n      SVGElement {\r\n    // Iterate backwards, so icon sets added later have precedence.\r\n    for (let /** @type {?} */ i = iconSetConfigs.length - 1; i >= 0; i--) {\r\n      const /** @type {?} */ config = iconSetConfigs[i];\r\n      if (config.svgElement) {\r\n        const /** @type {?} */ foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\r\n        if (foundIcon) {\r\n          return foundIcon;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\n/**\n * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\rfrom it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\r\n    return this._fetchUrl(config.url)\r\n        .map(svgText => this._createSvgElementForSingleIcon(svgText));\r\n  }\n/**\n * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\rfrom it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\r\n      // TODO: Document that icons should only be loaded from trusted sources.\r\n    return this._fetchUrl(config.url)\r\n        .map(svgText => this._svgElementFromString(svgText));\r\n  }\n/**\n * Creates a DOM element from the given SVG string, and adds default attributes.\n * @param {?} responseText\n * @return {?}\n */\nprivate _createSvgElementForSingleIcon(responseText: string): SVGElement {\r\n    const /** @type {?} */ svg = this._svgElementFromString(responseText);\r\n    this._setSvgAttributes(svg);\r\n    return svg;\r\n  }\n/**\n * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\rtag matches the specified name. If found, copies the nested element to a new SVG element and\rreturns it. Returns null if no matching element is found.\n * @param {?} iconSet\n * @param {?} iconName\n * @return {?}\n */\nprivate _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement {\r\n    const /** @type {?} */ iconNode = iconSet.querySelector('#' + iconName);\r\n\r\n    if (!iconNode) {\r\n      return null;\r\n    }\r\n\r\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\r\n    // the content of a new <svg> node.\r\n    if (iconNode.tagName.toLowerCase() === 'svg') {\r\n      return this._setSvgAttributes( /** @type {?} */((iconNode.cloneNode(true) as SVGElement)));\r\n    }\r\n\r\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\r\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\r\n    // tag is problematic on Firefox, because it needs to include the current page path.\r\n    if (iconNode.nodeName.toLowerCase() === 'symbol') {\r\n      return this._setSvgAttributes(this._toSvgElement(iconNode));\r\n    }\r\n\r\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\r\n    // the correct nodes, but the SVG content doesn't render. Instead we\r\n    // have to create an empty SVG node using innerHTML and append its content.\r\n    // Elements created using DOMParser.parseFromString have the same problem.\r\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\r\n    const /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\r\n    // Clone the node so we don't remove it from the parent icon set element.\r\n    svg.appendChild(iconNode.cloneNode(true));\r\n\r\n    return this._setSvgAttributes(svg);\r\n  }\n/**\n * Creates a DOM element from the given SVG string.\n * @param {?} str\n * @return {?}\n */\nprivate _svgElementFromString(str: string): SVGElement {\r\n    // TODO: Is there a better way than innerHTML? Renderer doesn't appear to have a method for\r\n    // creating an element from an HTML string.\r\n    const /** @type {?} */ div = document.createElement('DIV');\r\n    div.innerHTML = str;\r\n    const /** @type {?} */ svg = /** @type {?} */(( div.querySelector('svg') as SVGElement));\r\n    if (!svg) {\r\n      throw new Error('<svg> tag not found');\r\n    }\r\n    return svg;\r\n  }\n/**\n * Converts an element into an SVG node by cloning all of its children.\n * @param {?} element\n * @return {?}\n */\nprivate _toSvgElement(element: Element): SVGElement {\r\n    let /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\r\n\r\n    for (let /** @type {?} */ i = 0; i < element.childNodes.length; i++) {\r\n      if (element.childNodes[i].nodeType === Node.ELEMENT_NODE) {\r\n        svg.appendChild(element.childNodes[i].cloneNode(true));\r\n      }\r\n    }\r\n\r\n    return svg;\r\n  }\n/**\n * Sets the default attributes for an SVG element to be used as an icon.\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgAttributes(svg: SVGElement): SVGElement {\r\n    if (!svg.getAttribute('xmlns')) {\r\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\r\n    }\r\n    svg.setAttribute('fit', '');\r\n    svg.setAttribute('height', '100%');\r\n    svg.setAttribute('width', '100%');\r\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\r\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\r\n    return svg;\r\n  }\n/**\n * Returns an Observable which produces the string contents of the given URL. Results may be\rcached, so future calls with the same URL may not cause another HTTP request.\n * @param {?} safeUrl\n * @return {?}\n */\nprivate _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\r\n    if (!this._http) {\r\n      throw getMdIconNoHttpProviderError();\r\n    }\r\n\r\n    const /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\r\n\r\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\r\n    // already a request in progress for that URL. It's necessary to call share() on the\r\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\r\n    if (this._inProgressUrlFetches.has(url)) {\r\n      return this._inProgressUrlFetches.get(url);\r\n    }\r\n\r\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\r\n    // Observable. Figure out why and fix it.\r\n    const /** @type {?} */ req = /** @type {?} */(( <Observable<string>> this._http.get(url)\r\n        .map(response => response.text())\r\n        .finally(() => {\r\n          this._inProgressUrlFetches.delete(url);\r\n        })\r\n        .share()));\r\n    this._inProgressUrlFetches.set(url, req);\r\n    return req;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, decorators: [{ type: Optional }, ]},\n{type: DomSanitizer, },\n];\n}\n\nfunction MdIconRegistry_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconRegistry.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconRegistry.ctorParameters;\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n * @type {?}\n */\nMdIconRegistry.prototype._svgIconConfigs;\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\rMultiple icon sets can be registered under the same namespace.\n * @type {?}\n */\nMdIconRegistry.prototype._iconSetConfigs;\n/**\n * Cache for icons loaded by direct URLs.\n * @type {?}\n */\nMdIconRegistry.prototype._cachedIconsByUrl;\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n * @type {?}\n */\nMdIconRegistry.prototype._inProgressUrlFetches;\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n * @type {?}\n */\nMdIconRegistry.prototype._fontCssClassesByAlias;\n/**\n * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.\rThe default 'material-icons' value assumes that the material icon font has been loaded as\rdescribed at http://google.github.io/material-design-icons/#icon-font-for-the-web\n * @type {?}\n */\nMdIconRegistry.prototype._defaultFontSetClass;\n/** @type {?} */\nMdIconRegistry.prototype._http;\n/** @type {?} */\nMdIconRegistry.prototype._sanitizer;\n}\n\n/**\n * @param {?} parentRegistry\n * @param {?} http\n * @param {?} sanitizer\n * @return {?}\n */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\r\n    parentRegistry: MdIconRegistry, http: Http, sanitizer: DomSanitizer) {\r\n  return parentRegistry || new MdIconRegistry(http, sanitizer);\r\n}\r\n\r\nexport const /** @type {?} */ ICON_REGISTRY_PROVIDER = {\r\n  // If there is already an MdIconRegistry available, use that. Otherwise, provide a new one.\r\n  provide: MdIconRegistry,\r\n  deps: [[new Optional(), new SkipSelf(), MdIconRegistry], [new Optional(), Http], DomSanitizer],\r\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\r\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg: SVGElement): SVGElement {\r\n  return /** @type {?} */(( svg.cloneNode(true) as SVGElement));\r\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\nfunction iconKey(namespace: string, name: string) {\r\n  return namespace + ':' + name;\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {MdChipList} from './chip-list';\nimport {MdChip} from './chip';\nexport class MdChipsModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [],\n  exports: [MdChipList, MdChip],\n  declarations: [MdChipList, MdChip]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdChipsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipsModule.ctorParameters;\n}\n\n\n\nexport {MdChipList} from './chip-list';\nexport {MdChipEvent,MdChip} from './chip';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Input,\n  QueryList,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\n\nimport {MdChip} from './chip';\nimport {FocusKeyManager} from '../core/a11y/focus-key-manager';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\nimport {SPACE, LEFT_ARROW, RIGHT_ARROW, TAB} from '../core/keyboard/keycodes';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n * \n * Example:\n * \n *     <md-chip-list>\n *       <md-chip>Chip 1<md-chip>\n *       <md-chip>Chip 2<md-chip>\n *     </md-chip-list>\n */\nexport class MdChipList implements AfterContentInit, OnDestroy {\n/**\n * Track which chips we're listening to for focus/destruction.\n */\nprivate _subscribed: WeakMap<MdChip, boolean> = new WeakMap();\n/**\n * Subscription to tabbing out from the chip list.\n */\nprivate _tabOutSubscription: Subscription;\n/**\n * Whether or not the chip is selectable.\n */\nprotected _selectable: boolean = true;\n/**\n * The FocusKeyManager which handles focus.\n */\n_keyManager: FocusKeyManager;\n/**\n * The chip components contained within this chip list.\n */\nchips: QueryList<MdChip>;\n/**\n * Tab index for the chip list.\n */\n_tabIndex = 0;\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager(this.chips).withWrap();\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = 0);\n    });\n\n    // Go ahead and subscribe all of the initial chips\n    this._subscribeChips(this.chips);\n\n    // When the list changes, re-subscribe\n    this.chips.changes.subscribe((chips: QueryList<MdChip>) => {\n      this._subscribeChips(chips);\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    if (this._tabOutSubscription) {\n      this._tabOutSubscription.unsubscribe();\n    }\n  }\n/**\n * Whether or not this chip is selectable. When a chip is not selectable,\n * it's selected state is always ignored.\n * @return {?}\n */\nget selectable(): boolean { return this._selectable; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n/**\n * Programmatically focus the chip list. This in turn focuses the first\n * non-disabled chip in this chip list.\n * @return {?}\n */\nfocus() {\n    // TODO: ARIA says this should focus the first `selected` chip.\n    this._keyManager.setFirstItemActive();\n  }\n/**\n * Passes relevant key presses to our key manager.\n * @param {?} event\n * @return {?}\n */\n_keydown(event: KeyboardEvent) {\n    let /** @type {?} */ target = /** @type {?} */(( event.target as HTMLElement));\n\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager\n    if (target && target.classList.contains('mat-chip')) {\n      switch (event.keyCode) {\n        case SPACE:\n          // If we are selectable, toggle the focused chip\n          if (this.selectable) {\n            this._toggleSelectOnFocusedChip();\n          }\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n          break;\n        case LEFT_ARROW:\n          this._keyManager.setPreviousItemActive();\n          event.preventDefault();\n          break;\n        case RIGHT_ARROW:\n          this._keyManager.setNextItemActive();\n          event.preventDefault();\n          break;\n        default:\n          this._keyManager.onKeydown(event);\n      }\n    }\n  }\n/**\n * Toggles the selected state of the currently focused chip.\n * @return {?}\n */\nprotected _toggleSelectOnFocusedChip(): void {\n    // Allow disabling of chip selection\n    if (!this.selectable) {\n      return;\n    }\n\n    let /** @type {?} */ focusedIndex = this._keyManager.activeItemIndex;\n\n    if (this._isValidIndex(focusedIndex)) {\n      let /** @type {?} */ focusedChip: MdChip = this.chips.toArray()[focusedIndex];\n\n      if (focusedChip) {\n        focusedChip.toggleSelected();\n      }\n    }\n  }\n/**\n * Iterate through the list of chips and add them to our list of\n * subscribed chips.\n * \n * @param {?} chips The list of chips to be subscribed.\n * @return {?}\n */\nprotected _subscribeChips(chips: QueryList<MdChip>): void {\n    chips.forEach(chip => this._addChip(chip));\n  }\n/**\n * Add a specific chip to our subscribed list. If the chip has\n * already been subscribed, this ensures it is only subscribed\n * once.\n * \n * @param {?} chip The chip to be subscribed (or checked for existing\n * subscription).\n * @return {?}\n */\nprotected _addChip(chip: MdChip) {\n    // If we've already been subscribed to a parent, do nothing\n    if (this._subscribed.has(chip)) {\n      return;\n    }\n\n    // Watch for focus events outside of the keyboard navigation\n    chip.onFocus.subscribe(() => {\n      let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n    });\n\n    // On destroy, remove the item from our list, and check focus\n    chip.destroy.subscribe(() => {\n      let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        // Check whether the chip is the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n\n      this._subscribed.delete(chip);\n      chip.destroy.unsubscribe();\n    });\n\n    this._subscribed.set(chip, true);\n  }\n/**\n * Utility to ensure all indexes are valid.\n * \n * @param {?} index The index to be checked.\n * @return {?} True if the index is valid for our list of chips.\n */\nprivate _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-chip-list, mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  host: {\n    // Properties\n    '[attr.tabindex]': '_tabIndex',\n    'role': 'listbox',\n    '[class.mat-chip-list]': 'true',\n\n    // Events\n    '(focus)': 'focus()',\n    '(keydown)': '_keydown($event)'\n  },\n  queries: {\n    chips: new ContentChildren(MdChip)\n  },\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'selectable': [{ type: Input },],\n};\n}\n\nfunction MdChipList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipList.ctorParameters;\n/** @type {?} */\nMdChipList.propDecorators;\n/**\n * Track which chips we're listening to for focus/destruction.\n * @type {?}\n */\nMdChipList.prototype._subscribed;\n/**\n * Subscription to tabbing out from the chip list.\n * @type {?}\n */\nMdChipList.prototype._tabOutSubscription;\n/**\n * Whether or not the chip is selectable.\n * @type {?}\n */\nMdChipList.prototype._selectable;\n/**\n * The FocusKeyManager which handles focus.\n * @type {?}\n */\nMdChipList.prototype._keyManager;\n/**\n * The chip components contained within this chip list.\n * @type {?}\n */\nMdChipList.prototype.chips;\n/**\n * Tab index for the chip list.\n * @type {?}\n */\nMdChipList.prototype._tabIndex;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\n\nimport {Focusable} from '../core/a11y/focus-key-manager';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\n\nexport interface MdChipEvent {\n  chip: MdChip;\n}\n/**\n * Material design styled Chip component. Used inside the MdChipList component.\n */\nexport class MdChip implements Focusable, OnInit, OnDestroy {\n/**\n * Whether or not the chip is disabled. Disabled chips cannot be focused.\n */\nprotected _disabled: boolean = null;\n/**\n * Whether or not the chip is selected.\n */\nprotected _selected: boolean = false;\n/**\n * The palette color of selected chips.\n */\nprotected _color: string = 'primary';\n/**\n * Emitted when the chip is focused.\n */\nonFocus = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is selected.\n */\nselect = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is deselected.\n */\ndeselect = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is destroyed.\n */\ndestroy = new EventEmitter<MdChipEvent>();\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(protected _renderer: Renderer2, protected _elementRef: ElementRef) { }\n/**\n * @return {?}\n */\nngOnInit(): void {\n    this._addDefaultCSSClass();\n    this._updateColor(this._color);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this.destroy.emit({chip: this});\n  }\n/**\n * Whether or not the chip is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled;\n  }\n/**\n * Sets the disabled state of the chip.\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value) ? true : null;\n  }\n/**\n * A String representation of the current disabled state.\n * @return {?}\n */\nget _isAriaDisabled(): string {\n    return String(coerceBooleanProperty(this.disabled));\n  }\n/**\n * Whether or not this chip is selected.\n * @return {?}\n */\nget selected(): boolean {\n    return this._selected;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n\n    if (this._selected) {\n      this.select.emit({chip: this});\n    } else {\n      this.deselect.emit({chip: this});\n    }\n  }\n/**\n * Toggles the current selected state of this chip.\n * @return {?} Whether the chip is selected.\n */\ntoggleSelected(): boolean {\n    this.selected = !this.selected;\n    return this.selected;\n  }\n/**\n * The color of the chip. Can be `primary`, `accent`, or `warn`.\n * @return {?}\n */\nget color(): string {\n    return this._color;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) {\n    this._updateColor(value);\n  }\n/**\n * Allows for programmatic focusing of the chip.\n * @return {?}\n */\nfocus(): void {\n    this._elementRef.nativeElement.focus();\n    this.onFocus.emit({chip: this});\n  }\n/**\n * Ensures events fire properly upon click.\n * @param {?} event\n * @return {?}\n */\n_handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    } else {\n      this.focus();\n    }\n  }\n/**\n * Initializes the appropriate CSS classes based on the chip type (basic or standard).\n * @return {?}\n */\nprivate _addDefaultCSSClass() {\n    let /** @type {?} */ el: HTMLElement = this._elementRef.nativeElement;\n\n    // Always add the `mat-chip` class\n    this._renderer.addClass(el, 'mat-chip');\n\n    // If we are a basic chip, also add the `mat-basic-chip` class for :not() targeting\n    if (el.nodeName.toLowerCase() == 'mat-basic-chip' || el.hasAttribute('mat-basic-chip') ||\n        el.nodeName.toLowerCase() == 'md-basic-chip' || el.hasAttribute('md-basic-chip')) {\n      this._renderer.addClass(el, 'mat-basic-chip');\n    }\n  }\n/**\n * Updates the private _color variable and the native element.\n * @param {?} newColor\n * @return {?}\n */\nprivate _updateColor(newColor: string) {\n    this._setElementColor(this._color, false);\n    this._setElementColor(newColor, true);\n    this._color = newColor;\n  }\n/**\n * Sets the mat-color on the native element.\n * @param {?} color\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setElementColor(color: string, isAdd: boolean) {\n    if (color != null && color != '') {\n      if (isAdd) {\n        this._renderer.addClass(this._elementRef.nativeElement, `mat-${color}`);\n      } else {\n        this._renderer.removeClass(this._elementRef.nativeElement, `mat-${color}`);\n      }\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: `md-basic-chip, [md-basic-chip], md-chip, [md-chip],\n             mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  template: `<ng-content></ng-content>`,\n  host: {\n    '[class.mat-chip]': 'true',\n    'tabindex': '-1',\n    'role': 'option',\n\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled',\n    '[attr.aria-disabled]': '_isAriaDisabled',\n\n    '(click)': '_handleClick($event)'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'select': [{ type: Output },],\n'deselect': [{ type: Output },],\n'destroy': [{ type: Output },],\n'disabled': [{ type: Input },],\n'selected': [{ type: Input },],\n'color': [{ type: Input },],\n};\n}\n\nfunction MdChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChip.ctorParameters;\n/** @type {?} */\nMdChip.propDecorators;\n/**\n * Whether or not the chip is disabled. Disabled chips cannot be focused.\n * @type {?}\n */\nMdChip.prototype._disabled;\n/**\n * Whether or not the chip is selected.\n * @type {?}\n */\nMdChip.prototype._selected;\n/**\n * The palette color of selected chips.\n * @type {?}\n */\nMdChip.prototype._color;\n/**\n * Emitted when the chip is focused.\n * @type {?}\n */\nMdChip.prototype.onFocus;\n/**\n * Emitted when the chip is selected.\n * @type {?}\n */\nMdChip.prototype.select;\n/**\n * Emitted when the chip is deselected.\n * @type {?}\n */\nMdChip.prototype.deselect;\n/**\n * Emitted when the chip is destroyed.\n * @type {?}\n */\nMdChip.prototype.destroy;\n/** @type {?} */\nMdChip.prototype._renderer;\n/** @type {?} */\nMdChip.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {MdCommonModule} from '../core';\nimport {\n  MdCard,\n  MdCardHeader,\n  MdCardTitleGroup,\n  MdCardContent,\n  MdCardTitle,\n  MdCardSubtitle,\n  MdCardActions,\n  MdCardFooter,\n  MdCardSmImage,\n  MdCardMdImage,\n  MdCardLgImage,\n  MdCardImage,\n  MdCardXlImage,\n  MdCardAvatar,\n} from './card';\nexport class MdCardModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [\n    MdCard,\n    MdCardHeader,\n    MdCardTitleGroup,\n    MdCardContent,\n    MdCardTitle,\n    MdCardSubtitle,\n    MdCardActions,\n    MdCardFooter,\n    MdCardSmImage,\n    MdCardMdImage,\n    MdCardLgImage,\n    MdCardImage,\n    MdCardXlImage,\n    MdCardAvatar,\n    MdCommonModule,\n  ],\n  declarations: [\n    MdCard, MdCardHeader, MdCardTitleGroup, MdCardContent, MdCardTitle, MdCardSubtitle,\n    MdCardActions, MdCardFooter, MdCardSmImage, MdCardMdImage, MdCardLgImage, MdCardImage,\n    MdCardXlImage, MdCardAvatar,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardModule.ctorParameters;\n}\n\n\n\nexport {MdCardContent,MdCardTitle,MdCardSubtitle,MdCardActions,MdCardFooter,MdCardSmImage,MdCardMdImage,MdCardLgImage,MdCardImage,MdCardXlImage,MdCardAvatar,MdCard,MdCardHeader,MdCardTitleGroup} from './card';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive\n} from '@angular/core';\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardContent {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-content, mat-card-content',\n  host: {\n    '[class.mat-card-content]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardContent.ctorParameters;\n}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardTitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-title, mat-card-title, [md-card-title], [mat-card-title]',\n  host: {\n    '[class.mat-card-title]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardTitle.ctorParameters;\n}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardSubtitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-subtitle, mat-card-subtitle, [md-card-subtitle], [mat-card-subtitle]',\n  host: {\n    '[class.mat-card-subtitle]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardSubtitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardSubtitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardSubtitle.ctorParameters;\n}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardActions {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-actions, mat-card-actions',\n  host: {\n    '[class.mat-card-actions]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardActions.ctorParameters;\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardFooter {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-footer, mat-card-footer',\n  host: {\n    '[class.mat-card-footer]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardFooter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardFooter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardFooter.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardSmImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-sm-image], [mat-card-sm-image]',\n  host: {\n    '[class.mat-card-sm-image]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardSmImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardSmImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardSmImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardMdImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-md-image], [mat-card-md-image]',\n  host: {\n    '[class.mat-card-md-image]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardMdImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardMdImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardMdImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardLgImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-lg-image], [mat-card-lg-image]',\n  host: {\n    'class.mat-card-lg-image': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardLgImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardLgImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardLgImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-image], [mat-card-image]',\n  host: {\n    '[class.mat-card-image]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardImage.ctorParameters;\n}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardXlImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-xl-image], [mat-card-xl-image]',\n  host: {\n    '[class.mat-card-xl-image]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardXlImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardXlImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardXlImage.ctorParameters;\n}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardAvatar {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-avatar], [mat-card-avatar]',\n  host: {\n    '[class.mat-card-avatar]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardAvatar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardAvatar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardAvatar.ctorParameters;\n}\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n * \n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - md-card-title\n * - md-card-subtitle\n * - md-card-content\n * - md-card-actions\n * - md-card-footer\n */\nexport class MdCard {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card, mat-card',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-card]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCard_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCard.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCard.ctorParameters;\n}\n\n/**\n * Component intended to be used within the `<md-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * \\@docs-private\n */\nexport class MdCardHeader {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card-header, mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-card-header]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardHeader.ctorParameters;\n}\n\n/**\n * Component intended to be used within the <md-card> component. It adds styles for a preset\n * layout that groups an image with a title section.\n * \\@docs-private\n */\nexport class MdCardTitleGroup {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card-title-group, mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-card-title-group]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardTitleGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardTitleGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardTitleGroup.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {MdLineModule, MdCommonModule} from '../core';\nimport {\n  MdGridTile, MdGridTileText, MdGridTileFooterCssMatStyler,\n  MdGridTileHeaderCssMatStyler, MdGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MdGridList} from './grid-list';\nexport class MdGridListModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdLineModule, MdCommonModule],\n  exports: [\n    MdGridList,\n    MdGridTile,\n    MdGridTileText,\n    MdLineModule,\n    MdCommonModule,\n    MdGridTileHeaderCssMatStyler,\n    MdGridTileFooterCssMatStyler,\n    MdGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MdGridList,\n    MdGridTile,\n    MdGridTileText,\n    MdGridTileHeaderCssMatStyler,\n    MdGridTileFooterCssMatStyler,\n    MdGridAvatarCssMatStyler\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridListModule.ctorParameters;\n}\n\n\n\nexport {MdGridList} from './grid-list';\nexport {MdGridTile} from './grid-tile';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  Renderer2,\n  ElementRef,\n  Optional,\n} from '@angular/core';\nimport {MdGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Dir} from '../core';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst /** @type {?} */ MD_FIT_MODE = 'fit';\nexport class MdGridList implements OnInit, AfterContentChecked {\n/**\n * Number of columns being rendered.\n */\nprivate _cols: number;\n/**\n * Row height value passed in by user. This can be one of three types:\n * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n */\nprivate _rowHeight: string;\n/**\n * The amount of space between tiles. This will be something like '5px' or '2em'.\n */\nprivate _gutter: string = '1px';\n/**\n * Sets position and size styles for a tile\n */\nprivate _tileStyler: TileStyler;\n/**\n * Query list of tiles that are being rendered.\n */\n_tiles: QueryList<MdGridTile>;\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _dir\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _dir: Dir) {}\n/**\n * Amount of columns in the grid list.\n * @return {?}\n */\nget cols() { return this._cols; }\n/**\n * @param {?} value\n * @return {?}\n */\nset cols(value: any) { this._cols = coerceToNumber(value); }\n/**\n * Size of the grid list's gutter in pixels.\n * @return {?}\n */\nget gutterSize() { return this._gutter; }\n/**\n * @param {?} value\n * @return {?}\n */\nset gutterSize(value: any) { this._gutter = coerceToString(value); }\n/**\n * Set internal representation of row height from the user-provided value.\n * @param {?} value\n * @return {?}\n */\nset rowHeight(value: string | number) {\n    this._rowHeight = coerceToString(value);\n    this._setTileStyler();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n/**\n * The layout calculation is fairly cheap if nothing changes, so there's little cost\n * to run it frequently.\n * @return {?}\n */\nngAfterContentChecked() {\n    this._layoutTiles();\n  }\n/**\n * Throw a friendly error if cols property is missing\n * @return {?}\n */\nprivate _checkCols() {\n    if (!this.cols) {\n      throw new Error(`md-grid-list: must pass in number of columns. ` +\n                      `Example: <md-grid-list cols=\"3\">`);\n    }\n  }\n/**\n * Default to equal width:height if rowHeight property is missing\n * @return {?}\n */\nprivate _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._tileStyler = new RatioTileStyler('1:1');\n    }\n  }\n/**\n * Creates correct Tile Styler subtype based on rowHeight passed in by user\n * @return {?}\n */\nprivate _setTileStyler(): void {\n    if (this._rowHeight === MD_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (this._rowHeight && this._rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(this._rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(this._rowHeight);\n    }\n  }\n/**\n * Computes and applies the size and position for all children grid tiles.\n * @return {?}\n */\nprivate _layoutTiles(): void {\n    let /** @type {?} */ tracker = new TileCoordinator(this.cols, this._tiles);\n    let /** @type {?} */ direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      let /** @type {?} */ pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n/**\n * Sets style on the main grid-list element, given the style name and value.\n * @param {?} style\n * @return {?}\n */\n_setListStyle(style: [string, string]): void {\n    if (style) {\n      this._renderer.setStyle(this._element.nativeElement, style[0], style[1]);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-list, mat-grid-list',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'role': 'list',\n    '[class.mat-grid-list]': 'true',\n  },\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_tiles': [{ type: ContentChildren, args: [MdGridTile, ] },],\n'cols': [{ type: Input },],\n'gutterSize': [{ type: Input },],\n'rowHeight': [{ type: Input },],\n};\n}\n\nfunction MdGridList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridList.ctorParameters;\n/** @type {?} */\nMdGridList.propDecorators;\n/**\n * Number of columns being rendered.\n * @type {?}\n */\nMdGridList.prototype._cols;\n/**\n * Row height value passed in by user. This can be one of three types:\n * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n * @type {?}\n */\nMdGridList.prototype._rowHeight;\n/**\n * The amount of space between tiles. This will be something like '5px' or '2em'.\n * @type {?}\n */\nMdGridList.prototype._gutter;\n/**\n * Sets position and size styles for a tile\n * @type {?}\n */\nMdGridList.prototype._tileStyler;\n/**\n * Query list of tiles that are being rendered.\n * @type {?}\n */\nMdGridList.prototype._tiles;\n/** @type {?} */\nMdGridList.prototype._renderer;\n/** @type {?} */\nMdGridList.prototype._element;\n/** @type {?} */\nMdGridList.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {MdGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n */\nexport class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n/**\n * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n * because these properties haven't been calculated by that point.\n * \n * @param {?} gutterSize Size of the grid's gutter.\n * @param {?} tracker Instance of the TileCoordinator.\n * @param {?} cols Amount of columns in the grid.\n * @param {?} direction Layout direction of the grid.\n * @return {?}\n */\ninit(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n/**\n * Computes the amount of space a single 1x1 tile would take up (width or height).\n * Used as a basis for other calculations.\n * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n */\ngetBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - ( ${this._gutterSize} * ${gutterFraction} ))`;\n  }\n/**\n * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n * @param {?} offset Number of tiles that have already been rendered in the row/column.\n * @return {?} Position of the tile as a CSS calc() expression.\n */\ngetTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n/**\n * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n * @param {?} span The tile's rowspan or colspan.\n * @return {?} Size of the tile as a CSS calc() expression.\n */\ngetTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n/**\n * Sets the style properties to be applied to a tile for the given row and column index.\n * @param {?} tile Tile to which to apply the styling.\n * @param {?} rowIndex Index of the tile's row.\n * @param {?} colIndex Index of the tile's column.\n * @return {?}\n */\nsetStyle(tile: MdGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let /** @type {?} */ percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let /** @type {?} */ gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n/**\n * Sets the horizontal placement of the tile in the list.\n * @param {?} tile\n * @param {?} colIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetColStyles(tile: MdGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let /** @type {?} */ baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let /** @type {?} */ side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n/**\n * Calculates the total size taken up by gutters across one axis of a list.\n * @return {?}\n */\ngetGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n/**\n * Calculates the total size taken up by tiles across one axis of a list.\n * @param {?} tileHeight Height of the tile.\n * @return {?}\n */\ngetTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n/**\n * Sets the vertical placement of the tile in the list.\n * This method will be implemented by each type of TileStyler.\n * \\@docs-private\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number, gutterWidth: number) {}\n/**\n * Calculates the computed height and returns the correct style property to set.\n * This method will be implemented by each type of TileStyler.\n * \\@docs-private\n * @return {?}\n */\ngetComputedHeight(): [string, string] { return null; }\n}\n\nfunction TileStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nTileStyler.prototype._gutterSize;\n/** @type {?} */\nTileStyler.prototype._rows;\n/** @type {?} */\nTileStyler.prototype._rowspan;\n/** @type {?} */\nTileStyler.prototype._cols;\n/** @type {?} */\nTileStyler.prototype._direction;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example <md-grid-list cols=\"3\" rowHeight=\"100px\">\n * \\@docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n/**\n * @param {?} fixedRowHeight\n */\nconstructor(public fixedRowHeight: string) { super(); }\n/**\n * @param {?} gutterSize\n * @param {?} tracker\n * @param {?} cols\n * @param {?} direction\n * @return {?}\n */\ninit(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n/**\n * @return {?}\n */\ngetComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n}\n\nfunction FixedTileStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nFixedTileStyler.prototype.fixedRowHeight;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example <md-grid-list cols=\"3\" rowHeight=\"3:1\">\n * \\@docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n/**\n * Ratio width:height given by user to determine row height.\n */\nrowHeightRatio: number;\n  baseTileHeight: string;\n/**\n * @param {?} value\n */\nconstructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let /** @type {?} */ percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use paddingTop and marginTop to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n/**\n * @return {?}\n */\ngetComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _parseRatio(value: string): void {\n    let /** @type {?} */ ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw new Error(`md-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\nfunction RatioTileStyler_tsickle_Closure_declarations() {\n/**\n * Ratio width:height given by user to determine row height.\n * @type {?}\n */\nRatioTileStyler.prototype.rowHeightRatio;\n/** @type {?} */\nRatioTileStyler.prototype.baseTileHeight;\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example <md-grid-list cols=\"3\" rowHeight=\"fit\">\n * \n * \\@docs-private\n */\nexport class FitTileStyler extends TileStyler {\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let /** @type {?} */ percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let /** @type {?} */ gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let /** @type {?} */ baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n}\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","import {QueryList} from '@angular/core';\nimport {MdGridTile} from './grid-tile';\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n * \n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n * \n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n * \n * \\@docs-private\n */\nexport class TileCoordinator {\n/**\n * Tracking array (see class description).\n */\ntracker: number[];\n/**\n * Index at which the search for the next gap will start.\n */\ncolumnIndex: number = 0;\n/**\n * The current row index.\n */\nrowIndex: number = 0;\n/**\n * Gets the total number of rows occupied by tiles\n * @return {?}\n */\nget rowCount(): number { return this.rowIndex + 1; }\n/**\n * Gets the total span of rows occupied by tiles.\n * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n * @return {?}\n */\nget rowspan() {\n    let /** @type {?} */ lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n/**\n * The computed (row, col) position of each tile (the output).\n */\npositions: TilePosition[];\n/**\n * @param {?} numColumns\n * @param {?} tiles\n */\nconstructor(numColumns: number, tiles: QueryList<MdGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n/**\n * Calculates the row and col position of a tile.\n * @param {?} tile\n * @return {?}\n */\nprivate _trackTile(tile: MdGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let /** @type {?} */ gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n/**\n * Finds the next available space large enough to fit the tile.\n * @param {?} tileCols\n * @return {?}\n */\nprivate _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw new Error(`md-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let /** @type {?} */ gapStartIndex = -1;\n    let /** @type {?} */ gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n    return gapStartIndex;\n  }\n/**\n * Move \"down\" to the next row.\n * @return {?}\n */\nprivate _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let /** @type {?} */ i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n/**\n * Finds the end index (exclusive) of a gap given the index from which to start looking.\n * The gap ends when a non-zero value is found.\n * @param {?} gapStartIndex\n * @return {?}\n */\nprivate _findGapEndIndex(gapStartIndex: number): number {\n    for (let /** @type {?} */ i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n/**\n * Update the tile tracker to account for the given tile in the given space.\n * @param {?} start\n * @param {?} tile\n * @return {?}\n */\nprivate _markTilePosition(start: number, tile: MdGridTile): void {\n    for (let /** @type {?} */ i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\nfunction TileCoordinator_tsickle_Closure_declarations() {\n/**\n * Tracking array (see class description).\n * @type {?}\n */\nTileCoordinator.prototype.tracker;\n/**\n * Index at which the search for the next gap will start.\n * @type {?}\n */\nTileCoordinator.prototype.columnIndex;\n/**\n * The current row index.\n * @type {?}\n */\nTileCoordinator.prototype.rowIndex;\n/**\n * The computed (row, col) position of each tile (the output).\n * @type {?}\n */\nTileCoordinator.prototype.positions;\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\nexport class TilePosition {\n/**\n * @param {?} row\n * @param {?} col\n */\nconstructor(public row: number,\npublic col: number) {}\n}\n\nfunction TilePosition_tsickle_Closure_declarations() {\n/** @type {?} */\nTilePosition.prototype.row;\n/** @type {?} */\nTilePosition.prototype.col;\n}\n\n","import {\n  Component,\n  ViewEncapsulation,\n  Renderer2,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit, Directive\n} from '@angular/core';\nimport {MdLine, MdLineSetter} from '../core';\nimport {coerceToNumber} from './grid-list-measure';\nexport class MdGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n/**\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef) {}\n/**\n * Amount of rows that the grid tile takes up.\n * @return {?}\n */\nget rowspan() { return this._rowspan; }\n/**\n * @param {?} value\n * @return {?}\n */\nset rowspan(value) { this._rowspan = coerceToNumber(value); }\n/**\n * Amount of columns that the grid tile takes up.\n * @return {?}\n */\nget colspan() { return this._colspan; }\n/**\n * @param {?} value\n * @return {?}\n */\nset colspan(value) { this._colspan = coerceToNumber(value); }\n/**\n * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n * \"Changed after checked\" errors that would occur with HostBinding.\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\n_setStyle(property: string, value: string): void {\n    this._renderer.setStyle(this._element.nativeElement, property, value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-tile, mat-grid-tile',\n  host: {\n    'role': 'listitem',\n    '[class.mat-grid-tile]': 'true',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'rowspan': [{ type: Input },],\n'colspan': [{ type: Input },],\n};\n}\n\nfunction MdGridTile_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTile.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTile.ctorParameters;\n/** @type {?} */\nMdGridTile.propDecorators;\n/** @type {?} */\nMdGridTile.prototype._rowspan;\n/** @type {?} */\nMdGridTile.prototype._colspan;\n/** @type {?} */\nMdGridTile.prototype._renderer;\n/** @type {?} */\nMdGridTile.prototype._element;\n}\n\nexport class MdGridTileText implements AfterContentInit {\n/**\n *  Helper that watches the number of lines in a text area and sets\n * a class on the host element that matches the line count.\n */\n_lineSetter: MdLineSetter;\n   _lines: QueryList<MdLine>;\n/**\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef) {}\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-tile-header, mat-grid-tile-header, md-grid-tile-footer, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_lines': [{ type: ContentChildren, args: [MdLine, ] },],\n};\n}\n\nfunction MdGridTileText_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileText.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileText.ctorParameters;\n/** @type {?} */\nMdGridTileText.propDecorators;\n/**\n *  Helper that watches the number of lines in a text area and sets\n * a class on the host element that matches the line count.\n * @type {?}\n */\nMdGridTileText.prototype._lineSetter;\n/** @type {?} */\nMdGridTileText.prototype._lines;\n/** @type {?} */\nMdGridTileText.prototype._renderer;\n/** @type {?} */\nMdGridTileText.prototype._element;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridAvatarCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-grid-avatar], [mat-grid-avatar]',\n  host: {\n    '[class.mat-grid-avatar]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridAvatarCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridAvatarCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridAvatarCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridTileHeaderCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-grid-tile-header, mat-grid-tile-header',\n  host: {\n    '[class.mat-grid-tile-header]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridTileHeaderCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileHeaderCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileHeaderCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridTileFooterCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-grid-tile-footer, mat-grid-tile-footer',\n  host: {\n    '[class.mat-grid-tile-footer]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridTileFooterCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileFooterCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileFooterCssMatStyler.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Converts values into strings. Falsy values become empty strings.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n/**\n * Converts a value that might be a string into a number.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","import {NgModule} from '@angular/core';\nimport {MdLineModule, MdRippleModule, MdCommonModule} from '../core';\nimport {\n  MdList,\n  MdListItem,\n  MdListDivider,\n  MdListAvatarCssMatStyler,\n  MdListIconCssMatStyler,\n  MdListCssMatStyler,\n  MdNavListCssMatStyler,\n  MdDividerCssMatStyler,\n  MdListSubheaderCssMatStyler,\n} from './list';\nexport class MdListModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdLineModule, MdRippleModule, MdCommonModule],\n  exports: [\n    MdList,\n    MdListItem,\n    MdListDivider,\n    MdListAvatarCssMatStyler,\n    MdLineModule,\n    MdCommonModule,\n    MdListIconCssMatStyler,\n    MdListCssMatStyler,\n    MdNavListCssMatStyler,\n    MdDividerCssMatStyler,\n    MdListSubheaderCssMatStyler,\n  ],\n  declarations: [\n    MdList,\n    MdListItem,\n    MdListDivider,\n    MdListAvatarCssMatStyler,\n    MdListIconCssMatStyler,\n    MdListCssMatStyler,\n    MdNavListCssMatStyler,\n    MdDividerCssMatStyler,\n    MdListSubheaderCssMatStyler,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListModule.ctorParameters;\n}\n\n\n\nexport {MdListDivider,MdList,MdListCssMatStyler,MdNavListCssMatStyler,MdDividerCssMatStyler,MdListAvatarCssMatStyler,MdListIconCssMatStyler,MdListSubheaderCssMatStyler,MdListItem} from './list';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  Optional,\n  QueryList,\n  Renderer2,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty, MdLine, MdLineSetter} from '../core';\nexport class MdListDivider {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-divider, mat-divider'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListDivider_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListDivider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListDivider.ctorParameters;\n}\n\nexport class MdList {\nprivate _disableRipple: boolean = false;\n/**\n * Whether the ripple effect should be disabled on the list-items or not.\n * This flag only has an effect for `md-nav-list` components.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) { this._disableRipple = coerceBooleanProperty(value); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-list, mat-list, md-nav-list, mat-nav-list',\n  host: {\n    'role': 'list'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disableRipple': [{ type: Input },],\n};\n}\n\nfunction MdList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdList.ctorParameters;\n/** @type {?} */\nMdList.propDecorators;\n/** @type {?} */\nMdList.prototype._disableRipple;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-list, mat-list',\n  host: {\n    '[class.mat-list]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdNavListCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-nav-list, mat-nav-list',\n  host: {\n    '[class.mat-nav-list]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNavListCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNavListCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNavListCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdDividerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-divider, mat-divider',\n  host: {\n    '[class.mat-divider]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDividerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDividerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDividerCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListAvatarCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-list-avatar], [mat-list-avatar]',\n  host: {\n    '[class.mat-list-avatar]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListAvatarCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListAvatarCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListAvatarCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListIconCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-list-icon], [mat-list-icon]',\n  host: {\n    '[class.mat-list-icon]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListIconCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListIconCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListIconCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListSubheaderCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-subheader], [mat-subheader]',\n  host: {\n    '[class.mat-subheader]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListSubheaderCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListSubheaderCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListSubheaderCssMatStyler.ctorParameters;\n}\n\nexport class MdListItem implements AfterContentInit {\nprivate _lineSetter: MdLineSetter;\nprivate _disableRipple: boolean = false;\nprivate _isNavList: boolean = false;\n/**\n * Whether the ripple effect on click should be disabled. This applies only to list items that are\n * part of a nav list. The value of `disableRipple` on the `md-nav-list` overrides this flag.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) { this._disableRipple = coerceBooleanProperty(value); }\n\n   _lines: QueryList<MdLine>;\n/**\n * @param {?} avatar\n * @return {?}\n */\nset _hasAvatar(avatar: MdListAvatarCssMatStyler) {\n    if (avatar != null) {\n      this._renderer.addClass(this._element.nativeElement, 'mat-list-item-avatar');\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, 'mat-list-item-avatar');\n    }\n  }\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _list\n * @param {?} navList\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _list: MdList,\n               navList: MdNavListCssMatStyler) {\n    this._isNavList = !!navList;\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n  }\n/**\n * Whether this list item should show a ripple effect when clicked.\n * @return {?}\n */\nisRippleEnabled() {\n    return !this.disableRipple && this._isNavList && !this._list.disableRipple;\n  }\n/**\n * @return {?}\n */\n_handleFocus() {\n    this._renderer.addClass(this._element.nativeElement, 'mat-list-item-focus');\n  }\n/**\n * @return {?}\n */\n_handleBlur() {\n    this._renderer.removeClass(this._element.nativeElement, 'mat-list-item-focus');\n  }\n/**\n * Retrieves the DOM element of the component host.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-list-item, mat-list-item, a[md-list-item], a[mat-list-item]',\n  host: {\n    'role': 'listitem',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '[class.mat-list-item]': 'true',\n  },\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: MdList, decorators: [{ type: Optional }, ]},\n{type: MdNavListCssMatStyler, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disableRipple': [{ type: Input },],\n'_lines': [{ type: ContentChildren, args: [MdLine, ] },],\n'_hasAvatar': [{ type: ContentChild, args: [MdListAvatarCssMatStyler, ] },],\n};\n}\n\nfunction MdListItem_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListItem.ctorParameters;\n/** @type {?} */\nMdListItem.propDecorators;\n/** @type {?} */\nMdListItem.prototype._lineSetter;\n/** @type {?} */\nMdListItem.prototype._disableRipple;\n/** @type {?} */\nMdListItem.prototype._isNavList;\n/** @type {?} */\nMdListItem.prototype._lines;\n/** @type {?} */\nMdListItem.prototype._renderer;\n/** @type {?} */\nMdListItem.prototype._element;\n/** @type {?} */\nMdListItem.prototype._list;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule} from '../core';\nimport {A11yModule} from '../core/a11y/index';\nimport {OverlayModule} from '../core/overlay/overlay-directives';\nimport {MdSidenav, MdSidenavContainer} from './sidenav';\nexport class MdSidenavModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdCommonModule, A11yModule, OverlayModule],\n  exports: [MdSidenavContainer, MdSidenav, MdCommonModule],\n  declarations: [MdSidenavContainer, MdSidenav],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSidenavModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavModule.ctorParameters;\n}\n\n\n\nexport {throwMdDuplicatedSidenavError,MdSidenavToggleResult,MdSidenav,MdSidenavContainer} from './sidenav';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Renderer2,\n  ViewEncapsulation,\n  NgZone,\n  OnDestroy,\n} from '@angular/core';\nimport {Dir, coerceBooleanProperty} from '../core';\nimport {FocusTrapFactory, FocusTrap} from '../core/a11y/focus-trap';\nimport {ESCAPE} from '../core/keyboard/keycodes';\nimport'rxjs/add/operator/first';\n/**\n * Throws an exception when two MdSidenav are matching the same side.\n * @param {?} align\n * @return {?}\n */\nexport function throwMdDuplicatedSidenavError(align: string) {\n  throw new Error(`A sidenav was already declared for 'align=\"${align}\"'`);\n}\n/**\n * Sidenav toggle promise result.\n */\nexport class MdSidenavToggleResult {\n/**\n * @param {?} type\n * @param {?} animationFinished\n */\nconstructor(public type: 'open' | 'close',\npublic animationFinished: boolean) {}\n}\n\nfunction MdSidenavToggleResult_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavToggleResult.prototype.type;\n/** @type {?} */\nMdSidenavToggleResult.prototype.animationFinished;\n}\n\n/**\n * <md-sidenav> component.\n * \n * This component corresponds to the drawer of the sidenav.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MdSidenav implements AfterContentInit, OnDestroy {\nprivate _focusTrap: FocusTrap;\n/**\n * Alignment of the sidenav (direction neutral); whether 'start' or 'end'.\n */\nprivate _align: 'start' | 'end' = 'start';\n/**\n * Direction which the sidenav is aligned in.\n * @return {?}\n */\nget align() { return this._align; }\n/**\n * @param {?} value\n * @return {?}\n */\nset align(value) {\n    // Make sure we have a valid value.\n    value = (value == 'end') ? 'end' : 'start';\n    if (value != this._align) {\n      this._align = value;\n      this.onAlignChanged.emit();\n    }\n  }\n/**\n * Mode of the sidenav; one of 'over', 'push' or 'side'.\n */\nmode: 'over' | 'push' | 'side' = 'over';\n/**\n * Whether the sidenav can be closed with the escape key or not.\n * @return {?}\n */\nget disableClose(): boolean { return this._disableClose; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\nprivate _disableClose: boolean = false;\n/**\n * Whether the sidenav is opened.\n */\n_opened: boolean = false;\n/**\n * Event emitted when the sidenav is being opened. Use this to synchronize animations.\n */\nonOpenStart = new EventEmitter<void>();\n/**\n * Event emitted when the sidenav is fully opened.\n */\nonOpen = new EventEmitter<void>();\n/**\n * Event emitted when the sidenav is being closed. Use this to synchronize animations.\n */\nonCloseStart = new EventEmitter<void>();\n/**\n * Event emitted when the sidenav is fully closed.\n */\nonClose = new EventEmitter<void>();\n/**\n * Event emitted when the sidenav alignment changes.\n */\nonAlignChanged = new EventEmitter<void>();\n/**\n * The current toggle animation promise. `null` if no animation is in progress.\n */\nprivate _toggleAnimationPromise: Promise<MdSidenavToggleResult> = null;\n/**\n * The current toggle animation promise resolution function.\n * `null` if no animation is in progress.\n */\nprivate _resolveToggleAnimationPromise: (animationFinished: boolean) => void = null;\n/**\n * @return {?}\n */\nget isFocusTrapEnabled() {\n    // The focus trap is only enabled when the sidenav is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n/**\n * @param {?} _elementRef The DOM element reference. Used for transition and width calculation.\n *     If not available we do not hook on transitions.\n * @param {?} _focusTrapFactory\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory) {\n    this.onOpen.subscribe(() => {\n      this._elementFocusedBeforeSidenavWasOpened = document.activeElement as HTMLElement;\n\n      if (this.isFocusTrapEnabled && this._focusTrap) {\n        this._focusTrap.focusInitialElementWhenReady();\n      }\n    });\n\n    this.onClose.subscribe(() => {\n      if (this._elementFocusedBeforeSidenavWasOpened instanceof HTMLElement) {\n        this._elementFocusedBeforeSidenavWasOpened.focus();\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n\n      this._elementFocusedBeforeSidenavWasOpened = null;\n    });\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this.isFocusTrapEnabled;\n\n    // This can happen when the sidenav is set to opened in\n    // the template and the transition hasn't ended.\n    if (this._toggleAnimationPromise) {\n      this._resolveToggleAnimationPromise(true);\n      this._toggleAnimationPromise = this._resolveToggleAnimationPromise = null;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n/**\n * Whether the sidenav is opened. We overload this because we trigger an event when it\n * starts or end.\n * @return {?}\n */\nget opened(): boolean { return this._opened; }\n/**\n * @param {?} v\n * @return {?}\n */\nset opened(v: boolean) {\n    this.toggle(coerceBooleanProperty(v));\n  }\n/**\n * Open this sidenav, and return a Promise that will resolve when it's fully opened (or get\n * rejected if it didn't).\n * @return {?}\n */\nopen(): Promise<MdSidenavToggleResult> {\n    return this.toggle(true);\n  }\n/**\n * Close this sidenav, and return a Promise that will resolve when it's fully closed (or get\n * rejected if it didn't).\n * @return {?}\n */\nclose(): Promise<MdSidenavToggleResult> {\n    return this.toggle(false);\n  }\n/**\n * Toggle this sidenav. This is equivalent to calling open() when it's already opened, or\n * close() when it's closed.\n * @param {?=} isOpen Whether the sidenav should be open.\n * @return {?} Resolves with the result of whether the sidenav was opened or closed.\n */\ntoggle(isOpen: boolean = !this.opened): Promise<MdSidenavToggleResult> {\n    // Shortcut it if we're already opened.\n    if (isOpen === this.opened) {\n      return this._toggleAnimationPromise ||\n          Promise.resolve(new MdSidenavToggleResult(isOpen ? 'open' : 'close', true));\n    }\n\n    this._opened = isOpen;\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this.isFocusTrapEnabled;\n    }\n\n    if (isOpen) {\n      this.onOpenStart.emit();\n    } else {\n      this.onCloseStart.emit();\n    }\n\n    if (this._toggleAnimationPromise) {\n      this._resolveToggleAnimationPromise(false);\n    }\n    this._toggleAnimationPromise = new Promise<MdSidenavToggleResult>(resolve => {\n      this._resolveToggleAnimationPromise = animationFinished =>\n          resolve(new MdSidenavToggleResult(isOpen ? 'open' : 'close', animationFinished));\n    });\n    return this._toggleAnimationPromise;\n  }\n/**\n * Handles the keyboard events.\n * \\@docs-private\n * @param {?} event\n * @return {?}\n */\nhandleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n/**\n * When transition has finished, set the internal state for classes and emit the proper event.\n * The event passed is actually of type TransitionEvent, but that type is not available in\n * Android so we use any.\n * @param {?} transitionEvent\n * @return {?}\n */\n_onTransitionEnd(transitionEvent: TransitionEvent) {\n    if (transitionEvent.target == this._elementRef.nativeElement\n        // Simpler version to check for prefixes.\n        && transitionEvent.propertyName.endsWith('transform')) {\n      if (this._opened) {\n        this.onOpen.emit();\n      } else {\n        this.onClose.emit();\n      }\n\n      if (this._toggleAnimationPromise) {\n        this._resolveToggleAnimationPromise(true);\n        this._toggleAnimationPromise = this._resolveToggleAnimationPromise = null;\n      }\n    }\n  }\n/**\n * @return {?}\n */\nget _isClosing() {\n    return !this._opened && !!this._toggleAnimationPromise;\n  }\n/**\n * @return {?}\n */\nget _isOpening() {\n    return this._opened && !!this._toggleAnimationPromise;\n  }\n/**\n * @return {?}\n */\nget _isClosed() {\n    return !this._opened && !this._toggleAnimationPromise;\n  }\n/**\n * @return {?}\n */\nget _isOpened() {\n    return this._opened && !this._toggleAnimationPromise;\n  }\n/**\n * @return {?}\n */\nget _isEnd() {\n    return this.align == 'end';\n  }\n/**\n * @return {?}\n */\nget _modeSide() {\n    return this.mode == 'side';\n  }\n/**\n * @return {?}\n */\nget _modeOver() {\n    return this.mode == 'over';\n  }\n/**\n * @return {?}\n */\nget _modePush() {\n    return this.mode == 'push';\n  }\n/**\n * @return {?}\n */\nget _width() {\n    if (this._elementRef.nativeElement) {\n      return this._elementRef.nativeElement.offsetWidth;\n    }\n    return 0;\n  }\nprivate _elementFocusedBeforeSidenavWasOpened: HTMLElement = null;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-sidenav, mat-sidenav',\n  // TODO(mmalerba): move template to separate file.\n  templateUrl: 'sidenav.html',\n  host: {\n    '[class.mat-sidenav]': 'true',\n    '(transitionend)': '_onTransitionEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-sidenav-closed]': '_isClosed',\n    '[class.mat-sidenav-closing]': '_isClosing',\n    '[class.mat-sidenav-end]': '_isEnd',\n    '[class.mat-sidenav-opened]': '_isOpened',\n    '[class.mat-sidenav-opening]': '_isOpening',\n    '[class.mat-sidenav-over]': '_modeOver',\n    '[class.mat-sidenav-push]': '_modePush',\n    '[class.mat-sidenav-side]': '_modeSide',\n    'tabIndex': '-1'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'mode': [{ type: Input },],\n'disableClose': [{ type: Input },],\n'onOpenStart': [{ type: Output, args: ['open-start', ] },],\n'onOpen': [{ type: Output, args: ['open', ] },],\n'onCloseStart': [{ type: Output, args: ['close-start', ] },],\n'onClose': [{ type: Output, args: ['close', ] },],\n'onAlignChanged': [{ type: Output, args: ['align-changed', ] },],\n'opened': [{ type: Input },],\n};\n}\n\nfunction MdSidenav_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenav.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenav.ctorParameters;\n/** @type {?} */\nMdSidenav.propDecorators;\n/** @type {?} */\nMdSidenav.prototype._focusTrap;\n/**\n * Alignment of the sidenav (direction neutral); whether 'start' or 'end'.\n * @type {?}\n */\nMdSidenav.prototype._align;\n/**\n * Mode of the sidenav; one of 'over', 'push' or 'side'.\n * @type {?}\n */\nMdSidenav.prototype.mode;\n/** @type {?} */\nMdSidenav.prototype._disableClose;\n/**\n * Whether the sidenav is opened.\n * @type {?}\n */\nMdSidenav.prototype._opened;\n/**\n * Event emitted when the sidenav is being opened. Use this to synchronize animations.\n * @type {?}\n */\nMdSidenav.prototype.onOpenStart;\n/**\n * Event emitted when the sidenav is fully opened.\n * @type {?}\n */\nMdSidenav.prototype.onOpen;\n/**\n * Event emitted when the sidenav is being closed. Use this to synchronize animations.\n * @type {?}\n */\nMdSidenav.prototype.onCloseStart;\n/**\n * Event emitted when the sidenav is fully closed.\n * @type {?}\n */\nMdSidenav.prototype.onClose;\n/**\n * Event emitted when the sidenav alignment changes.\n * @type {?}\n */\nMdSidenav.prototype.onAlignChanged;\n/**\n * The current toggle animation promise. `null` if no animation is in progress.\n * @type {?}\n */\nMdSidenav.prototype._toggleAnimationPromise;\n/**\n * The current toggle animation promise resolution function.\n * `null` if no animation is in progress.\n * @type {?}\n */\nMdSidenav.prototype._resolveToggleAnimationPromise;\n/** @type {?} */\nMdSidenav.prototype._elementFocusedBeforeSidenavWasOpened;\n/** @type {?} */\nMdSidenav.prototype._elementRef;\n/** @type {?} */\nMdSidenav.prototype._focusTrapFactory;\n}\n\n/**\n * <md-sidenav-container> component.\n * \n * This is the parent component to one or two <md-sidenav>s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nexport class MdSidenavContainer implements AfterContentInit {\n   _sidenavs: QueryList<MdSidenav>;\n/**\n * The sidenav child with the `start` alignment.\n * @return {?}\n */\nget start() { return this._start; }\n/**\n * The sidenav child with the `end` alignment.\n * @return {?}\n */\nget end() { return this._end; }\n/**\n * Event emitted when the sidenav backdrop is clicked.\n */\nbackdropClick = new EventEmitter<void>();\n/**\n * The sidenav at the start/end alignment, independent of direction.\n */\nprivate _start: MdSidenav;\nprivate _end: MdSidenav;\n/**\n * The sidenav at the left/right. When direction changes, these will change as well.\n * They're used as aliases for the above to set the left/right style properly.\n * In LTR, _left == _start and _right == _end.\n * In RTL, _left == _end and _right == _start.\n */\nprivate _left: MdSidenav;\nprivate _right: MdSidenav;\n/**\n * Whether to enable open/close trantions.\n */\n_enableTransitions = false;\n/**\n * @param {?} _dir\n * @param {?} _element\n * @param {?} _renderer\n * @param {?} _ngZone\n */\nconstructor(\nprivate _dir: Dir,\nprivate _element: ElementRef,\nprivate _renderer: Renderer2,\nprivate _ngZone: NgZone) {\n    // If a `Dir` directive exists up the tree, listen direction changes and update the left/right\n    // properties to point to the proper start/end.\n    if (_dir != null) {\n      _dir.dirChange.subscribe(() => this._validateDrawers());\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    // On changes, assert on consistency.\n    this._sidenavs.changes.subscribe(() => this._validateDrawers());\n    this._sidenavs.forEach((sidenav: MdSidenav) => {\n      this._watchSidenavToggle(sidenav);\n      this._watchSidenavAlign(sidenav);\n    });\n    this._validateDrawers();\n\n    // Give the view a chance to render the initial state, then enable transitions.\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => this._enableTransitions = true);\n  }\n/**\n * Calls `open` of both start and end sidenavs\n * @return {?}\n */\npublic open() {\n    return Promise.all([this._start, this._end].map(sidenav => sidenav && sidenav.open()));\n  }\n/**\n * Calls `close` of both start and end sidenavs\n * @return {?}\n */\npublic close() {\n    return Promise.all([this._start, this._end].map(sidenav => sidenav && sidenav.close()));\n  }\n/**\n * Subscribes to sidenav events in order to set a class on the main container element when the\n * sidenav is open and the backdrop is visible. This ensures any overflow on the container element\n * is properly hidden.\n * @param {?} sidenav\n * @return {?}\n */\nprivate _watchSidenavToggle(sidenav: MdSidenav): void {\n    if (!sidenav || sidenav.mode === 'side') { return; }\n    sidenav.onOpen.subscribe(() => this._setContainerClass(true));\n    sidenav.onClose.subscribe(() => this._setContainerClass(false));\n  }\n/**\n * Subscribes to sidenav onAlignChanged event in order to re-validate drawers when the align\n * changes.\n * @param {?} sidenav\n * @return {?}\n */\nprivate _watchSidenavAlign(sidenav: MdSidenav): void {\n    if (!sidenav) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping sides at the same time.\n    sidenav.onAlignChanged.subscribe(() =>\n        this._ngZone.onMicrotaskEmpty.first().subscribe(() => this._validateDrawers()));\n  }\n/**\n * Toggles the 'mat-sidenav-opened' class on the main 'md-sidenav-container' element.\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._renderer.addClass(this._element.nativeElement, 'mat-sidenav-opened');\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, 'mat-sidenav-opened');\n    }\n  }\n/**\n * Validate the state of the sidenav children components.\n * @return {?}\n */\nprivate _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end sidenav.\n    // NOTE: We must call toArray on _sidenavs even though it's iterable\n    // (see https://github.com/Microsoft/TypeScript/issues/3164).\n    for (let /** @type {?} */ sidenav of this._sidenavs.toArray()) {\n      if (sidenav.align == 'end') {\n        if (this._end != null) {\n          throwMdDuplicatedSidenavError('end');\n        }\n        this._end = sidenav;\n      } else {\n        if (this._start != null) {\n          throwMdDuplicatedSidenavError('start');\n        }\n        this._start = sidenav;\n      }\n    }\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir == null || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n/**\n * @return {?}\n */\n_onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalSidenav();\n  }\n/**\n * @return {?}\n */\n_closeModalSidenav() {\n    // Close all open sidenav's where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(sidenav => sidenav && !sidenav.disableClose && sidenav.mode !== 'side')\n      .forEach(sidenav => sidenav.close());\n  }\n/**\n * @return {?}\n */\n_isShowingBackdrop(): boolean {\n    return (this._isSidenavOpen(this._start) && this._start.mode != 'side')\n        || (this._isSidenavOpen(this._end) && this._end.mode != 'side');\n  }\n/**\n * @param {?} side\n * @return {?}\n */\nprivate _isSidenavOpen(side: MdSidenav): boolean {\n    return side != null && side.opened;\n  }\n/**\n * Return the width of the sidenav, if it's in the proper mode and opened.\n * This may relayout the view, so do not call this often.\n * @param {?} sidenav\n * @param {?} mode\n * @return {?}\n */\nprivate _getSidenavEffectiveWidth(sidenav: MdSidenav, mode: string): number {\n    return (this._isSidenavOpen(sidenav) && sidenav.mode == mode) ? sidenav._width : 0;\n  }\n/**\n * @return {?}\n */\n_getMarginLeft() {\n    return this._getSidenavEffectiveWidth(this._left, 'side');\n  }\n/**\n * @return {?}\n */\n_getMarginRight() {\n    return this._getSidenavEffectiveWidth(this._right, 'side');\n  }\n/**\n * @return {?}\n */\n_getPositionLeft() {\n    return this._getSidenavEffectiveWidth(this._left, 'push');\n  }\n/**\n * @return {?}\n */\n_getPositionRight() {\n    return this._getSidenavEffectiveWidth(this._right, 'push');\n  }\n/**\n * Returns the horizontal offset for the content area.  There should never be a value for both\n * left and right, so by subtracting the right value from the left value, we should always get\n * the appropriate offset.\n * @return {?}\n */\n_getPositionOffset() {\n    return this._getPositionLeft() - this._getPositionRight();\n  }\n/**\n * This is using [ngStyle] rather than separate [style...] properties because [style.transform]\n * doesn't seem to work right now.\n * @return {?}\n */\n_getStyles() {\n    return {\n      marginLeft: `${this._getMarginLeft()}px`,\n      marginRight: `${this._getMarginRight()}px`,\n      transform: `translate3d(${this._getPositionOffset()}px, 0, 0)`\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-sidenav-container, mat-sidenav-container',\n  // Do not use ChangeDetectionStrategy.OnPush. It does not work for this component because\n  // technically it is a sibling of MdSidenav (on the content tree) and isn't updated when MdSidenav\n  // changes its state.\n  templateUrl: 'sidenav-container.html',\n  styleUrls: [\n    'sidenav.css',\n    'sidenav-transitions.css',\n  ],\n  host: {\n    '[class.mat-sidenav-container]': 'true',\n    '[class.mat-sidenav-transition]': '_enableTransitions',\n  },\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer2, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_sidenavs': [{ type: ContentChildren, args: [MdSidenav, ] },],\n'backdropClick': [{ type: Output },],\n};\n}\n\nfunction MdSidenavContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavContainer.ctorParameters;\n/** @type {?} */\nMdSidenavContainer.propDecorators;\n/** @type {?} */\nMdSidenavContainer.prototype._sidenavs;\n/**\n * Event emitted when the sidenav backdrop is clicked.\n * @type {?}\n */\nMdSidenavContainer.prototype.backdropClick;\n/**\n * The sidenav at the start/end alignment, independent of direction.\n * @type {?}\n */\nMdSidenavContainer.prototype._start;\n/** @type {?} */\nMdSidenavContainer.prototype._end;\n/**\n * The sidenav at the left/right. When direction changes, these will change as well.\n * They're used as aliases for the above to set the left/right style properly.\n * In LTR, _left == _start and _right == _end.\n * In RTL, _left == _end and _right == _start.\n * @type {?}\n */\nMdSidenavContainer.prototype._left;\n/** @type {?} */\nMdSidenavContainer.prototype._right;\n/**\n * Whether to enable open/close trantions.\n * @type {?}\n */\nMdSidenavContainer.prototype._enableTransitions;\n/** @type {?} */\nMdSidenavContainer.prototype._dir;\n/** @type {?} */\nMdSidenavContainer.prototype._element;\n/** @type {?} */\nMdSidenavContainer.prototype._renderer;\n/** @type {?} */\nMdSidenavContainer.prototype._ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {MdCommonModule, GestureConfig, StyleModule} from '../core';\nimport {MdSlider} from './slider';\nimport {RtlModule} from '../core/rtl/dir';\nexport class MdSliderModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, FormsModule, MdCommonModule, StyleModule, RtlModule],\n  exports: [MdSlider, MdCommonModule],\n  declarations: [MdSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSliderModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSliderModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSliderModule.ctorParameters;\n}\n\n\n\nexport {MD_SLIDER_VALUE_ACCESSOR,MdSliderChange,MdSliderBase,_MdSliderMixinBase,MdSlider,SliderRenderer} from './slider';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer2,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {coerceBooleanProperty, coerceNumberProperty, HammerInput} from '../core';\nimport {Dir} from '../core/rtl/dir';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW\n} from '../core/keyboard/keycodes';\nimport {FocusOrigin, FocusOriginMonitor} from '../core/style/focus-origin-monitor';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n/**\n * The thumb gap size for a disabled slider.\n */\nconst DISABLED_THUMB_GAP = 7;\n/**\n * The thumb gap size for a non-active slider at its minimum value.\n */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/**\n * The thumb gap size for an active slider at its minimum value.\n */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows md-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MD_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdSlider),\n  multi: true\n};\n/**\n * A simple change event emitted by the MdSlider component.\n */\nexport class MdSliderChange {\n/**\n * The MdSlider that changed.\n */\nsource: MdSlider;\n/**\n * The new value of the source slider.\n */\nvalue: number;\n}\n\nfunction MdSliderChange_tsickle_Closure_declarations() {\n/**\n * The MdSlider that changed.\n * @type {?}\n */\nMdSliderChange.prototype.source;\n/**\n * The new value of the source slider.\n * @type {?}\n */\nMdSliderChange.prototype.value;\n}\n\nexport class MdSliderBase { }\nexport const /** @type {?} */ _MdSliderMixinBase = mixinDisabled(MdSliderBase);\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nexport class MdSlider extends _MdSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable {\n/**\n * Whether the slider is inverted.\n * @return {?}\n */\nget invert() { return this._invert; }\n/**\n * @param {?} value\n * @return {?}\n */\nset invert(value: any) { this._invert = coerceBooleanProperty(value); }\nprivate _invert = false;\n/**\n * The maximum value that the slider can have.\n * @return {?}\n */\nget max() {\n    return this._max;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n  }\nprivate _max: number = 100;\n/**\n * The minimum value that the slider can have.\n * @return {?}\n */\nget min() {\n    return this._min;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n  }\nprivate _min: number = 0;\n/**\n * The values at which the thumb will snap.\n * @return {?}\n */\nget step() { return this._step; }\n/**\n * @param {?} v\n * @return {?}\n */\nset step(v) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop().length;\n    }\n  }\nprivate _step: number = 1;\n/**\n * Whether or not to show the thumb label.\n * @return {?}\n */\nget thumbLabel(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\nprivate _thumbLabel: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n/**\n * How often to show ticks. Relative to the step so that a tick always appears on a step.\n * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n * @return {?}\n */\nget tickInterval() { return this._tickInterval; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tickInterval(value) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, /** @type {?} */(( this._tickInterval as number)));\n    } else {\n      this._tickInterval = 0;\n    }\n  }\nprivate _tickInterval: 'auto' | number = 0;\n/**\n * @deprecated\n * @return {?}\n */\nget _tickIntervalDeprecated() { return this.tickInterval; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _tickIntervalDeprecated(v) { this.tickInterval = v; }\n/**\n * Value of the slider.\n * @return {?}\n */\nget value() {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) {\n    this._value = coerceNumberProperty(v, this._value);\n    this._percent = this._calculatePercentage(this._value);\n  }\nprivate _value: number = null;\n/**\n * Whether the slider is vertical.\n * @return {?}\n */\nget vertical() { return this._vertical; }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value: any) { this._vertical = coerceBooleanProperty(value); }\nprivate _vertical = false;\n\n   color: 'primary' | 'accent' | 'warn' = 'accent';\n/**\n * Event emitted when the slider value has changed.\n */\nchange = new EventEmitter<MdSliderChange>();\n/**\n * Event emitted when the slider thumb moves.\n */\ninput = new EventEmitter<MdSliderChange>();\n/**\n * The value to be used for display purposes.\n * @return {?}\n */\nget displayValue(): string|number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value;\n  }\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * The percentage of the slider that coincides with the value.\n * @return {?}\n */\nget percent() { return this._clamp(this._percent); }\nprivate _percent: number = 0;\n/**\n * Whether or not the thumb is sliding.\n * Used to determine if there should be a transition for the thumb and fill track.\n */\n_isSliding: boolean = false;\n/**\n * Whether or not the slider is active (clicked or sliding).\n * Used to shrink and grow the thumb as according to the Material Design spec.\n */\n_isActive: boolean = false;\n/**\n * Whether the axis of the slider is inverted.\n * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n * @return {?}\n */\nget _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n/**\n * Whether the slider is at its minimum value.\n * @return {?}\n */\nget _isMinValue() {\n    return this.percent === 0;\n  }\n/**\n * The amount of space to leave between the slider thumb and the track fill & track background\n * elements.\n * @return {?}\n */\nget _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n/**\n * CSS styles for the track background element.\n * @return {?}\n */\nget _trackBackgroundStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n/**\n * CSS styles for the track fill element.\n * @return {?}\n */\nget _trackFillStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n/**\n * CSS styles for the ticks container element.\n * @return {?}\n */\nget _ticksContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let /** @type {?} */ offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n/**\n * CSS styles for the ticks element.\n * @return {?}\n */\nget _ticksStyles(): { [key: string]: string } {\n    let /** @type {?} */ tickSize = this._tickIntervalPercent * 100;\n    let /** @type {?} */ backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let /** @type {?} */ rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let /** @type {?} */ styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let /** @type {?} */ side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n/**\n * @return {?}\n */\nget _thumbContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let /** @type {?} */ offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n/**\n * The size of a tick interval as a percentage of the size of the track.\n */\nprivate _tickIntervalPercent: number = 0;\n/**\n * A renderer to handle updating the slider's thumb and fill track.\n */\nprivate _renderer: SliderRenderer = null;\n/**\n * The dimensions of the slider.\n */\nprivate _sliderDimensions: ClientRect = null;\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * The last value for which a change event was emitted.\n */\nprivate _lastChangeValue: number = null;\n/**\n * The last value for which an input event was emitted.\n */\nprivate _lastInputValue: number = null;\n/**\n * Decimal places to round to, based on the step amount.\n */\nprivate _roundLabelTo: number;\n/**\n * Whether mouse events should be converted to a slider position by calculating their distance\n * from the right or bottom edge of the slider as opposed to the top or left.\n * @return {?}\n */\nprivate get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n/**\n * The language direction for this slider element.\n * @return {?}\n */\nprivate get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n/**\n * @param {?} renderer\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n * @param {?} _dir\n */\nconstructor(renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _dir: Dir) {\n    super();\n    this._focusOriginMonitor.monitor(this._elementRef.nativeElement, renderer, true)\n        .subscribe((origin: FocusOrigin) => this._isActive = !!origin && origin !== 'keyboard');\n    this._renderer = new SliderRenderer(this._elementRef);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n/**\n * @return {?}\n */\n_onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._renderer.getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    this._isSliding = false;\n    this._renderer.addFocus();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    /* Emits a change and input event if the value changed. */\n    this._emitInputEvent();\n    this._emitValueIfChanged();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    this._emitInputEvent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlideStart(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    event.preventDefault();\n    this._isSliding = true;\n    this._renderer.addFocus();\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n  }\n/**\n * @return {?}\n */\n_onSlideEnd() {\n    this._isSliding = false;\n    this._emitValueIfChanged();\n  }\n/**\n * @return {?}\n */\n_onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._renderer.getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @return {?}\n */\n_onBlur() {\n    this.onTouched();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n/**\n * @return {?}\n */\n_onKeyup() {\n    this._isSliding = false;\n  }\n/**\n * Increments the slider by the given number of steps (negative number decrements).\n * @param {?} numSteps\n * @return {?}\n */\nprivate _increment(numSteps: number) {\n    this.value = this._clamp(this.value + this.step * numSteps, this.min, this.max);\n    this._emitInputEvent();\n    this._emitValueIfChanged();\n  }\n/**\n * Calculate the new value from the new physical location. The value will always be snapped.\n * @param {?} pos\n * @return {?}\n */\nprivate _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let /** @type {?} */ offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let /** @type {?} */ size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let /** @type {?} */ posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let /** @type {?} */ percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let /** @type {?} */ exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let /** @type {?} */ closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n/**\n * Emits a change event if the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitValueIfChanged() {\n    if (this.value != this._lastChangeValue) {\n      let /** @type {?} */ event = this._createChangeEvent();\n      this._lastChangeValue = this.value;\n      this._controlValueAccessorChangeFn(this.value);\n      this.change.emit(event);\n    }\n  }\n/**\n * Emits an input event when the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitInputEvent() {\n    if (this.value != this._lastInputValue) {\n      let /** @type {?} */ event = this._createChangeEvent();\n      this._lastInputValue = this.value;\n      this.input.emit(event);\n    }\n  }\n/**\n * Updates the amount of space between ticks as a percentage of the width of the slider.\n * @return {?}\n */\nprivate _updateTickIntervalPercent() {\n    if (!this.tickInterval) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let /** @type {?} */ trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let /** @type {?} */ pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let /** @type {?} */ stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let /** @type {?} */ pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n/**\n * Creates a slider change object from the specified value.\n * @param {?=} value\n * @return {?}\n */\nprivate _createChangeEvent(value = this.value): MdSliderChange {\n    let /** @type {?} */ event = new MdSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n/**\n * Calculates the percentage of the slider that a value is.\n * @param {?} value\n * @return {?}\n */\nprivate _calculatePercentage(value: number) {\n    return (value - this.min) / (this.max - this.min);\n  }\n/**\n * Calculates the value a percentage of the slider corresponds to.\n * @param {?} percentage\n * @return {?}\n */\nprivate _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n/**\n * Return a number between two numbers.\n * @param {?} value\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nprivate _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n  }\n/**\n * Registers a callback to eb triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the component is touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets whether the component should be disabled.\n * Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-slider, mat-slider',\n  providers: [MD_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    'tabindex': '0',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color != \"primary\" && color != \"warn\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled'],\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'invert': [{ type: Input },],\n'max': [{ type: Input },],\n'min': [{ type: Input },],\n'step': [{ type: Input },],\n'thumbLabel': [{ type: Input },],\n'_thumbLabelDeprecated': [{ type: Input, args: ['thumb-label', ] },],\n'tickInterval': [{ type: Input },],\n'_tickIntervalDeprecated': [{ type: Input, args: ['tick-interval', ] },],\n'value': [{ type: Input },],\n'vertical': [{ type: Input },],\n'color': [{ type: Input },],\n'change': [{ type: Output },],\n'input': [{ type: Output },],\n};\n}\n\nfunction MdSlider_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlider.ctorParameters;\n/** @type {?} */\nMdSlider.propDecorators;\n/** @type {?} */\nMdSlider.prototype._invert;\n/** @type {?} */\nMdSlider.prototype._max;\n/** @type {?} */\nMdSlider.prototype._min;\n/** @type {?} */\nMdSlider.prototype._step;\n/** @type {?} */\nMdSlider.prototype._thumbLabel;\n/** @type {?} */\nMdSlider.prototype._tickInterval;\n/** @type {?} */\nMdSlider.prototype._value;\n/** @type {?} */\nMdSlider.prototype._vertical;\n/** @type {?} */\nMdSlider.prototype.color;\n/**\n * Event emitted when the slider value has changed.\n * @type {?}\n */\nMdSlider.prototype.change;\n/**\n * Event emitted when the slider thumb moves.\n * @type {?}\n */\nMdSlider.prototype.input;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdSlider.prototype.onTouched;\n/** @type {?} */\nMdSlider.prototype._percent;\n/**\n * Whether or not the thumb is sliding.\n * Used to determine if there should be a transition for the thumb and fill track.\n * @type {?}\n */\nMdSlider.prototype._isSliding;\n/**\n * Whether or not the slider is active (clicked or sliding).\n * Used to shrink and grow the thumb as according to the Material Design spec.\n * @type {?}\n */\nMdSlider.prototype._isActive;\n/**\n * The size of a tick interval as a percentage of the size of the track.\n * @type {?}\n */\nMdSlider.prototype._tickIntervalPercent;\n/**\n * A renderer to handle updating the slider's thumb and fill track.\n * @type {?}\n */\nMdSlider.prototype._renderer;\n/**\n * The dimensions of the slider.\n * @type {?}\n */\nMdSlider.prototype._sliderDimensions;\n/** @type {?} */\nMdSlider.prototype._controlValueAccessorChangeFn;\n/**\n * The last value for which a change event was emitted.\n * @type {?}\n */\nMdSlider.prototype._lastChangeValue;\n/**\n * The last value for which an input event was emitted.\n * @type {?}\n */\nMdSlider.prototype._lastInputValue;\n/**\n * Decimal places to round to, based on the step amount.\n * @type {?}\n */\nMdSlider.prototype._roundLabelTo;\n/** @type {?} */\nMdSlider.prototype._elementRef;\n/** @type {?} */\nMdSlider.prototype._focusOriginMonitor;\n/** @type {?} */\nMdSlider.prototype._dir;\n}\n\n/**\n * Renderer class in order to keep all dom manipulation in one place and outside of the main class.\n * \\@docs-private\n */\nexport class SliderRenderer {\nprivate _sliderElement: HTMLElement;\n/**\n * @param {?} elementRef\n */\nconstructor(elementRef: ElementRef) {\n    this._sliderElement = elementRef.nativeElement;\n  }\n/**\n * Get the bounding client rect of the slider track element.\n * The track is used rather than the native element to ignore the extra space that the thumb can\n * take up.\n * @return {?}\n */\ngetSliderDimensions() {\n    let /** @type {?} */ wrapperElement = this._sliderElement.querySelector('.mat-slider-wrapper');\n    return wrapperElement.getBoundingClientRect();\n  }\n/**\n * Focuses the native element.\n * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n * @return {?}\n */\naddFocus() {\n    this._sliderElement.focus();\n  }\n}\n\nfunction SliderRenderer_tsickle_Closure_declarations() {\n/** @type {?} */\nSliderRenderer.prototype._sliderElement;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MdSlideToggle} from './slide-toggle';\nimport {\n  GestureConfig, MdCommonModule, MdRippleModule, FOCUS_ORIGIN_MONITOR_PROVIDER\n} from '../core';\nexport class MdSlideToggleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [FormsModule, MdRippleModule, MdCommonModule],\n  exports: [MdSlideToggle, MdCommonModule],\n  declarations: [MdSlideToggle],\n  providers: [\n    FOCUS_ORIGIN_MONITOR_PROVIDER,\n    { provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig }\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSlideToggleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlideToggleModule.ctorParameters;\n}\n\n\n\nexport {MD_SLIDE_TOGGLE_VALUE_ACCESSOR,MdSlideToggleChange,MdSlideToggleBase,_MdSlideToggleMixinBase,MdSlideToggle} from './slide-toggle';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  applyCssTransform,\n  coerceBooleanProperty,\n  FocusOrigin,\n  FocusOriginMonitor,\n  HammerInput,\n  MdRipple,\n  RippleRef\n} from '../core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\n\n\nexport const /** @type {?} */ MD_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdSlideToggle),\n  multi: true\n};\nexport class MdSlideToggleChange {\n  source: MdSlideToggle;\n  checked: boolean;\n}\n\nfunction MdSlideToggleChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleChange.prototype.source;\n/** @type {?} */\nMdSlideToggleChange.prototype.checked;\n}\n\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet /** @type {?} */ nextId = 0;\nexport class MdSlideToggleBase { }\nexport const /** @type {?} */ _MdSlideToggleMixinBase = mixinDisabled(MdSlideToggleBase);\n/**\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\n */\nexport class MdSlideToggle extends _MdSlideToggleMixinBase\n    implements OnDestroy, AfterContentInit, ControlValueAccessor, CanDisable {\nprivate onChange = (_: any) => {};\nprivate onTouched = () => {};\nprivate _uniqueId = `md-slide-toggle-${++nextId}`;\nprivate _checked: boolean = false;\nprivate _color: string;\nprivate _slideRenderer: SlideToggleRenderer = null;\nprivate _required: boolean = false;\nprivate _disableRipple: boolean = false;\n/**\n * Reference to the focus state ripple.\n */\nprivate _focusRipple: RippleRef;\n/**\n * Name value will be applied to the input element if present\n */\nname: string = null;\n/**\n * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n */\nid: string = this._uniqueId;\n/**\n * Used to specify the tabIndex value for the underlying input element.\n */\ntabIndex: number = 0;\n/**\n * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n */\nlabelPosition: 'before' | 'after' = 'after';\n/**\n * Used to set the aria-label attribute on the underlying input element.\n */\nariaLabel: string = null;\n/**\n * Used to set the aria-labelledby attribute on the underlying input element.\n */\nariaLabelledby: string = null;\n/**\n * Whether the slide-toggle is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether the ripple effect for this slide-toggle is disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * An event will be dispatched each time the slide-toggle changes its value.\n */\nchange: EventEmitter<MdSlideToggleChange> = new EventEmitter<MdSlideToggleChange>();\n/**\n * Returns the unique id for the visual hidden input.\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\n/**\n * Reference to the underlying input element.\n */\n_inputElement: ElementRef;\n/**\n * Reference to the ripple directive on the thumb container.\n */\n_ripple: MdRipple;\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _focusOriginMonitor\n */\nconstructor(private _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n    super();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef);\n\n    this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * The onChangeEvent method will be also called on click.\n * This is because everything for the slide-toggle is wrapped inside of a label,\n * which triggers a onChange event on click.\n * @param {?} event\n * @return {?}\n */\n_onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Once a drag is currently in progress, we do not want to toggle the slide-toggle on a click.\n    if (!this.disabled && !this._slideRenderer.dragging) {\n      this.toggle();\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    this.onTouched();\n\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this.checked = value;\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n/**\n * Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n/**\n * Focuses the slide-toggle.\n * @return {?}\n */\nfocus() {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, this._renderer, 'keyboard');\n  }\n/**\n * Whether the slide-toggle is checked.\n * @return {?}\n */\nget checked() { return !!this._checked; }\n/**\n * @param {?} value\n * @return {?}\n */\nset checked(value) {\n    if (this.checked !== !!value) {\n      this._checked = value;\n      this.onChange(this._checked);\n    }\n  }\n/**\n * The color of the slide-toggle. Can be primary, accent, or warn.\n * @return {?}\n */\nget color(): string { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) {\n    this._updateColor(value);\n  }\n/**\n * Toggles the checked state of the slide-toggle.\n * @return {?}\n */\ntoggle() {\n    this.checked = !this.checked;\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n/**\n * @param {?} newColor\n * @return {?}\n */\nprivate _updateColor(newColor: string) {\n    this._setElementColor(this._color, false);\n    this._setElementColor(newColor, true);\n    this._color = newColor;\n  }\n/**\n * @param {?} color\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setElementColor(color: string, isAdd: boolean) {\n    if (color != null && color != '') {\n      if (isAdd) {\n        this._renderer.addClass(this._elementRef.nativeElement, `mat-${color}`);\n      } else {\n        this._renderer.removeClass(this._elementRef.nativeElement, `mat-${color}`);\n      }\n    }\n  }\n/**\n * Emits the change event to the `change` output EventEmitter\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    let /** @type {?} */ event = new MdSlideToggleChange();\n    event.source = this;\n    event.checked = this.checked;\n    this.change.emit(event);\n  }\n/**\n * @return {?}\n */\n_onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n/**\n * @return {?}\n */\n_onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      let /** @type {?} */ _previousChecked = this.checked;\n      this.checked = this._slideRenderer.dragPercentage > 50;\n\n      if (_previousChecked !== this.checked) {\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-slide-toggle, mat-slide-toggle',\n  host: {\n    '[class.mat-slide-toggle]': 'true',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MD_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input },],\n'id': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'required': [{ type: Input },],\n'disableRipple': [{ type: Input },],\n'change': [{ type: Output },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'checked': [{ type: Input },],\n'color': [{ type: Input },],\n};\n}\n\nfunction MdSlideToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlideToggle.ctorParameters;\n/** @type {?} */\nMdSlideToggle.propDecorators;\n/** @type {?} */\nMdSlideToggle.prototype.onChange;\n/** @type {?} */\nMdSlideToggle.prototype.onTouched;\n/** @type {?} */\nMdSlideToggle.prototype._uniqueId;\n/** @type {?} */\nMdSlideToggle.prototype._checked;\n/** @type {?} */\nMdSlideToggle.prototype._color;\n/** @type {?} */\nMdSlideToggle.prototype._slideRenderer;\n/** @type {?} */\nMdSlideToggle.prototype._required;\n/** @type {?} */\nMdSlideToggle.prototype._disableRipple;\n/**\n * Reference to the focus state ripple.\n * @type {?}\n */\nMdSlideToggle.prototype._focusRipple;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMdSlideToggle.prototype.name;\n/**\n * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n * @type {?}\n */\nMdSlideToggle.prototype.id;\n/**\n * Used to specify the tabIndex value for the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.tabIndex;\n/**\n * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n * @type {?}\n */\nMdSlideToggle.prototype.labelPosition;\n/**\n * Used to set the aria-label attribute on the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.ariaLabel;\n/**\n * Used to set the aria-labelledby attribute on the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.ariaLabelledby;\n/**\n * An event will be dispatched each time the slide-toggle changes its value.\n * @type {?}\n */\nMdSlideToggle.prototype.change;\n/**\n * Reference to the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype._inputElement;\n/**\n * Reference to the ripple directive on the thumb container.\n * @type {?}\n */\nMdSlideToggle.prototype._ripple;\n/** @type {?} */\nMdSlideToggle.prototype._elementRef;\n/** @type {?} */\nMdSlideToggle.prototype._renderer;\n/** @type {?} */\nMdSlideToggle.prototype._focusOriginMonitor;\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n/**\n * Reference to the thumb HTMLElement.\n */\nprivate _thumbEl: HTMLElement;\n/**\n * Reference to the thumb bar HTMLElement.\n */\nprivate _thumbBarEl: HTMLElement;\n/**\n * Width of the thumb bar of the slide-toggle.\n */\nprivate _thumbBarWidth: number;\n/**\n * Previous checked state before drag started.\n */\nprivate _previousChecked: boolean;\n/**\n * Percentage of the thumb while dragging. Percentage as fraction of 100.\n */\ndragPercentage: number;\n/**\n * Whether the thumb is currently being dragged.\n */\ndragging: boolean = false;\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) {\n    this._thumbEl = _elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n    this._thumbBarEl = _elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n  }\n/**\n * Initializes the drag of the slide-toggle.\n * @param {?} checked\n * @return {?}\n */\nstartThumbDrag(checked: boolean) {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n/**\n * Resets the current drag and returns the new checked value.\n * @return {?}\n */\nstopThumbDrag(): boolean {\n    if (!this.dragging) { return; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    applyCssTransform(this._thumbEl, '');\n\n    return this.dragPercentage > 50;\n  }\n/**\n * Updates the thumb containers position from the specified distance.\n * @param {?} distance\n * @return {?}\n */\nupdateThumbPosition(distance: number) {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    let /** @type {?} */ dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    applyCssTransform(this._thumbEl, `translate3d(${dragX}px, 0, 0)`);\n  }\n/**\n * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.\n * @param {?} distance\n * @return {?}\n */\nprivate _getDragPercentage(distance: number) {\n    let /** @type {?} */ percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n\nfunction SlideToggleRenderer_tsickle_Closure_declarations() {\n/**\n * Reference to the thumb HTMLElement.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbEl;\n/**\n * Reference to the thumb bar HTMLElement.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbBarEl;\n/**\n * Width of the thumb bar of the slide-toggle.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbBarWidth;\n/**\n * Previous checked state before drag started.\n * @type {?}\n */\nSlideToggleRenderer.prototype._previousChecked;\n/**\n * Percentage of the thumb while dragging. Percentage as fraction of 100.\n * @type {?}\n */\nSlideToggleRenderer.prototype.dragPercentage;\n/**\n * Whether the thumb is currently being dragged.\n * @type {?}\n */\nSlideToggleRenderer.prototype.dragging;\n/** @type {?} */\nSlideToggleRenderer.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdSelect} from './select';\nimport {MdOptionModule} from '../core/option/option';\nimport {MdCommonModule, OverlayModule} from '../core';\nexport class MdSelectModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MdOptionModule,\n    MdCommonModule,\n  ],\n  exports: [MdSelect, MdOptionModule, MdCommonModule],\n  declarations: [MdSelect],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectModule.ctorParameters;\n}\n\n\n\nexport {SELECT_OPTION_HEIGHT,SELECT_PANEL_MAX_HEIGHT,SELECT_MAX_OPTIONS_DISPLAYED,SELECT_TRIGGER_HEIGHT,SELECT_OPTION_HEIGHT_ADJUSTMENT,SELECT_PANEL_PADDING_X,SELECT_MULTIPLE_PANEL_PADDING_X,SELECT_PANEL_PADDING_Y,SELECT_PANEL_VIEWPORT_PADDING,MdSelectChange,MdSelectFloatPlaceholderType,MdSelect} from './select';\nexport {fadeInContent, transformPanel, transformPlaceholder} from './select-animations';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  Self,\n  ViewEncapsulation,\n  ViewChild,\n  ChangeDetectorRef,\n  Attribute,\n  OnInit,\n} from '@angular/core';\nimport {MdOption, MdOptionSelectionChange} from '../core/option/option';\nimport {ENTER, SPACE, UP_ARROW, DOWN_ARROW, HOME, END} from '../core/keyboard/keycodes';\nimport {FocusKeyManager} from '../core/a11y/focus-key-manager';\nimport {Dir} from '../core/rtl/dir';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport {transformPlaceholder, transformPanel, fadeInContent} from './select-animations';\nimport {ControlValueAccessor, NgControl} from '@angular/forms';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\nimport {ConnectedOverlayDirective} from '../core/overlay/overlay-directives';\nimport {ViewportRuler} from '../core/overlay/position/viewport-ruler';\nimport {SelectionModel} from '../core/selection/selection';\nimport {ScrollDispatcher} from '../core/overlay/scroll/scroll-dispatcher';\nimport {getMdSelectDynamicMultipleError, getMdSelectNonArrayValueError} from './select-errors';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/startWith';\nimport'rxjs/add/operator/filter';\n/**\n * The fixed height of every option element.\n */\nexport const SELECT_OPTION_HEIGHT = 48;\n/**\n * The max height of the select's overlay panel\n */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The max number of options visible at once in the select panel.\n */\nexport const SELECT_MAX_OPTIONS_DISPLAYED = 5;\n/**\n * The fixed height of the select's trigger element.\n */\nexport const SELECT_TRIGGER_HEIGHT = 30;\n/**\n * Must adjust for the difference in height between the option and the trigger,\n * so the text will align on the y axis.\n * (SELECT_OPTION_HEIGHT (48) - SELECT_TRIGGER_HEIGHT (30)) / 2 = 9\n */\nexport const SELECT_OPTION_HEIGHT_ADJUSTMENT = 9;\n/**\n * The panel's padding on the x-axis\n */\nexport const SELECT_PANEL_PADDING_X = 16;\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n * \n * (SELECT_PADDING * 1.75) + 20 = 48\n * The padding is multiplied by 1.75 because the checkbox's margin is half the padding, and\n * the browser adds ~4px, because we're using inline elements.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.75 + 20;\n/**\n * The panel's padding on the y-axis. This padding indicates there are more\n * options available if you scroll.\n */\nexport const SELECT_PANEL_PADDING_Y = 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Change event object that is emitted when the select value has changed.\n */\nexport class MdSelectChange {\n/**\n * @param {?} source\n * @param {?} value\n */\nconstructor(public source: MdSelect,\npublic value: any) { }\n}\n\nfunction MdSelectChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectChange.prototype.source;\n/** @type {?} */\nMdSelectChange.prototype.value;\n}\n\n\n/** Allowed values for the floatPlaceholder option. */\nexport type MdSelectFloatPlaceholderType = 'always' | 'never' | 'auto';\nexport class MdSelect implements AfterContentInit, OnDestroy, OnInit, ControlValueAccessor {\n/**\n * Whether or not the overlay panel is open.\n */\nprivate _panelOpen = false;\n/**\n * Subscriptions to option events.\n */\nprivate _optionSubscription: Subscription;\n/**\n * Subscription to changes in the option list.\n */\nprivate _changeSubscription: Subscription;\n/**\n * Subscription to tab events while overlay is focused.\n */\nprivate _tabSubscription: Subscription;\n/**\n * Whether filling out the select is required in the form.\n */\nprivate _required: boolean = false;\n/**\n * Whether the select is disabled.\n */\nprivate _disabled: boolean = false;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n */\nprivate _scrollTop = 0;\n/**\n * The placeholder displayed in the trigger of the select.\n */\nprivate _placeholder: string;\n/**\n * Whether the component is in multiple selection mode.\n */\nprivate _multiple: boolean = false;\n/**\n * Deals with the selection logic.\n */\n_selectionModel: SelectionModel<MdOption>;\n/**\n * The animation state of the placeholder.\n */\nprivate _placeholderState = '';\n/**\n * Tab index for the element.\n */\nprivate _tabIndex: number;\n/**\n * Theme color for the component.\n */\nprivate _color: string;\n/**\n * The width of the trigger. Must be saved to set the min width of the overlay panel\n * and the width of the selected value.\n */\n_triggerWidth: number;\n/**\n * Manages keyboard events for options in the panel.\n */\n_keyManager: FocusKeyManager;\n/**\n * The width of the selected option's value. Must be set programmatically\n * to ensure its overflow is clipped, as it's absolutely positioned.\n */\n_selectedValueWidth: number;\n/**\n * View -> model callback called when value changes\n */\n_onChange = (value: any) => {};\n/**\n * View -> model callback called when select has been touched\n */\n_onTouched = () => {};\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n */\n_optionIds: string = '';\n/**\n * The value of the select panel's transform-origin property.\n */\n_transformOrigin: string = 'top';\n/**\n * Whether the panel's animation is done.\n */\n_panelDoneAnimating: boolean = false;\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n */\n_offsetY = 0;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n */\n_positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n/**\n * Trigger that opens the select.\n */\ntrigger: ElementRef;\n/**\n * Overlay pane containing the options.\n */\noverlayDir: ConnectedOverlayDirective;\n/**\n * All of the defined select options.\n */\noptions: QueryList<MdOption>;\n/**\n * Placeholder to be shown if no value has been selected.\n * @return {?}\n */\nget placeholder() { return this._placeholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\n    this._placeholder = value;\n\n    // Must wait to record the trigger width to ensure placeholder width is included.\n    Promise.resolve(null).then(() => this._setTriggerWidth());\n  }\n/**\n * Whether the component is disabled.\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Whether the component is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether the user should be allowed to select multiple options.\n * @return {?}\n */\nget multiple(): boolean { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMdSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n/**\n * Whether to float the placeholder text.\n * @return {?}\n */\nget floatPlaceholder(): MdSelectFloatPlaceholderType { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: MdSelectFloatPlaceholderType) {\n    this._floatPlaceholder = value || 'auto';\n  }\nprivate _floatPlaceholder: MdSelectFloatPlaceholderType = 'auto';\n/**\n * Tab index for the select element.\n * @return {?}\n */\nget tabIndex(): number { return this._disabled ? -1 : this._tabIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tabIndex(value: number) {\n    if (typeof value !== 'undefined') {\n      this._tabIndex = value;\n    }\n  }\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n */\nariaLabel: string = '';\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n */\nariaLabelledby: string = '';\n/**\n * Theme color for the component.\n * @return {?}\n */\nget color(): string { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) {\n    if (value && value !== this._color) {\n      this._renderer.removeClass(this._element.nativeElement, `mat-${this._color}`);\n      this._renderer.addClass(this._element.nativeElement, `mat-${value}`);\n      this._color = value;\n    }\n  }\n/**\n * Combined stream of all of the child options' change events.\n * @return {?}\n */\nget optionSelectionChanges(): Observable<MdOptionSelectionChange> {\n    return Observable.merge(...this.options.map(option => option.onSelectionChange));\n  }\n/**\n * Event emitted when the select has been opened.\n */\nonOpen: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the select has been closed.\n */\nonClose: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the selected value has been changed by the user.\n */\nchange: EventEmitter<MdSelectChange> = new EventEmitter<MdSelectChange>();\n/**\n * @param {?} _element\n * @param {?} _renderer\n * @param {?} _viewportRuler\n * @param {?} _changeDetectorRef\n * @param {?} _dir\n * @param {?} _control\n * @param {?} tabIndex\n */\nconstructor(private _element: ElementRef,\nprivate _renderer: Renderer2,\nprivate _viewportRuler: ViewportRuler,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _dir: Dir,\npublic _control: NgControl,\n               tabIndex: string) {\n\n    if (this._control) {\n      this._control.valueAccessor = this;\n    }\n\n    this._tabIndex = parseInt(tabIndex) || 0;\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._selectionModel = new SelectionModel<MdOption>(this.multiple, null, false);\n    this.color = this.color || 'primary';\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._initKeyManager();\n\n    this._changeSubscription = this.options.changes.startWith(null).subscribe(() => {\n      this._resetOptions();\n\n      if (this._control) {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve(null).then(() => this._setSelectionByValue(this._control.value));\n      }\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._dropSubscriptions();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._tabSubscription) {\n      this._tabSubscription.unsubscribe();\n    }\n  }\n/**\n * Toggles the overlay panel open or closed.\n * @return {?}\n */\ntoggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n/**\n * Opens the overlay panel.\n * @return {?}\n */\nopen(): void {\n    if (this.disabled || !this.options.length) {\n      return;\n    }\n\n    if (!this._triggerWidth) {\n      this._setTriggerWidth();\n    }\n\n    this._calculateOverlayPosition();\n    this._placeholderState = this._floatPlaceholderState();\n    this._panelOpen = true;\n  }\n/**\n * Closes the overlay panel and focuses the host element.\n * @return {?}\n */\nclose(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n\n      if (this._selectionModel.isEmpty()) {\n        this._placeholderState = '';\n      }\n\n      this._focusHost();\n    }\n  }\n/**\n * Sets the select's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n/**\n * Saves a callback function to be invoked when the select's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the select is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n/**\n * Disables the select. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} isDisabled Sets whether the component is disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n/**\n * Whether or not the overlay panel is open.\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen;\n  }\n/**\n * The currently selected option.\n * @return {?}\n */\nget selected(): MdOption | MdOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n/**\n * The value displayed in the trigger.\n * @return {?}\n */\nget triggerValue(): string {\n    if (this._multiple) {\n      let /** @type {?} */ selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n/**\n * Whether the element is in RTL mode.\n * @return {?}\n */\n_isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n/**\n * Sets the width of the trigger element. This is necessary to match\n * the overlay width to the trigger width.\n * @return {?}\n */\nprivate _setTriggerWidth(): void {\n    this._triggerWidth = this._getTriggerRect().width;\n  }\n/**\n * Handles the keyboard interactions of a closed select.\n * @param {?} event\n * @return {?}\n */\n_handleClosedKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      if (event.keyCode === ENTER || event.keyCode === SPACE) {\n        event.preventDefault(); // prevents the page from scrolling down when pressing space\n        this.open();\n      } else if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n        this._handleArrowKey(event);\n      }\n    }\n  }\n/**\n * Handles keypresses inside the panel.\n * @param {?} event\n * @return {?}\n */\n_handlePanelKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === HOME || event.keyCode === END) {\n      event.preventDefault();\n      event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                               this._keyManager.setLastItemActive();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n/**\n * When the panel element is finished transforming in (though not fading in), it\n * emits an event and focuses an option if the panel is open.\n * @return {?}\n */\n_onPanelDone(): void {\n    if (this.panelOpen) {\n      this._focusCorrectOption();\n      this.onOpen.emit();\n    } else {\n      this.onClose.emit();\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n    }\n  }\n/**\n * When the panel content is done fading in, the _panelDoneAnimating property is\n * set so the proper class can be added to the panel.\n * @return {?}\n */\n_onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n  }\n/**\n * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n * \"blur\" to the panel when it opens, causing a false positive.\n * @return {?}\n */\n_onBlur() {\n    if (!this.panelOpen) {\n      this._onTouched();\n    }\n  }\n/**\n * Callback that is invoked when the overlay panel has been attached.\n * @return {?}\n */\n_onAttached(): void {\n    this._calculateOverlayOffsetX();\n    this._setScrollTop();\n  }\n/**\n * Sets the scroll position of the scroll container. This must be called after\n * the overlay pane is attached or the scroll container element will not yet be\n * present in the DOM.\n * @return {?}\n */\nprivate _setScrollTop(): void {\n    const /** @type {?} */ scrollContainer =\n        this.overlayDir.overlayRef.overlayElement.querySelector('.mat-select-panel');\n    scrollContainer.scrollTop = this._scrollTop;\n  }\n/**\n * Sets the selected option based on a value. If no option can be\n * found with the designated value, the select trigger is cleared.\n * @param {?} value\n * @return {?}\n */\nprivate _setSelectionByValue(value: any | any[]): void {\n    const /** @type {?} */ isArray = Array.isArray(value);\n\n    if (this.multiple && value && !isArray) {\n      throw getMdSelectNonArrayValueError();\n    }\n\n    this._clearSelection();\n\n    if (isArray) {\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectValue(value);\n    }\n\n    this._setValueWidth();\n\n    if (this._selectionModel.isEmpty()) {\n      this._placeholderState = '';\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Finds and selects and option based on its value.\n * @param {?} value\n * @return {?} Option that has the corresponding value.\n */\nprivate _selectValue(value: any): MdOption {\n    let /** @type {?} */ optionsArray = this.options.toArray();\n    let /** @type {?} */ correspondingOption = optionsArray.find(option => option.value && option.value === value);\n\n    if (correspondingOption) {\n      correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this._keyManager.setActiveItem(optionsArray.indexOf(correspondingOption));\n    }\n\n    return correspondingOption;\n  }\n/**\n * Clears the select trigger and deselects every option in the list.\n * @param {?=} skip Option that should not be deselected.\n * @return {?}\n */\nprivate _clearSelection(skip?: MdOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _getTriggerRect(): ClientRect {\n    return this.trigger.nativeElement.getBoundingClientRect();\n  }\n/**\n * Sets up a key manager to listen to keyboard events on the overlay panel.\n * @return {?}\n */\nprivate _initKeyManager() {\n    this._keyManager = new FocusKeyManager(this.options);\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close());\n  }\n/**\n * Drops current option subscriptions and IDs and resets from scratch.\n * @return {?}\n */\nprivate _resetOptions(): void {\n    this._dropSubscriptions();\n    this._listenToOptions();\n    this._setOptionIds();\n    this._setOptionMultiple();\n  }\n/**\n * Listens to user-generated selection events on each option.\n * @return {?}\n */\nprivate _listenToOptions(): void {\n    this._optionSubscription = this.optionSelectionChanges\n      .filter(event => event.isUserInput)\n      .subscribe(event => {\n        this._onSelect(event.source);\n        this._setValueWidth();\n\n        if (!this.multiple) {\n          this.close();\n        }\n      });\n  }\n/**\n * Invoked when an option is clicked.\n * @param {?} option\n * @return {?}\n */\nprivate _onSelect(option: MdOption): void {\n    const /** @type {?} */ wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      wasSelected ? option.deselect() : option.select();\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? null : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n/**\n * Sorts the model values, ensuring that they keep the same\n * order that they have in the panel.\n * @return {?}\n */\nprivate _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n    }\n  }\n/**\n * Unsubscribes from all option subscriptions.\n * @return {?}\n */\nprivate _dropSubscriptions(): void {\n    if (this._optionSubscription) {\n      this._optionSubscription.unsubscribe();\n      this._optionSubscription = null;\n    }\n  }\n/**\n * Emits change event to set the model value.\n * @param {?=} fallbackValue\n * @return {?}\n */\nprivate _propagateChanges(fallbackValue?: any): void {\n    let /** @type {?} */ valueToEmit = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n\n    this._onChange(valueToEmit);\n    this.change.emit(new MdSelectChange(this, valueToEmit));\n  }\n/**\n * Records option IDs to pass to the aria-owns property.\n * @return {?}\n */\nprivate _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n/**\n * Sets the `multiple` property on each option. The promise is necessary\n * in order to avoid Angular errors when modifying the property after init.\n * @return {?}\n */\nprivate _setOptionMultiple() {\n    if (this.multiple) {\n      Promise.resolve(null).then(() => {\n        this.options.forEach(option => option.multiple = this.multiple);\n      });\n    }\n  }\n/**\n * Must set the width of the selected option's value programmatically\n * because it is absolutely positioned and otherwise will not clip\n * overflow. The selection arrow is 9px wide, add 4px of padding = 13\n * @return {?}\n */\nprivate _setValueWidth() {\n    this._selectedValueWidth =  this._triggerWidth - 13;\n  }\n/**\n * Focuses the selected item. If no option is selected, it will focus\n * the first item instead.\n * @return {?}\n */\nprivate _focusCorrectOption(): void {\n    if (this._selectionModel.isEmpty()) {\n      this._keyManager.setFirstItemActive();\n    } else {\n      this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0]));\n    }\n  }\n/**\n * Focuses the host element when the panel closes.\n * @return {?}\n */\nprivate _focusHost(): void {\n    this._element.nativeElement.focus();\n  }\n/**\n * Gets the index of the provided option in the option list.\n * @param {?} option\n * @return {?}\n */\nprivate _getOptionIndex(option: MdOption): number {\n    return this.options.reduce((result: number, current: MdOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n/**\n * Calculates the scroll position and x- and y-offsets of the overlay panel.\n * @return {?}\n */\nprivate _calculateOverlayPosition(): void {\n    const /** @type {?} */ panelHeight =\n        Math.min(this.options.length * SELECT_OPTION_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ scrollContainerHeight = this.options.length * SELECT_OPTION_HEIGHT;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const /** @type {?} */ maxScroll = scrollContainerHeight - panelHeight;\n\n    if (this._selectionModel.hasValue()) {\n      const /** @type {?} */ selectedIndex = this._getOptionIndex(this._selectionModel.selected[0]);\n      // We must maintain a scroll buffer so the selected option will be scrolled to the\n      // center of the overlay panel rather than the top.\n      const /** @type {?} */ scrollBuffer = panelHeight / 2;\n      this._scrollTop = this._calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll);\n      this._offsetY = this._calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll);\n    } else {\n      // If no option is selected, the panel centers on the first option. In this case,\n      // we must only adjust for the height difference between the option element\n      // and the trigger element, then multiply it by -1 to ensure the panel moves\n      // in the correct direction up the page.\n      this._offsetY = (SELECT_OPTION_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2 * -1;\n    }\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n/**\n * Calculates the scroll position of the select's overlay panel.\n * \n * Attempts to center the selected option in the panel. If the option is\n * too high or too low in the panel to be scrolled to the center, it clamps the\n * scroll position to the min or max scroll positions respectively.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\n_calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const /** @type {?} */ optionOffsetFromScrollTop = SELECT_OPTION_HEIGHT * selectedIndex;\n    const /** @type {?} */ halfOptionHeight = SELECT_OPTION_HEIGHT / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const /** @type {?} */ optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return clampValue(0, optimalScrollPosition, maxScroll);\n  }\n/**\n * Figures out the appropriate animation state for the placeholder.\n * @return {?}\n */\n_getPlaceholderAnimationState(): string {\n    if (this.floatPlaceholder === 'never') {\n      return '';\n    }\n\n    if (this.floatPlaceholder === 'always') {\n      return this._floatPlaceholderState();\n    }\n\n    return this._placeholderState;\n  }\n/**\n * Determines the CSS `opacity` of the placeholder element.\n * @return {?}\n */\n_getPlaceholderOpacity(): string {\n    return (this.floatPlaceholder !== 'never' || this._selectionModel.isEmpty()) ?\n        '1' : '0';\n  }\n/**\n * Returns the aria-label of the select component.\n * @return {?}\n */\nget _ariaLabel(): string {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n/**\n * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text when\n * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n * can't be calculated until the panel has been attached, because we need to know the\n * content width in order to constrain the panel within the viewport.\n * @return {?}\n */\nprivate _calculateOverlayOffsetX(): void {\n    const /** @type {?} */ overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ isRtl = this._isRtl();\n    let /** @type {?} */ offsetX = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X : SELECT_PANEL_PADDING_X;\n\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    const /** @type {?} */ leftOverflow = 0 - (overlayRect.left + offsetX\n        - (isRtl ? SELECT_PANEL_PADDING_X * 2 : 0));\n    const /** @type {?} */ rightOverflow = overlayRect.right + offsetX - viewportRect.width\n        + (isRtl ? 0 : SELECT_PANEL_PADDING_X * 2);\n\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n/**\n * Calculates the y-offset of the select's overlay panel in relation to the\n * top start corner of the trigger. It has to be adjusted in order for the\n * selected option to be aligned over the trigger when the panel opens.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    let /** @type {?} */ optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * SELECT_OPTION_HEIGHT;\n    } else if (this._scrollTop === maxScroll) {\n      const /** @type {?} */ firstDisplayedIndex = this.options.length - SELECT_MAX_OPTIONS_DISPLAYED;\n      const /** @type {?} */ selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop =\n          selectedDisplayIndex * SELECT_OPTION_HEIGHT + SELECT_PANEL_PADDING_Y;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - SELECT_OPTION_HEIGHT / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - SELECT_OPTION_HEIGHT_ADJUSTMENT;\n  }\n/**\n * Checks that the attempted overlay position will fit within the viewport.\n * If it will not fit, tries to adjust the scroll position and the associated\n * y-offset so the panel can open fully on-screen. If it still won't fit,\n * sets the offset back to 0 to allow the fallback position to take over.\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _checkOverlayWithinViewport(maxScroll: number): void {\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ triggerRect = this._getTriggerRect();\n\n    const /** @type {?} */ topSpaceAvailable = triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const /** @type {?} */ bottomSpaceAvailable =\n        viewportRect.height - triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const /** @type {?} */ panelHeightTop = Math.abs(this._offsetY);\n    const /** @type {?} */ totalPanelHeight =\n        Math.min(this.options.length * SELECT_OPTION_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ panelHeightBottom = totalPanelHeight - panelHeightTop - triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n/**\n * Adjusts the overlay panel up to fit in the viewport.\n * @param {?} panelHeightBottom\n * @param {?} bottomSpaceAvailable\n * @return {?}\n */\nprivate _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    const /** @type {?} */ distanceBelowViewport = panelHeightBottom - bottomSpaceAvailable;\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n/**\n * Adjusts the overlay panel down to fit in the viewport.\n * @param {?} panelHeightTop\n * @param {?} topSpaceAvailable\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    const /** @type {?} */ distanceAboveViewport = panelHeightTop - topSpaceAvailable;\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n/**\n * Sets the transform origin point based on the selected option.\n * @return {?}\n */\nprivate _getOriginBasedOnOption(): string {\n    const /** @type {?} */ originY =\n        Math.abs(this._offsetY) - SELECT_OPTION_HEIGHT_ADJUSTMENT + SELECT_OPTION_HEIGHT / 2;\n    return `50% ${originY}px 0px`;\n  }\n/**\n * Figures out the floating placeholder state value.\n * @return {?}\n */\nprivate _floatPlaceholderState(): string {\n    return this._isRtl() ? 'floating-rtl' : 'floating-ltr';\n  }\n/**\n * Handles the user pressing the arrow keys on a closed select.\n * @param {?} event\n * @return {?}\n */\nprivate _handleArrowKey(event: KeyboardEvent): void {\n    if (this._multiple) {\n      event.preventDefault();\n      this.open();\n    } else {\n      const /** @type {?} */ prevActiveItem = this._keyManager.activeItem;\n\n      // Cycle though the select options even when the select is closed,\n      // matching the behavior of the native select element.\n      // TODO(crisbeto): native selects also cycle through the options with left/right arrows,\n      // however the key manager only supports up/down at the moment.\n      this._keyManager.onKeydown(event);\n\n      const /** @type {?} */ currentActiveItem = /** @type {?} */(( this._keyManager.activeItem as MdOption));\n\n      if (currentActiveItem !== prevActiveItem) {\n        this._clearSelection();\n        this._setSelectionByValue(currentActiveItem.value);\n        this._propagateChanges();\n      }\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-select, mat-select',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    'role': 'listbox',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': '_control?.invalid || \"false\"',\n    '[attr.aria-owns]': '_optionIds',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select]': 'true',\n    '(keydown)': '_handleClosedKeydown($event)',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    transformPlaceholder,\n    transformPanel,\n    fadeInContent\n  ],\n  exportAs: 'mdSelect',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewportRuler, },\n{type: ChangeDetectorRef, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n{type: NgControl, decorators: [{ type: Self }, { type: Optional }, ]},\n{type: undefined, decorators: [{ type: Attribute, args: ['tabindex', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: ViewChild, args: ['trigger', ] },],\n'overlayDir': [{ type: ViewChild, args: [ConnectedOverlayDirective, ] },],\n'options': [{ type: ContentChildren, args: [MdOption, ] },],\n'placeholder': [{ type: Input },],\n'disabled': [{ type: Input },],\n'required': [{ type: Input },],\n'multiple': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'color': [{ type: Input },],\n'onOpen': [{ type: Output },],\n'onClose': [{ type: Output },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdSelect_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelect.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelect.ctorParameters;\n/** @type {?} */\nMdSelect.propDecorators;\n/**\n * Whether or not the overlay panel is open.\n * @type {?}\n */\nMdSelect.prototype._panelOpen;\n/**\n * Subscriptions to option events.\n * @type {?}\n */\nMdSelect.prototype._optionSubscription;\n/**\n * Subscription to changes in the option list.\n * @type {?}\n */\nMdSelect.prototype._changeSubscription;\n/**\n * Subscription to tab events while overlay is focused.\n * @type {?}\n */\nMdSelect.prototype._tabSubscription;\n/**\n * Whether filling out the select is required in the form.\n * @type {?}\n */\nMdSelect.prototype._required;\n/**\n * Whether the select is disabled.\n * @type {?}\n */\nMdSelect.prototype._disabled;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n * @type {?}\n */\nMdSelect.prototype._scrollTop;\n/**\n * The placeholder displayed in the trigger of the select.\n * @type {?}\n */\nMdSelect.prototype._placeholder;\n/**\n * Whether the component is in multiple selection mode.\n * @type {?}\n */\nMdSelect.prototype._multiple;\n/**\n * Deals with the selection logic.\n * @type {?}\n */\nMdSelect.prototype._selectionModel;\n/**\n * The animation state of the placeholder.\n * @type {?}\n */\nMdSelect.prototype._placeholderState;\n/**\n * Tab index for the element.\n * @type {?}\n */\nMdSelect.prototype._tabIndex;\n/**\n * Theme color for the component.\n * @type {?}\n */\nMdSelect.prototype._color;\n/**\n * The width of the trigger. Must be saved to set the min width of the overlay panel\n * and the width of the selected value.\n * @type {?}\n */\nMdSelect.prototype._triggerWidth;\n/**\n * Manages keyboard events for options in the panel.\n * @type {?}\n */\nMdSelect.prototype._keyManager;\n/**\n * The width of the selected option's value. Must be set programmatically\n * to ensure its overflow is clipped, as it's absolutely positioned.\n * @type {?}\n */\nMdSelect.prototype._selectedValueWidth;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdSelect.prototype._onChange;\n/**\n * View -> model callback called when select has been touched\n * @type {?}\n */\nMdSelect.prototype._onTouched;\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n * @type {?}\n */\nMdSelect.prototype._optionIds;\n/**\n * The value of the select panel's transform-origin property.\n * @type {?}\n */\nMdSelect.prototype._transformOrigin;\n/**\n * Whether the panel's animation is done.\n * @type {?}\n */\nMdSelect.prototype._panelDoneAnimating;\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n * @type {?}\n */\nMdSelect.prototype._offsetY;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n * @type {?}\n */\nMdSelect.prototype._positions;\n/**\n * Trigger that opens the select.\n * @type {?}\n */\nMdSelect.prototype.trigger;\n/**\n * Overlay pane containing the options.\n * @type {?}\n */\nMdSelect.prototype.overlayDir;\n/**\n * All of the defined select options.\n * @type {?}\n */\nMdSelect.prototype.options;\n/** @type {?} */\nMdSelect.prototype._floatPlaceholder;\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n * @type {?}\n */\nMdSelect.prototype.ariaLabel;\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n * @type {?}\n */\nMdSelect.prototype.ariaLabelledby;\n/**\n * Event emitted when the select has been opened.\n * @type {?}\n */\nMdSelect.prototype.onOpen;\n/**\n * Event emitted when the select has been closed.\n * @type {?}\n */\nMdSelect.prototype.onClose;\n/**\n * Event emitted when the selected value has been changed by the user.\n * @type {?}\n */\nMdSelect.prototype.change;\n/** @type {?} */\nMdSelect.prototype._element;\n/** @type {?} */\nMdSelect.prototype._renderer;\n/** @type {?} */\nMdSelect.prototype._viewportRuler;\n/** @type {?} */\nMdSelect.prototype._changeDetectorRef;\n/** @type {?} */\nMdSelect.prototype._dir;\n/** @type {?} */\nMdSelect.prototype._control;\n}\n\n/**\n * Clamps a value n between min and max values.\n * @param {?} min\n * @param {?} n\n * @param {?} max\n * @return {?}\n */\nfunction clampValue(min: number, n: number, max: number): number {\n  return Math.min(Math.max(min, n), max);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Returns an exception to be thrown when attempting to change a s\n * elect's `multiple` option after initialization.\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSelectDynamicMultipleError(): Error {\n  return new Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSelectNonArrayValueError(): Error {\n  return new Error('Cannot assign truthy non-array value to select in `multiple` mode.');\n}\n","import {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n/**\n * This animation shrinks the placeholder text to 75% of its normal size and translates\n * it to either the top left corner (ltr) or top right corner (rtl) of the trigger,\n * depending on the text direction of the application.\n */\nexport const transformPlaceholder: AnimationTriggerMetadata = trigger('transformPlaceholder', [\n  state('floating-ltr', style({\n    top: '-22px',\n    left: '-2px',\n    transform: `scale(0.75)`\n  })),\n  state('floating-rtl', style({\n    top: '-22px',\n    left: '2px',\n    transform: `scale(0.75)`\n  })),\n  transition('* => *', animate(`400ms cubic-bezier(0.25, 0.8, 0.25, 1)`))\n]);\n/**\n * This animation transforms the select's overlay panel on and off the page.\n * \n * When the panel is attached to the DOM, it expands its width 32px, scales it up to\n * 100% on the Y axis, fades in its border, and translates slightly up and to the\n * side to ensure the option text correctly overlaps the trigger text.\n * \n * When the panel is removed from the DOM, it simply fades out linearly.\n */\nexport const transformPanel: AnimationTriggerMetadata = trigger('transformPanel', [\n  state('showing', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)',\n    transform: `scaleY(1)`\n  })),\n  transition('void => *', [\n    style({\n      opacity: 0,\n      minWidth: '100%',\n      transform: `scaleY(0)`\n    }),\n    animate(`150ms cubic-bezier(0.25, 0.8, 0.25, 1)`)\n  ]),\n  transition('* => void', [\n    animate('250ms 100ms linear', style({opacity: 0}))\n  ])\n]);\n/**\n * This animation fades in the background color and text content of the\n * select's options. It is time delayed to occur 100ms after the overlay\n * panel has transformed in.\n */\nexport const fadeInContent: AnimationTriggerMetadata  =  trigger('fadeInContent', [\n  state('showing', style({opacity: 1})),\n  transition('void => showing', [\n    style({opacity: 0}),\n    animate(`150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)`)\n  ])\n]);\n","\nimport {QueryList} from '@angular/core';\nimport {ListKeyManager, CanDisable} from './list-key-manager';\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself and whether or not it is currently disabled.\n */\nexport interface Focusable extends CanDisable {\n  focus(): void;\n}\nexport class FocusKeyManager extends ListKeyManager<Focusable> {\n/**\n * @param {?} items\n */\nconstructor(items: QueryList<Focusable>) {\n    super(items);\n  }\n/**\n * This method sets the active item to the item at the specified index.\n * It also adds focuses the newly active item.\n * @param {?} index\n * @return {?}\n */\nsetActiveItem(index: number): void {\n    super.setActiveItem(index);\n\n    if (this.activeItem) {\n      this.activeItem.focus();\n    }\n  }\n\n}\n","import {QueryList} from '@angular/core';\nimport {UP_ARROW, DOWN_ARROW, TAB} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * This interface is for items that can be disabled. The type passed into\n * ListKeyManager must extend this interface.\n */\nexport interface CanDisable {\n  disabled?: boolean;\n}\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager<T extends CanDisable> {\nprivate _activeItemIndex: number = null;\nprivate _activeItem: T;\nprivate _tabOut = new Subject<void>();\nprivate _wrap: boolean = false;\n/**\n * @param {?} _items\n */\nconstructor(private _items: QueryList<T>) {\n  }\n/**\n * Turns on wrapping mode, which ensures that the active item will wrap to\n * the other end of list when there are no more items in the given direction.\n * \n * @return {?} The ListKeyManager that the method was called on.\n */\nwithWrap(): this {\n    this._wrap = true;\n    return this;\n  }\n/**\n * Sets the active item to the item at the index specified.\n * \n * @param {?} index The index of the item to be set as active.\n * @return {?}\n */\nsetActiveItem(index: number): void {\n    this._activeItemIndex = index;\n    this._activeItem = this._items.toArray()[index];\n  }\n/**\n * Sets the active item depending on the key event passed in.\n * @param {?} event Keyboard event to be used for determining which element should be active.\n * @return {?}\n */\nonKeydown(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case DOWN_ARROW:\n        this.setNextItemActive();\n        break;\n      case UP_ARROW:\n        this.setPreviousItemActive();\n        break;\n      case TAB:\n        // Note that we shouldn't prevent the default action on tab.\n        this._tabOut.next(null);\n        return;\n      default:\n        return;\n    }\n\n    event.preventDefault();\n  }\n/**\n * Returns the index of the currently active item.\n * @return {?}\n */\nget activeItemIndex(): number {\n    return this._activeItemIndex;\n  }\n/**\n * Returns the currently active item.\n * @return {?}\n */\nget activeItem(): T {\n    return this._activeItem;\n  }\n/**\n * Sets the active item to the first enabled item in the list.\n * @return {?}\n */\nsetFirstItemActive(): void {\n    this._setActiveItemByIndex(0, 1);\n  }\n/**\n * Sets the active item to the last enabled item in the list.\n * @return {?}\n */\nsetLastItemActive(): void {\n    this._setActiveItemByIndex(this._items.length - 1, -1);\n  }\n/**\n * Sets the active item to the next enabled item in the list.\n * @return {?}\n */\nsetNextItemActive(): void {\n    this._activeItemIndex === null ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n/**\n * Sets the active item to a previous enabled item in the list.\n * @return {?}\n */\nsetPreviousItemActive(): void {\n    this._activeItemIndex === null && this._wrap ? this.setLastItemActive()\n                                                 : this._setActiveItemByDelta(-1);\n  }\n/**\n * Allows setting of the activeItemIndex without any other effects.\n * @param {?} index The new activeItemIndex.\n * @return {?}\n */\nupdateActiveItemIndex(index: number) {\n    this._activeItemIndex = index;\n  }\n/**\n * Observable that emits any time the TAB key is pressed, so components can react\n * when focus is shifted off of the list.\n * @return {?}\n */\nget tabOut(): Observable<void> {\n    return this._tabOut.asObservable();\n  }\n/**\n * This method sets the active item, given a list of items and the delta between the\n * currently active item and the new active item. It will calculate differently\n * depending on whether wrap mode is turned on.\n * @param {?} delta\n * @param {?=} items\n * @return {?}\n */\nprivate _setActiveItemByDelta(delta: number, items = this._items.toArray()): void {\n    this._wrap ? this._setActiveInWrapMode(delta, items)\n               : this._setActiveInDefaultMode(delta, items);\n  }\n/**\n * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n * down the list until it finds an item that is not disabled, and it will wrap if it\n * encounters either end of the list.\n * @param {?} delta\n * @param {?} items\n * @return {?}\n */\nprivate _setActiveInWrapMode(delta: number, items: T[]): void {\n    // when active item would leave menu, wrap to beginning or end\n    this._activeItemIndex =\n      (this._activeItemIndex + delta + items.length) % items.length;\n\n    // skip all disabled menu items recursively until an enabled one is reached\n    if (items[this._activeItemIndex].disabled) {\n      this._setActiveInWrapMode(delta, items);\n    } else {\n      this.setActiveItem(this._activeItemIndex);\n    }\n  }\n/**\n * Sets the active item properly given the default mode. In other words, it will\n * continue to move down the list until it finds an item that is not disabled. If\n * it encounters either end of the list, it will stop and not wrap.\n * @param {?} delta\n * @param {?} items\n * @return {?}\n */\nprivate _setActiveInDefaultMode(delta: number, items: T[]): void {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta, items);\n  }\n/**\n * Sets the active item to the first enabled item starting at the index specified. If the\n * item is disabled, it will move in the fallbackDelta direction until it either\n * finds an enabled item or encounters the end of the list.\n * @param {?} index\n * @param {?} fallbackDelta\n * @param {?=} items\n * @return {?}\n */\nprivate _setActiveItemByIndex(index: number, fallbackDelta: number,\n                                  items = this._items.toArray()): void {\n    if (!items[index]) { return; }\n    while (items[index].disabled) {\n      index += fallbackDelta;\n      if (!items[index]) { return; }\n    }\n    this.setActiveItem(index);\n  }\n\n}\n\nfunction ListKeyManager_tsickle_Closure_declarations() {\n/** @type {?} */\nListKeyManager.prototype._activeItemIndex;\n/** @type {?} */\nListKeyManager.prototype._activeItem;\n/** @type {?} */\nListKeyManager.prototype._tabOut;\n/** @type {?} */\nListKeyManager.prototype._wrap;\n/** @type {?} */\nListKeyManager.prototype._items;\n}\n\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {VIEWPORT_RULER_PROVIDER} from '../core/overlay/position/viewport-ruler';\nimport {\n  MdRippleModule,\n  MdCommonModule,\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n  FocusOriginMonitor,\n} from '../core';\nimport {MdRadioGroup, MdRadioButton} from './radio';\nexport class MdRadioModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdRippleModule, MdCommonModule],\n  exports: [MdRadioGroup, MdRadioButton, MdCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER, VIEWPORT_RULER_PROVIDER, FocusOriginMonitor],\n  declarations: [MdRadioGroup, MdRadioButton],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRadioModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioModule.ctorParameters;\n}\n\n\n\nexport {MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,MdRadioChange,MdRadioGroupBase,_MdRadioGroupMixinBase,MdRadioGroup,MdRadioButton} from './radio';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Renderer2,\n  EventEmitter,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  forwardRef,\n  ViewChild,\n  OnDestroy,\n  AfterViewInit,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {\n  RippleRef,\n  UniqueSelectionDispatcher,\n  MdRipple,\n  FocusOriginMonitor,\n  FocusOrigin,\n} from '../core';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\n/**\n * Provider Expression that allows md-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * \\@docs-private\n */\nexport const MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdRadioGroup),\n  multi: true\n};\n\nlet /** @type {?} */ _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MdRadio and MdRadioGroup.\n */\nexport class MdRadioChange {\n/**\n * The MdRadioButton that emits the change event.\n */\nsource: MdRadioButton;\n/**\n * The value of the MdRadioButton.\n */\nvalue: any;\n}\n\nfunction MdRadioChange_tsickle_Closure_declarations() {\n/**\n * The MdRadioButton that emits the change event.\n * @type {?}\n */\nMdRadioChange.prototype.source;\n/**\n * The value of the MdRadioButton.\n * @type {?}\n */\nMdRadioChange.prototype.value;\n}\n\nexport class MdRadioGroupBase { }\nexport const /** @type {?} */ _MdRadioGroupMixinBase = mixinDisabled(MdRadioGroupBase);\n/**\n * A group of radio buttons. May contain one or more `<md-radio-button>` elements.\n */\nexport class MdRadioGroup extends _MdRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\n * a corresponding radio button with a matching value. If there is *not* such a corresponding\n * radio button, this value persists to be applied in case a new radio button is added with a\n * matching value.\n */\nprivate _value: any = null;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n */\nprivate _name: string = `md-radio-group-${_uniqueIdCounter++}`;\n/**\n * The currently selected radio button. Should match value.\n */\nprivate _selected: MdRadioButton = null;\n/**\n * Whether the `value` has been set to its initial value.\n */\nprivate _isInitialized: boolean = false;\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n */\nprivate _labelPosition: 'before' | 'after' = 'after';\n/**\n * Whether the radio group is disabled.\n */\nprivate _disabled: boolean = false;\n/**\n * The method to be called in order to update ngModel\n */\n_controlValueAccessorChangeFn: (value: any) => void = (value) => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * \\@docs-private\n */\nonTouched: () => any = () => {};\n/**\n * Event emitted when the group value changes.\n * Change events are only emitted when the value changes due to user interaction with\n * a radio button (the same behavior as `<input type-\"radio\">`).\n */\nchange: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n/**\n * Child radio buttons.\n */\n_radios: QueryList<MdRadioButton> = null;\n/**\n * Name of the radio button group. All radio buttons inside this group will use this name.\n * @return {?}\n */\nget name(): string { return this._name; }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n/**\n * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n * @return {?}\n */\nget labelPosition() {\n    return this._labelPosition;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n/**\n * Value of the radio button.\n * @return {?}\n */\nget value(): any { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n/**\n * @return {?}\n */\n_checkSelectedRadioButton() {\n    if (this.selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n/**\n * Whether the radio button is selected.\n * @return {?}\n */\nget selected() { return this._selected; }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MdRadioButton) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n/**\n * Whether the radio group is diabled\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = value;\n    this._markRadiosForCheck();\n  }\n/**\n * @param {?} _changeDetector\n */\nconstructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n/**\n * Initialize properties once content children are available.\n * This allows us to propagate relevant attributes to associated buttons.\n * @return {?}\n */\nngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MdRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MdRadioGroup.\n    this._isInitialized = true;\n  }\n/**\n * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n * radio buttons upon their blur.\n * @return {?}\n */\n_touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n/**\n * Updates the `selected` radio button from the internal _value state.\n * @return {?}\n */\nprivate _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    let /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\n_emitChangeEvent(): void {\n    if (this._isInitialized) {\n      let /** @type {?} */ event = new MdRadioChange();\n      event.source = this._selected;\n      event.value = this._value;\n      this.change.emit(event);\n    }\n  }\n/**\n * @return {?}\n */\n_markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n/**\n * Registers a callback to be triggered when the model value changes.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the control is touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled Whether the control should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-radio-group, mat-radio-group',\n  providers: [MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    '[class.mat-radio-group]': 'true',\n  },\n  inputs: ['disabled'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'change': [{ type: Output },],\n'_radios': [{ type: ContentChildren, args: [forwardRef(() => MdRadioButton), ] },],\n'name': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdRadioGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioGroup.ctorParameters;\n/** @type {?} */\nMdRadioGroup.propDecorators;\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\n * a corresponding radio button with a matching value. If there is *not* such a corresponding\n * radio button, this value persists to be applied in case a new radio button is added with a\n * matching value.\n * @type {?}\n */\nMdRadioGroup.prototype._value;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n * @type {?}\n */\nMdRadioGroup.prototype._name;\n/**\n * The currently selected radio button. Should match value.\n * @type {?}\n */\nMdRadioGroup.prototype._selected;\n/**\n * Whether the `value` has been set to its initial value.\n * @type {?}\n */\nMdRadioGroup.prototype._isInitialized;\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n * @type {?}\n */\nMdRadioGroup.prototype._labelPosition;\n/**\n * Whether the radio group is disabled.\n * @type {?}\n */\nMdRadioGroup.prototype._disabled;\n/**\n * The method to be called in order to update ngModel\n * @type {?}\n */\nMdRadioGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * \\@docs-private\n * @type {?}\n */\nMdRadioGroup.prototype.onTouched;\n/**\n * Event emitted when the group value changes.\n * Change events are only emitted when the value changes due to user interaction with\n * a radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMdRadioGroup.prototype.change;\n/**\n * Child radio buttons.\n * @type {?}\n */\nMdRadioGroup.prototype._radios;\n/** @type {?} */\nMdRadioGroup.prototype._changeDetector;\n}\n\n/**\n * A radio-button. May be inside of\n */\nexport class MdRadioButton implements OnInit, AfterViewInit, OnDestroy {\n/**\n * The unique ID for the radio button.\n */\nid: string = `md-radio-${_uniqueIdCounter++}`;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n */\nname: string;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n */\nariaLabel: string;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n */\nariaLabelledby: string;\n/**\n * Whether the ripple effect for this radio button is disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * Whether this radio button is checked.\n * @return {?}\n */\nget checked(): boolean {\n    return this._checked;\n  }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n/**\n * The value of this radio button.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n/**\n * Whether or not the radio-button should appear before or after the label.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\nprivate _labelPosition: 'before' | 'after';\n/**\n * Whether the label should appear after or before the radio button. Defaults to 'after'\n * @return {?}\n */\nget labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset labelPosition(value) {\n    this._labelPosition = value;\n  }\n/**\n * Whether the radio button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Event emitted when the checked state of this radio button changes.\n * Change events are only emitted when the value changes due to user interaction with\n * the radio button (the same behavior as `<input type-\"radio\">`).\n */\nchange: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n/**\n * The parent radio group. May or may not be present.\n */\nradioGroup: MdRadioGroup;\n/**\n * ID of the native input element inside `<md-radio-button>`\n * @return {?}\n */\nget inputId(): string {\n    return `${this.id}-input`;\n  }\n/**\n * Whether this radio is checked.\n */\nprivate _checked: boolean = false;\n/**\n * Whether this radio is disabled.\n */\nprivate _disabled: boolean;\n/**\n * Value assigned to this radio.\n */\nprivate _value: any = null;\n/**\n * Whether the ripple effect on click should be disabled.\n */\nprivate _disableRipple: boolean;\n/**\n * The child ripple instance.\n */\n_ripple: MdRipple;\n/**\n * Reference to the current focus ripple.\n */\nprivate _focusRipple: RippleRef;\n/**\n * The native `<input type=radio>` element\n */\n_inputElement: ElementRef;\n/**\n * @param {?} radioGroup\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _changeDetector\n * @param {?} _focusOriginMonitor\n * @param {?} _radioDispatcher\n */\nconstructor( radioGroup: MdRadioGroup,\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _changeDetector: ChangeDetectorRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\nprivate _radioDispatcher: UniqueSelectionDispatcher) {\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n\n    this.radioGroup = radioGroup;\n\n    _radioDispatcher.listen((id: string, name: string) => {\n      if (id != this.id && name == this.name) {\n        this.checked = false;\n      }\n    });\n  }\n/**\n * Focuses the radio button.\n * @return {?}\n */\nfocus(): void {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, this._renderer, 'keyboard');\n  }\n/**\n * Marks the radio button as needing checking for change detection.\n * This method is exposed because the parent radio group will directly\n * update bound properties of the radio button.\n * @return {?}\n */\n_markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdRadioChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Triggered when the radio button received a click or the input recognized any change.\n * Clicking on a label element, will trigger a change event on the associated input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    let /** @type {?} */ groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-radio-button, mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    '[class.mat-radio-button]': 'true',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdRadioGroup, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ChangeDetectorRef, },\n{type: FocusOriginMonitor, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n'name': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'disableRipple': [{ type: Input },],\n'checked': [{ type: Input },],\n'value': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'disabled': [{ type: Input },],\n'change': [{ type: Output },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n};\n}\n\nfunction MdRadioButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioButton.ctorParameters;\n/** @type {?} */\nMdRadioButton.propDecorators;\n/**\n * The unique ID for the radio button.\n * @type {?}\n */\nMdRadioButton.prototype.id;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMdRadioButton.prototype.name;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n * @type {?}\n */\nMdRadioButton.prototype.ariaLabel;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n * @type {?}\n */\nMdRadioButton.prototype.ariaLabelledby;\n/** @type {?} */\nMdRadioButton.prototype._labelPosition;\n/**\n * Event emitted when the checked state of this radio button changes.\n * Change events are only emitted when the value changes due to user interaction with\n * the radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMdRadioButton.prototype.change;\n/**\n * The parent radio group. May or may not be present.\n * @type {?}\n */\nMdRadioButton.prototype.radioGroup;\n/**\n * Whether this radio is checked.\n * @type {?}\n */\nMdRadioButton.prototype._checked;\n/**\n * Whether this radio is disabled.\n * @type {?}\n */\nMdRadioButton.prototype._disabled;\n/**\n * Value assigned to this radio.\n * @type {?}\n */\nMdRadioButton.prototype._value;\n/**\n * Whether the ripple effect on click should be disabled.\n * @type {?}\n */\nMdRadioButton.prototype._disableRipple;\n/**\n * The child ripple instance.\n * @type {?}\n */\nMdRadioButton.prototype._ripple;\n/**\n * Reference to the current focus ripple.\n * @type {?}\n */\nMdRadioButton.prototype._focusRipple;\n/**\n * The native `<input type=radio>` element\n * @type {?}\n */\nMdRadioButton.prototype._inputElement;\n/** @type {?} */\nMdRadioButton.prototype._elementRef;\n/** @type {?} */\nMdRadioButton.prototype._renderer;\n/** @type {?} */\nMdRadioButton.prototype._changeDetector;\n/** @type {?} */\nMdRadioButton.prototype._focusOriginMonitor;\n/** @type {?} */\nMdRadioButton.prototype._radioDispatcher;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdRippleModule, MdCommonModule, FocusOriginMonitor} from '../core';\nimport {MdCheckbox} from './checkbox';\nexport class MdCheckboxModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdRippleModule, MdCommonModule],\n  exports: [MdCheckbox, MdCommonModule],\n  declarations: [MdCheckbox],\n  providers: [FocusOriginMonitor]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCheckboxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckboxModule.ctorParameters;\n}\n\n\n\nexport {MD_CHECKBOX_CONTROL_VALUE_ACCESSOR,TransitionCheckState,MdCheckboxChange,MdCheckboxBase,_MdCheckboxMixinBase,MdCheckbox} from './checkbox';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\nimport {FocusOrigin, FocusOriginMonitor, MdRipple, RippleRef} from '../core';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\n/**\n * Monotonically increasing integer used to auto-generate unique ids for checkbox components.\n */\nlet nextId = 0;\n/**\n * Provider Expression that allows md-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nexport const MD_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdCheckbox),\n  multi: true\n};\nexport type TransitionCheckState = number;\nexport let TransitionCheckState: any = {};\nTransitionCheckState.Init = 0;\nTransitionCheckState.Checked = 1;\nTransitionCheckState.Unchecked = 2;\nTransitionCheckState.Indeterminate = 3;\nTransitionCheckState[TransitionCheckState.Init] = \"Init\";\nTransitionCheckState[TransitionCheckState.Checked] = \"Checked\";\nTransitionCheckState[TransitionCheckState.Unchecked] = \"Unchecked\";\nTransitionCheckState[TransitionCheckState.Indeterminate] = \"Indeterminate\";\n\n/**\n * Change event object emitted by MdCheckbox.\n */\nexport class MdCheckboxChange {\n/**\n * The source MdCheckbox of the event.\n */\nsource: MdCheckbox;\n/**\n * The new `checked` value of the checkbox.\n */\nchecked: boolean;\n}\n\nfunction MdCheckboxChange_tsickle_Closure_declarations() {\n/**\n * The source MdCheckbox of the event.\n * @type {?}\n */\nMdCheckboxChange.prototype.source;\n/**\n * The new `checked` value of the checkbox.\n * @type {?}\n */\nMdCheckboxChange.prototype.checked;\n}\n\nexport class MdCheckboxBase { }\nexport const /** @type {?} */ _MdCheckboxMixinBase = mixinDisabled(MdCheckboxBase);\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MdCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\nexport class MdCheckbox extends _MdCheckboxMixinBase\n    implements ControlValueAccessor, AfterViewInit, OnDestroy, CanDisable {\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n */\nariaLabel: string = '';\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n */\nariaLabelledby: string = null;\n/**\n * A unique id for the checkbox. If one is not supplied, it is auto-generated.\n */\nid: string = `md-checkbox-${++nextId}`;\n/**\n * Whether the ripple effect on click should be disabled.\n */\nprivate _disableRipple: boolean;\n/**\n * Whether the ripple effect for this checkbox is disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * ID of the native input element inside `<md-checkbox>`\n * @return {?}\n */\nget inputId(): string {\n    return `input-${this.id}`;\n  }\nprivate _required: boolean;\n/**\n * Whether the checkbox is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether or not the checkbox should appear before or after the label.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n/**\n * Whether the label should appear after or before the checkbox. Defaults to 'after'\n */\nlabelPosition: 'before' | 'after' = 'after';\n/**\n * Tabindex value that is passed to the underlying input element.\n */\ntabIndex: number = 0;\n/**\n * Name value will be applied to the input element if present\n */\nname: string = null;\n/**\n * Event emitted when the checkbox's `checked` value changes.\n */\nchange: EventEmitter<MdCheckboxChange> = new EventEmitter<MdCheckboxChange>();\n/**\n * Event emitted when the checkbox's `indeterminate` value changes.\n */\nindeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n/**\n * The value attribute of the native input element\n */\nvalue: string ;\n/**\n * The native `<input type=\"checkbox\"> element\n */\n_inputElement: ElementRef;\n\n   _labelWrapper: ElementRef;\n/**\n * Whether the checkbox has label\n * @return {?}\n */\n_hasLabel(): boolean {\n    const /** @type {?} */ labelText = this._labelWrapper.nativeElement.textContent || '';\n    return !!labelText.trim().length;\n  }\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n */\n_ripple: MdRipple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * \\@docs-private\n */\nonTouched: () => any = () => {};\nprivate _currentAnimationClass: string = '';\nprivate _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\nprivate _checked: boolean = false;\nprivate _indeterminate: boolean = false;\nprivate _color: string;\nprivate _controlValueAccessorChangeFn: (value: any) => void = (value) => {};\n/**\n * Reference to the focused state ripple.\n */\nprivate _focusRipple: RippleRef;\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n * @param {?} _focusOriginMonitor\n */\nconstructor(private _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n    super();\n    this.color = 'accent';\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._focusOriginMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * Whether the checkbox is checked.\n * @return {?}\n */\nget checked() {\n    return this._checked;\n  }\n/**\n * @param {?} checked\n * @return {?}\n */\nset checked(checked: boolean) {\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n * set to false.\n * @return {?}\n */\nget indeterminate() {\n    return this._indeterminate;\n  }\n/**\n * @param {?} indeterminate\n * @return {?}\n */\nset indeterminate(indeterminate: boolean) {\n    let /** @type {?} */ changed =  indeterminate != this._indeterminate;\n    this._indeterminate = indeterminate;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n/**\n * The color of the button. Can be `primary`, `accent`, or `warn`.\n * @return {?}\n */\nget color(): string { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) { this._updateColor(value); }\n/**\n * @param {?} newColor\n * @return {?}\n */\n_updateColor(newColor: string) {\n    this._setElementColor(this._color, false);\n    this._setElementColor(newColor, true);\n    this._color = newColor;\n  }\n/**\n * @param {?} color\n * @param {?} isAdd\n * @return {?}\n */\n_setElementColor(color: string, isAdd: boolean) {\n    if (color != null && color != '') {\n      if (isAdd) {\n        this._renderer.addClass(this._elementRef.nativeElement, `mat-${color}`);\n      } else {\n        this._renderer.removeClass(this._elementRef.nativeElement, `mat-${color}`);\n      }\n    }\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value Value to be set to the model.\n * @return {?}\n */\nwriteValue(value: any) {\n    this.checked = !!value;\n  }\n/**\n * Registers a callback to be triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Function to be called on change.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the control has been touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be triggered when the checkbox is touched.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled Whether the checkbox should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * @param {?} newState\n * @return {?}\n */\nprivate _transitionCheckState(newState: TransitionCheckState) {\n    let /** @type {?} */ oldState = this._currentCheckState;\n    let /** @type {?} */ renderer = this._renderer;\n    let /** @type {?} */ elementRef = this._elementRef;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      renderer.removeClass(elementRef.nativeElement, this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      renderer.addClass(elementRef.nativeElement, this._currentAnimationClass);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    let /** @type {?} */ event = new MdCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this.onTouched();\n    }\n  }\n/**\n * Toggles the `checked` state of the checkbox.\n * @return {?}\n */\ntoggle(): void {\n    this.checked = !this.checked;\n  }\n/**\n * Event handler for checkbox input element.\n * Toggles checked state if element is not disabled.\n * Do not toggle on (change) event since IE doesn't fire change event when\n *   indeterminate checkbox is clicked.\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    this._removeFocusRipple();\n\n    if (!this.disabled) {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this._indeterminate) {\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n        this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    }\n  }\n/**\n * Focuses the checkbox.\n * @return {?}\n */\nfocus(): void {\n    this._focusOriginMonitor.focusVia(this._inputElement.nativeElement, this._renderer, 'keyboard');\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n/**\n * @param {?} oldState\n * @param {?} newState\n * @return {?}\n */\nprivate _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let /** @type {?} */ animSuffix: string;\n\n    switch (oldState) {\n    case TransitionCheckState.Init:\n      // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n      // [checked] bound to it.\n      if (newState === TransitionCheckState.Checked) {\n        animSuffix = 'unchecked-checked';\n      } else if (newState == TransitionCheckState.Indeterminate) {\n        animSuffix = 'unchecked-indeterminate';\n      } else {\n        return '';\n      }\n      break;\n    case TransitionCheckState.Unchecked:\n      animSuffix = newState === TransitionCheckState.Checked ?\n          'unchecked-checked' : 'unchecked-indeterminate';\n      break;\n    case TransitionCheckState.Checked:\n      animSuffix = newState === TransitionCheckState.Unchecked ?\n          'checked-unchecked' : 'checked-indeterminate';\n      break;\n    case TransitionCheckState.Indeterminate:\n      animSuffix = newState === TransitionCheckState.Checked ?\n          'indeterminate-checked' : 'indeterminate-unchecked';\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n/**\n * Fades out the focus state ripple.\n * @return {?}\n */\nprivate _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-checkbox, mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  host: {\n    'class': 'mat-checkbox',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MD_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'id': [{ type: Input },],\n'disableRipple': [{ type: Input },],\n'required': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'name': [{ type: Input },],\n'change': [{ type: Output },],\n'indeterminateChange': [{ type: Output },],\n'value': [{ type: Input },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_labelWrapper': [{ type: ViewChild, args: ['labelWrapper', ] },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'checked': [{ type: Input },],\n'indeterminate': [{ type: Input },],\n'color': [{ type: Input },],\n};\n}\n\nfunction MdCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckbox.ctorParameters;\n/** @type {?} */\nMdCheckbox.propDecorators;\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n * @type {?}\n */\nMdCheckbox.prototype.ariaLabel;\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n * @type {?}\n */\nMdCheckbox.prototype.ariaLabelledby;\n/**\n * A unique id for the checkbox. If one is not supplied, it is auto-generated.\n * @type {?}\n */\nMdCheckbox.prototype.id;\n/**\n * Whether the ripple effect on click should be disabled.\n * @type {?}\n */\nMdCheckbox.prototype._disableRipple;\n/** @type {?} */\nMdCheckbox.prototype._required;\n/**\n * Whether the label should appear after or before the checkbox. Defaults to 'after'\n * @type {?}\n */\nMdCheckbox.prototype.labelPosition;\n/**\n * Tabindex value that is passed to the underlying input element.\n * @type {?}\n */\nMdCheckbox.prototype.tabIndex;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMdCheckbox.prototype.name;\n/**\n * Event emitted when the checkbox's `checked` value changes.\n * @type {?}\n */\nMdCheckbox.prototype.change;\n/**\n * Event emitted when the checkbox's `indeterminate` value changes.\n * @type {?}\n */\nMdCheckbox.prototype.indeterminateChange;\n/**\n * The value attribute of the native input element\n * @type {?}\n */\nMdCheckbox.prototype.value;\n/**\n * The native `<input type=\"checkbox\"> element\n * @type {?}\n */\nMdCheckbox.prototype._inputElement;\n/** @type {?} */\nMdCheckbox.prototype._labelWrapper;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * @type {?}\n */\nMdCheckbox.prototype._ripple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * \\@docs-private\n * @type {?}\n */\nMdCheckbox.prototype.onTouched;\n/** @type {?} */\nMdCheckbox.prototype._currentAnimationClass;\n/** @type {?} */\nMdCheckbox.prototype._currentCheckState;\n/** @type {?} */\nMdCheckbox.prototype._checked;\n/** @type {?} */\nMdCheckbox.prototype._indeterminate;\n/** @type {?} */\nMdCheckbox.prototype._color;\n/** @type {?} */\nMdCheckbox.prototype._controlValueAccessorChangeFn;\n/**\n * Reference to the focused state ripple.\n * @type {?}\n */\nMdCheckbox.prototype._focusRipple;\n/** @type {?} */\nMdCheckbox.prototype._renderer;\n/** @type {?} */\nMdCheckbox.prototype._elementRef;\n/** @type {?} */\nMdCheckbox.prototype._changeDetectorRef;\n/** @type {?} */\nMdCheckbox.prototype._focusOriginMonitor;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule, MdRippleModule, StyleModule} from '../core';\nimport {\n  MdAnchor,\n  MdButton,\n  MdButtonCssMatStyler,\n  MdFabCssMatStyler,\n  MdIconButtonCssMatStyler,\n  MdMiniFabCssMatStyler,\n  MdRaisedButtonCssMatStyler\n} from './button';\n\n\nexport {MdButtonCssMatStyler,MdRaisedButtonCssMatStyler,MdIconButtonCssMatStyler,MdFabCssMatStyler,MdMiniFabCssMatStyler,MdButtonBase,_MdButtonMixinBase,MdButton,MdAnchor} from './button';\nexport class MdButtonModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MdRippleModule,\n    MdCommonModule,\n    StyleModule,\n  ],\n  exports: [\n    MdButton,\n    MdAnchor,\n    MdCommonModule,\n    MdButtonCssMatStyler,\n    MdRaisedButtonCssMatStyler,\n    MdIconButtonCssMatStyler,\n    MdFabCssMatStyler,\n    MdMiniFabCssMatStyler,\n  ],\n  declarations: [\n    MdButton,\n    MdAnchor,\n    MdButtonCssMatStyler,\n    MdRaisedButtonCssMatStyler,\n    MdIconButtonCssMatStyler,\n    MdFabCssMatStyler,\n    MdMiniFabCssMatStyler,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  Renderer2,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty, FocusOriginMonitor, Platform} from '../core';\nimport {mixinDisabled, CanDisable} from '../core/common-behaviors/disabled';\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-button], button[mat-button], a[md-button], a[mat-button]',\n  host: {'class': 'mat-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdRaisedButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'button[md-raised-button], button[mat-raised-button], ' +\n      'a[md-raised-button], a[mat-raised-button]',\n  host: {'class': 'mat-raised-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRaisedButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRaisedButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRaisedButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdIconButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'button[md-icon-button], button[mat-icon-button], a[md-icon-button], a[mat-icon-button]',\n  host: {'class': 'mat-icon-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdIconButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdFabCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-fab], button[mat-fab], a[md-fab], a[mat-fab]',\n  host: {'class': 'mat-fab'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdFabCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdFabCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdFabCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdMiniFabCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-mini-fab], button[mat-mini-fab], a[md-mini-fab], a[mat-mini-fab]',\n  host: {'class': 'mat-mini-fab'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdMiniFabCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMiniFabCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMiniFabCssMatStyler.ctorParameters;\n}\n\nexport class MdButtonBase { }\nexport const /** @type {?} */ _MdButtonMixinBase = mixinDisabled(MdButtonBase);\n/**\n * Material design button.\n */\nexport class MdButton extends _MdButtonMixinBase implements OnDestroy, CanDisable {\nprivate _color: string;\n/**\n * Whether the button is round.\n */\n_isRoundButton: boolean = this._hasAttributeWithPrefix('fab', 'mini-fab');\n/**\n * Whether the button is icon button.\n */\n_isIconButton: boolean = this._hasAttributeWithPrefix('icon-button');\n/**\n * Whether the ripple effect on click should be disabled.\n */\nprivate _disableRipple: boolean = false;\n/**\n * Whether the ripple effect for this button is disabled.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} v\n * @return {?}\n */\nset disableRipple(v) { this._disableRipple = coerceBooleanProperty(v); }\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _platform\n * @param {?} _focusOriginMonitor\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _platform: Platform,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n    super();\n    this._focusOriginMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n/**\n * The color of the button. Can be `primary`, `accent`, or `warn`.\n * @return {?}\n */\nget color(): string { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) { this._updateColor(value); }\n/**\n * @param {?} newColor\n * @return {?}\n */\n_updateColor(newColor: string) {\n    this._setElementColor(this._color, false);\n    this._setElementColor(newColor, true);\n    this._color = newColor;\n  }\n/**\n * @param {?} color\n * @param {?} isAdd\n * @return {?}\n */\n_setElementColor(color: string, isAdd: boolean) {\n    if (color != null && color != '') {\n      if (isAdd) {\n        this._renderer.addClass(this._getHostElement(), `mat-${color}`);\n      } else {\n        this._renderer.removeClass(this._getHostElement(), `mat-${color}`);\n      }\n    }\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus(): void {\n    this._getHostElement().focus();\n  }\n/**\n * @return {?}\n */\n_getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * Gets whether the button has one of the given attributes\n * with either an 'md-' or 'mat-' prefix.\n * @param {...?} unprefixedAttributeNames\n * @return {?}\n */\n_hasAttributeWithPrefix(...unprefixedAttributeNames: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return unprefixedAttributeNames.some(suffix => {\n      const /** @type {?} */ el = this._getHostElement();\n\n      return el.hasAttribute('md-' + suffix) || el.hasAttribute('mat-' + suffix);\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'button[md-button], button[md-raised-button], button[md-icon-button],' +\n            'button[md-fab], button[md-mini-fab],' +\n            'button[mat-button], button[mat-raised-button], button[mat-icon-button],' +\n            'button[mat-fab], button[mat-mini-fab]',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: Platform, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disableRipple': [{ type: Input },],\n'color': [{ type: Input },],\n};\n}\n\nfunction MdButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButton.ctorParameters;\n/** @type {?} */\nMdButton.propDecorators;\n/** @type {?} */\nMdButton.prototype._color;\n/**\n * Whether the button is round.\n * @type {?}\n */\nMdButton.prototype._isRoundButton;\n/**\n * Whether the button is icon button.\n * @type {?}\n */\nMdButton.prototype._isIconButton;\n/**\n * Whether the ripple effect on click should be disabled.\n * @type {?}\n */\nMdButton.prototype._disableRipple;\n/** @type {?} */\nMdButton.prototype._elementRef;\n/** @type {?} */\nMdButton.prototype._renderer;\n/** @type {?} */\nMdButton.prototype._platform;\n/** @type {?} */\nMdButton.prototype._focusOriginMonitor;\n}\n\n/**\n * Raised Material design button.\n */\nexport class MdAnchor extends MdButton {\n/**\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} platform\n * @param {?} focusOriginMonitor\n */\nconstructor(\n      elementRef: ElementRef,\n      renderer: Renderer2,\n      platform: Platform,\n      focusOriginMonitor: FocusOriginMonitor) {\n    super(elementRef, renderer, platform, focusOriginMonitor);\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget tabIndex(): number {\n    return this.disabled ? -1 : 0;\n  }\n/**\n * @return {?}\n */\nget _isAriaDisabled(): string {\n    return this.disabled ? 'true' : 'false';\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: `a[md-button], a[md-raised-button], a[md-icon-button], a[md-fab], a[md-mini-fab],\n             a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': '_isAriaDisabled',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: Platform, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'tabIndex': [{ type: HostBinding, args: ['tabIndex', ] },],\n};\n}\n\nfunction MdAnchor_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAnchor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAnchor.ctorParameters;\n/** @type {?} */\nMdAnchor.propDecorators;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {coerceBooleanProperty} from '../coercion/boolean-property';\n\n\n/** @docs-private */\nexport type Constructor<T> = new(...args: any[]) => T;\n\n/** @docs-private */\nexport interface CanDisable {\n  disabled: boolean;\n}\n/**\n * Mixin to augment a directive with a `disabled` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\nprivate _disabled: boolean = false;\n/**\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) { super(...args); }\n  };\n}\n","import {NgModule} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle} from './button-toggle';\nimport {\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n  MdCommonModule,\n  StyleModule,\n} from '../core';\nexport class MdButtonToggleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [FormsModule, MdCommonModule, StyleModule],\n  exports: [\n    MdButtonToggleGroup,\n    MdButtonToggleGroupMultiple,\n    MdButtonToggle,\n    MdCommonModule,\n  ],\n  declarations: [MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonToggleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleModule.ctorParameters;\n}\n\n\n\nexport {ToggleType,MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,MdButtonToggleChange,MdButtonToggleGroup,MdButtonToggleGroupMultiple,MdButtonToggle} from './button-toggle';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Renderer2,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  forwardRef,\n  AfterViewInit,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {Observable} from 'rxjs/Observable';\nimport {UniqueSelectionDispatcher, coerceBooleanProperty, FocusOriginMonitor} from '../core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n/**\n * Provider Expression that allows md-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nexport const MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdButtonToggleGroup),\n  multi: true\n};\n\nlet /** @type {?} */ _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MdButtonToggle.\n */\nexport class MdButtonToggleChange {\n/**\n * The MdButtonToggle that emits the event.\n */\nsource: MdButtonToggle;\n/**\n * The value assigned to the MdButtonToggle.\n */\nvalue: any;\n}\n\nfunction MdButtonToggleChange_tsickle_Closure_declarations() {\n/**\n * The MdButtonToggle that emits the event.\n * @type {?}\n */\nMdButtonToggleChange.prototype.source;\n/**\n * The value assigned to the MdButtonToggle.\n * @type {?}\n */\nMdButtonToggleChange.prototype.value;\n}\n\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nexport class MdButtonToggleGroup implements AfterViewInit, ControlValueAccessor {\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n */\nprivate _value: any = null;\n/**\n * The HTML name attribute applied to toggles in this group.\n */\nprivate _name: string = `md-button-toggle-group-${_uniqueIdCounter++}`;\n/**\n * Disables all toggles in the group.\n */\nprivate _disabled: boolean = null;\n/**\n * Whether the button toggle group should be vertical.\n */\nprivate _vertical: boolean = false;\n/**\n * The currently selected button toggle, should match the value.\n */\nprivate _selected: MdButtonToggle = null;\n/**\n * Whether the button toggle group is initialized or not.\n */\nprivate _isInitialized: boolean = false;\n/**\n * The method to be called in order to update ngModel.\n * Now `ngModel` binding is not supported in multiple selection mode.\n */\nprivate _controlValueAccessorChangeFn: (value: any) => void = (value) => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * Child button toggle buttons.\n */\n_buttonToggles: QueryList<MdButtonToggle> = null;\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._isInitialized = true;\n  }\n/**\n * `name` attribute for the underlying `input` element.\n * @return {?}\n */\nget name(): string {\n    return this._name;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n/**\n * Whether the toggle group is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\n    return this._vertical;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n/**\n * Value of the toggle group.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n\n      this._updateSelectedButtonToggleFromValue();\n\n      // Only emit a change event if the view is completely initialized.\n      // We don't want to emit a change event for the initial values.\n      if (this._isInitialized) {\n        this._emitChangeEvent();\n      }\n    }\n  }\n/**\n * Whether the toggle group is selected.\n * @return {?}\n */\nget selected() {\n    return this._selected;\n  }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MdButtonToggle) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n/**\n * Event emitted when the group's value changes.\n */\nchange: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n/**\n * @return {?}\n */\nprivate _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateSelectedButtonToggleFromValue(): void {\n    let /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let /** @type {?} */ matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value Value to be set to the model.\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n  }\n/**\n * Registers a callback that will be triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn On change callback function.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback that will be triggered when the control has been touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn On touch callback function.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled Whether the component should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-button-toggle-group:not([multiple]), mat-button-toggle-group:not([multiple])',\n  providers: [MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  host: {\n    '[class.mat-button-toggle-group]': 'true',\n    'role': 'radiogroup',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'mdButtonToggleGroup',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_buttonToggles': [{ type: ContentChildren, args: [forwardRef(() => MdButtonToggle), ] },],\n'name': [{ type: Input },],\n'disabled': [{ type: Input },],\n'vertical': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdButtonToggleGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleGroup.ctorParameters;\n/** @type {?} */\nMdButtonToggleGroup.propDecorators;\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._value;\n/**\n * The HTML name attribute applied to toggles in this group.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._name;\n/**\n * Disables all toggles in the group.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._disabled;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._vertical;\n/**\n * The currently selected button toggle, should match the value.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._selected;\n/**\n * Whether the button toggle group is initialized or not.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._isInitialized;\n/**\n * The method to be called in order to update ngModel.\n * Now `ngModel` binding is not supported in multiple selection mode.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdButtonToggleGroup.prototype.onTouched;\n/**\n * Child button toggle buttons.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._buttonToggles;\n/**\n * Event emitted when the group's value changes.\n * @type {?}\n */\nMdButtonToggleGroup.prototype.change;\n}\n\n/**\n * Multiple selection button-toggle group. `ngModel` is not supported in this mode.\n */\nexport class MdButtonToggleGroupMultiple {\n/**\n * Disables all toggles in the group.\n */\nprivate _disabled: boolean = null;\n/**\n * Whether the button toggle group should be vertical.\n */\nprivate _vertical: boolean = false;\n/**\n * Whether the toggle group is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = (value != null && value !== false) ? true : null;\n  }\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\n    return this._vertical;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-button-toggle-group[multiple], mat-button-toggle-group[multiple]',\n  exportAs: 'mdButtonToggleGroup',\n  host: {\n    '[class.mat-button-toggle-group]': 'true',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'vertical': [{ type: Input },],\n};\n}\n\nfunction MdButtonToggleGroupMultiple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleGroupMultiple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleGroupMultiple.ctorParameters;\n/** @type {?} */\nMdButtonToggleGroupMultiple.propDecorators;\n/**\n * Disables all toggles in the group.\n * @type {?}\n */\nMdButtonToggleGroupMultiple.prototype._disabled;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMdButtonToggleGroupMultiple.prototype._vertical;\n}\n\n/**\n * Single button inside of a toggle group.\n */\nexport class MdButtonToggle implements OnInit {\n/**\n * Whether or not this button toggle is checked.\n */\nprivate _checked: boolean = false;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n */\n_type: ToggleType;\n/**\n * Whether or not this button toggle is disabled.\n */\nprivate _disabled: boolean = null;\n/**\n * Value assigned to this button toggle.\n */\nprivate _value: any = null;\n/**\n * Whether or not the button toggle is a single selection.\n */\nprivate _isSingleSelector: boolean = null;\n\n   _inputElement: ElementRef;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n */\nbuttonToggleGroup: MdButtonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n */\nbuttonToggleGroupMultiple: MdButtonToggleGroupMultiple;\n/**\n * Unique ID for the underlying `input` element.\n * @return {?}\n */\nget inputId(): string {\n    return `${this.id}-input`;\n  }\n/**\n * The unique ID for this button toggle.\n */\nid: string;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n */\nname: string;\n/**\n * Whether the button is checked.\n * @return {?}\n */\nget checked(): boolean {\n    return this._checked;\n  }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\n    if (this._isSingleSelector) {\n      if (newCheckedState) {\n        // Notify all button toggles with the same name (in the same group) to un-check.\n        this._buttonToggleDispatcher.notify(this.id, this.name);\n      }\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n/**\n * MdButtonToggleGroup reads this to assign its own value.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n/**\n * Whether the button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    this._disabled = (value != null && value !== false) ? true : null;\n  }\n/**\n * Event emitted when the group value changes.\n */\nchange: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n/**\n * @param {?} toggleGroup\n * @param {?} toggleGroupMultiple\n * @param {?} _buttonToggleDispatcher\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n */\nconstructor( toggleGroup: MdButtonToggleGroup,\n               toggleGroupMultiple: MdButtonToggleGroupMultiple,\nprivate _buttonToggleDispatcher: UniqueSelectionDispatcher,\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor) {\n    this.buttonToggleGroup = toggleGroup;\n\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      _buttonToggleDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.id == null) {\n      this.id = `md-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusOriginMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus() {\n    this._inputElement.nativeElement.focus();\n  }\n/**\n * Toggle the state of the current button toggle.\n * @return {?}\n */\nprivate _toggle(): void {\n    this.checked = !this.checked;\n  }\n/**\n * Checks the button toggle due to an interaction with the underlying native input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup.onTouched();\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-button-toggle, mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    '[class.mat-button-toggle]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButtonToggleGroup, decorators: [{ type: Optional }, ]},\n{type: MdButtonToggleGroupMultiple, decorators: [{ type: Optional }, ]},\n{type: UniqueSelectionDispatcher, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'id': [{ type: HostBinding },{ type: Input },],\n'name': [{ type: Input },],\n'checked': [{ type: HostBinding, args: ['class.mat-button-toggle-checked', ] },{ type: Input },],\n'value': [{ type: Input },],\n'disabled': [{ type: HostBinding, args: ['class.mat-button-toggle-disabled', ] },{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdButtonToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggle.ctorParameters;\n/** @type {?} */\nMdButtonToggle.propDecorators;\n/**\n * Whether or not this button toggle is checked.\n * @type {?}\n */\nMdButtonToggle.prototype._checked;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n * @type {?}\n */\nMdButtonToggle.prototype._type;\n/**\n * Whether or not this button toggle is disabled.\n * @type {?}\n */\nMdButtonToggle.prototype._disabled;\n/**\n * Value assigned to this button toggle.\n * @type {?}\n */\nMdButtonToggle.prototype._value;\n/**\n * Whether or not the button toggle is a single selection.\n * @type {?}\n */\nMdButtonToggle.prototype._isSingleSelector;\n/** @type {?} */\nMdButtonToggle.prototype._inputElement;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n * @type {?}\n */\nMdButtonToggle.prototype.buttonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n * @type {?}\n */\nMdButtonToggle.prototype.buttonToggleGroupMultiple;\n/**\n * The unique ID for this button toggle.\n * @type {?}\n */\nMdButtonToggle.prototype.id;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMdButtonToggle.prototype.name;\n/**\n * Event emitted when the group value changes.\n * @type {?}\n */\nMdButtonToggle.prototype.change;\n/** @type {?} */\nMdButtonToggle.prototype._buttonToggleDispatcher;\n/** @type {?} */\nMdButtonToggle.prototype._renderer;\n/** @type {?} */\nMdButtonToggle.prototype._elementRef;\n/** @type {?} */\nMdButtonToggle.prototype._focusOriginMonitor;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {MdLineModule} from './line/line';\nimport {RtlModule} from './rtl/dir';\nimport {ObserveContentModule} from './observe-content/observe-content';\nimport {MdOptionModule} from './option/option';\nimport {PortalModule} from './portal/portal-directives';\nimport {OverlayModule} from './overlay/overlay-directives';\nimport {A11yModule} from './a11y/index';\nimport {MdSelectionModule} from './selection/index';\nimport {MdRippleModule} from './ripple/index';\n\n\n// RTL\nexport {Dir, LayoutDirection, RtlModule} from './rtl/dir';\n\n// Mutation Observer\nexport {ObserveContentModule, ObserveContent} from './observe-content/observe-content';\n\nexport {MdOptionModule, MdOption, MdOptionSelectionChange} from './option/option';\n\n// Portals\nexport {\n  Portal,\n  PortalHost,\n  BasePortalHost,\n  ComponentPortal,\n  TemplatePortal\n} from './portal/portal';\nexport {\n  PortalHostDirective,\n  TemplatePortalDirective,\n  PortalModule,\n} from './portal/portal-directives';\nexport {DomPortalHost} from './portal/dom-portal-host';\n\n// Platform\nexport {PlatformModule,Platform,getSupportedInputTypes} from './platform/index';\n\n// Overlay\nexport {Overlay,OVERLAY_PROVIDERS,OverlayContainer,FullscreenOverlayContainer,OverlayRef,OverlayState,ConnectedOverlayDirective,OverlayOrigin,OverlayModule,ViewportRuler,PositionStrategy,GlobalPositionStrategy,ConnectedPositionStrategy,HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollableViewProperties,ConnectedOverlayPositionChange,Scrollable,ScrollDispatcher,ScrollStrategy,RepositionScrollStrategy,CloseScrollStrategy,NoopScrollStrategy,BlockScrollStrategy,ScrollDispatchModule} from './overlay/index';\n\n// Gestures\nexport {GestureConfig} from './gestures/gesture-config';\n// Explicitly specify the interfaces which should be re-exported, because if everything\n// is re-exported, module bundlers may run into issues with treeshaking.\nexport {HammerInput, HammerManager} from './gestures/gesture-annotations';\n\n// Ripple\nexport {MdRipple,RippleGlobalOptions,MD_RIPPLE_GLOBAL_OPTIONS,RippleRef,RippleState,RippleConfig,RIPPLE_FADE_IN_DURATION,RIPPLE_FADE_OUT_DURATION,MdRippleModule} from './ripple/index';\n\n// a11y\nexport {\n  AriaLivePoliteness,\n  LiveAnnouncer,\n  LIVE_ANNOUNCER_ELEMENT_TOKEN,\n  LIVE_ANNOUNCER_PROVIDER,\n} from './a11y/live-announcer';\n\n// Selection\nexport {SelectionModel,SelectionChange} from './selection/selection';\n\nexport {FocusTrap,FocusTrapFactory,FocusTrapDeprecatedDirective,FocusTrapDirective} from './a11y/focus-trap';\nexport {InteractivityChecker} from './a11y/interactivity-checker';\nexport {isFakeMousedownFromScreenReader} from './a11y/fake-mousedown';\n\nexport {A11yModule} from './a11y/index';\n\nexport {\n  UniqueSelectionDispatcher,\n  UniqueSelectionDispatcherListener,\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n} from './coordination/unique-selection-dispatcher';\n\nexport {MdLineModule, MdLine, MdLineSetter} from './line/line';\n\n// Style\nexport {StyleModule,TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER,applyCssTransform} from './style/index';\n\n// Misc\nexport {ComponentType} from './overlay/generic-component-type';\n\n// Keybindings\nexport {UP_ARROW,DOWN_ARROW,RIGHT_ARROW,LEFT_ARROW,PAGE_UP,PAGE_DOWN,HOME,END,ENTER,SPACE,TAB,ESCAPE,BACKSPACE,DELETE} from './keyboard/keycodes';\n\nexport {MATERIAL_COMPATIBILITY_MODE,MATERIAL_SANITY_CHECKS,getMdCompatibilityInvalidPrefixError,MAT_ELEMENTS_SELECTOR,MD_ELEMENTS_SELECTOR,MatPrefixRejector,MdPrefixRejector} from './compatibility/compatibility';\n\n// Animation\nexport {AnimationCurves,AnimationDurations} from './animation/animation';\n\n// Selection\nexport {MdSelectionModule,MdPseudoCheckboxState,MdPseudoCheckbox} from './selection/index';\n\n// Coercion\nexport {coerceBooleanProperty} from './coercion/boolean-property';\nexport {coerceNumberProperty} from './coercion/number-property';\n\n// Compatibility\nexport {CompatibilityModule, NoConflictStyleCompatibilityMode} from './compatibility/compatibility';\n\n// Common material module\nexport {MdCommonModule} from './common-behaviors/common-module';\n\n// Datetime\nexport {NativeDateModule,MdNativeDateModule,DateAdapter,MdDateFormats,MD_DATE_FORMATS,NativeDateAdapter,MD_NATIVE_DATE_FORMATS} from './datetime/index';\nexport class MdCoreModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    MdLineModule,\n    RtlModule,\n    MdRippleModule,\n    ObserveContentModule,\n    PortalModule,\n    OverlayModule,\n    A11yModule,\n    MdOptionModule,\n    MdSelectionModule,\n  ],\n  exports: [\n    MdLineModule,\n    RtlModule,\n    MdRippleModule,\n    ObserveContentModule,\n    PortalModule,\n    OverlayModule,\n    A11yModule,\n    MdOptionModule,\n    MdSelectionModule,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCoreModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCoreModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCoreModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MD_DATE_FORMATS} from './date-formats';\nimport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\n\n\nexport {DateAdapter} from './date-adapter';\nexport {MdDateFormats,MD_DATE_FORMATS} from './date-formats';\nexport {NativeDateAdapter} from './native-date-adapter';\nexport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\nexport class NativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [{provide: DateAdapter, useClass: NativeDateAdapter}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateModule.ctorParameters;\n}\n\nexport class MdNativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [NativeDateModule],\n  providers: [{provide: MD_DATE_FORMATS, useValue: MD_NATIVE_DATE_FORMATS}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNativeDateModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {MdDateFormats} from './date-formats';\n\n\nexport const /** @type {?} */ MD_NATIVE_DATE_FORMATS: MdDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","import {DateAdapter} from './date-adapter';\n/**\n * Whether the browser supports the Intl API.\n */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n/**\n * The default month names to use if Intl API is not available.\n */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n/**\n * The default date names to use if Intl API is not available.\n */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n/**\n * The default day of the week names to use if Intl API is not available.\n */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n/**\n * Creates an array and fills it with values.\n * @template T\n * @param {?} length\n * @param {?} valueFunction\n * @return {?}\n */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  return Array.apply(null, Array(length)).map((v: undefined, i: number) => valueFunction(i));\n}\n/**\n * Adapts the native JS Date for use with cdk-based components that work with dates.\n */\nexport class NativeDateAdapter extends DateAdapter<Date> {\n/**\n * @param {?} date\n * @return {?}\n */\ngetYear(date: Date): number {\n    return date.getFullYear();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetMonth(date: Date): number {\n    return date.getMonth();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDate(date: Date): number {\n    return date.getDate();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n/**\n * @return {?}\n */\ngetDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n/**\n * @return {?}\n */\ngetFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nclone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n/**\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\ncreateDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11 || date < 1) {\n      return null;\n    }\n\n    let /** @type {?} */ result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to\n    // overflow.\n    if (result.getMonth() != month) {\n      return null;\n    }\n\n    return result;\n  }\n/**\n * @return {?}\n */\ntoday(): Date {\n    return new Date();\n  }\n/**\n * @param {?} value\n * @param {?} parseFormat\n * @return {?}\n */\nparse(value: any, parseFormat: Object): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    let /** @type {?} */ timestamp = typeof value == 'number' ? value : Date.parse(value);\n    return isNaN(timestamp) ? null : new Date(timestamp);\n  }\n/**\n * @param {?} date\n * @param {?} displayFormat\n * @return {?}\n */\nformat(date: Date, displayFormat: Object): string {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n/**\n * @param {?} date\n * @param {?} years\n * @return {?}\n */\naddCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n/**\n * @param {?} date\n * @param {?} months\n * @return {?}\n */\naddCalendarMonths(date: Date, months: number): Date {\n    let /** @type {?} */ newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n/**\n * @param {?} date\n * @param {?} days\n * @return {?}\n */\naddCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetISODateString(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n/**\n * Creates a date but allows the month and date to overflow.\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\nprivate _createDateWithOverflow(year: number, month: number, date: number) {\n    let /** @type {?} */ result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n/**\n * Pads a number to make it two digits.\n * @param {?} n The number to pad.\n * @return {?} The padded number.\n */\nprivate _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n/**\n * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n * other browsers do not. We remove them to make output consistent and because they interfere with\n * date parsing.\n * @param {?} s The string to strip direction characters from.\n * @return {?} The stripped string.\n */\nprivate _stripDirectionalityCharacters(s: string) {\n    return s.replace(/[\\u200e\\u200f]/g, '');\n  }\n}\n","\n/**\n * Adapts type `D` to be usable as a date by cdk-based components that work with dates.\n * @abstract\n */\nexport abstract class DateAdapter<D> {\n/**\n * The locale to use for all dates.\n */\nprotected locale: any;\n/**\n * Gets the year component of the given date.\n * @abstract\n * @param {?} date The date to extract the year from.\n * @return {?} The year component.\n */\ngetYear(date: D) {}\n/**\n * Gets the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the month from.\n * @return {?} The month component (0-indexed, 0 = January).\n */\ngetMonth(date: D) {}\n/**\n * Gets the date of the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the date of the month from.\n * @return {?} The month component (1-indexed, 1 = first of month).\n */\ngetDate(date: D) {}\n/**\n * Gets the day of the week component of the given date.\n * @abstract\n * @param {?} date The date to extract the day of the week from.\n * @return {?} The month component (0-indexed, 0 = Sunday).\n */\ngetDayOfWeek(date: D) {}\n/**\n * Gets a list of names for the months.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n * @return {?} An ordered list of all month names, starting with January.\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets a list of names for the dates of the month.\n * @abstract\n * @return {?} An ordered list of all date of the month names, starting with '1'.\n */\ngetDateNames() {}\n/**\n * Gets a list of names for the days of the week.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n * @return {?} An ordered list of all weekday names, starting with Sunday.\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets the name for the year of the given date.\n * @abstract\n * @param {?} date The date to get the year name for.\n * @return {?} The name of the given year (e.g. '2017').\n */\ngetYearName(date: D) {}\n/**\n * Gets the first day of the week.\n * @abstract\n * @return {?} The first day of the week (0-indexed, 0 = Sunday).\n */\ngetFirstDayOfWeek() {}\n/**\n * Gets the number of days in the month of the given date.\n * @abstract\n * @param {?} date The date whose month should be checked.\n * @return {?} The number of days in the month of the given date.\n */\ngetNumDaysInMonth(date: D) {}\n/**\n * Clones the given date.\n * @abstract\n * @param {?} date The date to clone\n * @return {?} A new date equal to the given date.\n */\nclone(date: D) {}\n/**\n * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n * month and date.\n * @abstract\n * @param {?} year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n * @param {?} month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n * @param {?} date The date of month of the date. Must be an integer 1 - length of the given month.\n * @return {?} The new date, or null if invalid.\n */\ncreateDate(year: number, month: number, date: number) {}\n/**\n * Gets today's date.\n * @abstract\n * @return {?} Today's date.\n */\ntoday() {}\n/**\n * Parses a date from a value.\n * @abstract\n * @param {?} value The value to parse.\n * @param {?} parseFormat The expected format of the value being parsed\n *     (type is implementation-dependent).\n * @return {?} The parsed date, or null if date could not be parsed.\n */\nparse(value: any, parseFormat: any) {}\n/**\n * Formats a date as a string.\n * @abstract\n * @param {?} date The value to parse.\n * @param {?} displayFormat The format to use to display the date as a string.\n * @return {?} The parsed date, or null if date could not be parsed.\n */\nformat(date: D, displayFormat: any) {}\n/**\n * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n * calendar for each year and then finding the closest date in the new month. For example when\n * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add years to.\n * @param {?} years The number of years to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of years added.\n */\naddCalendarYears(date: D, years: number) {}\n/**\n * Adds the given number of months to the date. Months are counted as if flipping a page on the\n * calendar for each month and then finding the closest date in the new month. For example when\n * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add months to.\n * @param {?} months The number of months to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of months added.\n */\naddCalendarMonths(date: D, months: number) {}\n/**\n * Adds the given number of days to the date. Days are counted as if moving one cell on the\n * calendar for each day.\n * @abstract\n * @param {?} date The date to add days to.\n * @param {?} days The number of days to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of days added.\n */\naddCalendarDays(date: D, days: number) {}\n/**\n * Gets the RFC 3339 compatible date string (https://tools.ietf.org/html/rfc3339)  for the given\n * date.\n * @abstract\n * @param {?} date The date to get the ISO date string for.\n * @return {?} The ISO date string date string.\n */\ngetISODateString(date: D) {}\n/**\n * Sets the locale used for all dates.\n * @param {?} locale The new locale.\n * @return {?}\n */\nsetLocale(locale: any) {\n    this.locale = locale;\n  }\n/**\n * Compares two dates.\n * @param {?} first The first date to compare.\n * @param {?} second The second date to compare.\n * @return {?} 0 if the dates are equal, a number less than 0 if the first date is earlier,\n *     a number greater than 0 if the first date is later.\n */\ncompareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n/**\n * Checks if two dates are equal.\n * @param {?} first The first date to check.\n * @param {?} second The second date to check.\n *     Null dates are considered equal to other null dates.\n * @return {?}\n */\nsameDate(first: D | null, second: D | null): boolean {\n    return first && second ? !this.compareDate(first, second) : first == second;\n  }\n/**\n * Clamp the given date between min and max dates.\n * @param {?} date The date to clamp.\n * @param {?=} min The minimum value to allow. If null or omitted no min is enforced.\n * @param {?=} max The maximum value to allow. If null or omitted no max is enforced.\n * @return {?} `min` if `date` is less than `min`, `max` if date is greater than `max`,\n *     otherwise `date`.\n */\nclampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n\nfunction DateAdapter_tsickle_Closure_declarations() {\n/**\n * The locale to use for all dates.\n * @type {?}\n */\nDateAdapter.prototype.locale;\n}\n\n","\n/**\n * Coerces a data-bound value (typically a string) to a number.\n * @param {?} value\n * @param {?=} fallbackValue\n * @return {?}\n */\nexport function coerceNumberProperty(value: any, fallbackValue = 0) {\n  // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n  // and other non-number values as NaN, where Number just uses 0) but it considers the string\n  // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n  return isNaN(parseFloat( /** @type {?} */((value as any)))) || isNaN(Number(value)) ? fallbackValue : Number(value);\n}\n","\n/**\n * \\@docs-private\n */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\nfunction AnimationCurves_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationCurves.STANDARD_CURVE;\n/** @type {?} */\nAnimationCurves.DECELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.ACCELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.SHARP_CURVE;\n}\n\n/**\n * \\@docs-private\n */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n\nfunction AnimationDurations_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationDurations.COMPLEX;\n/** @type {?} */\nAnimationDurations.ENTERING;\n/** @type {?} */\nAnimationDurations.EXITING;\n}\n\n","import {NgModule} from '@angular/core';\nimport {CdkMonitorFocus, FOCUS_ORIGIN_MONITOR_PROVIDER} from './focus-origin-monitor';\nimport {PlatformModule} from '../platform/index';\nexport class StyleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [PlatformModule],\n  declarations: [CdkMonitorFocus],\n  exports: [CdkMonitorFocus],\n  providers: [FOCUS_ORIGIN_MONITOR_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StyleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStyleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStyleModule.ctorParameters;\n}\n\n\n\nexport {TOUCH_BUFFER_MS,FocusOrigin,FocusOriginMonitor,CdkMonitorFocus,FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY,FOCUS_ORIGIN_MONITOR_PROVIDER} from './focus-origin-monitor';\nexport {applyCssTransform} from './apply-transform';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\n * @param {?} element\n * @param {?} transformValue\n * @return {?}\n */\nexport function applyCssTransform(element: HTMLElement, transformValue: string) {\n  // It's important to trim the result, because the browser will ignore the set operation\n  // if the string contains only whitespace.\n  let /** @type {?} */ value = transformValue.trim();\n\n  element.style.transform = value;\n  element.style.webkitTransform = value;\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer2,\n  SkipSelf,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Platform} from '../platform/platform';\n\nimport'rxjs/add/observable/of';\n\n\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\nexport const /** @type {?} */ TOUCH_BUFFER_MS = 650;\n\n\nexport type FocusOrigin = 'touch' | 'mouse' | 'keyboard' | 'program';\n\n\ntype MonitoredElementInfo = {\n  unlisten: Function,\n  checkChildren: boolean,\n  renderer: Renderer2,\n  subject: Subject<FocusOrigin>\n};\n/**\n * Monitors mouse and keyboard events to determine the cause of focus events.\n */\nexport class FocusOriginMonitor {\n/**\n * The focus origin that the next focus event is a result of.\n */\nprivate _origin: FocusOrigin = null;\n/**\n * The FocusOrigin of the last focus event tracked by the FocusOriginMonitor.\n */\nprivate _lastFocusOrigin: FocusOrigin;\n/**\n * Whether the window has just been focused.\n */\nprivate _windowFocused = false;\n/**\n * The target of the last touch event.\n */\nprivate _lastTouchTarget: EventTarget;\n/**\n * The timeout id of the touch timeout, used to cancel timeout later.\n */\nprivate _touchTimeout: number;\n/**\n * Weak map of elements being monitored to their info.\n */\nprivate _elementInfo = new WeakMap<Element, MonitoredElementInfo>();\n/**\n * @param {?} _ngZone\n * @param {?} _platform\n */\nconstructor(private _ngZone: NgZone,\nprivate _platform: Platform) {\n    this._ngZone.runOutsideAngular(() => this._registerDocumentEvents());\n  }\n/**\n * Monitors focus on an element and applies appropriate CSS classes.\n * @param {?} element The element to monitor\n * @param {?} renderer The renderer to use to apply CSS classes to the element.\n * @param {?} checkChildren Whether to count the element as focused when its children are focused.\n * @return {?} An observable that emits when the focus state of the element changes.\n *     When the element is blurred, null will be emitted.\n */\nmonitor(\n      element: HTMLElement,\n      renderer: Renderer2,\n      checkChildren: boolean): Observable<FocusOrigin> {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return Observable.of();\n    }\n    // Check if we're already monitoring this element.\n    if (this._elementInfo.has(element)) {\n      let /** @type {?} */ info = this._elementInfo.get(element);\n      info.checkChildren = checkChildren;\n      return info.subject.asObservable();\n    }\n\n    // Create monitored element info.\n    let /** @type {?} */ info: MonitoredElementInfo = {\n      unlisten: null,\n      checkChildren: checkChildren,\n      renderer: renderer,\n      subject: new Subject<FocusOrigin>()\n    };\n    this._elementInfo.set(element, info);\n\n    // Start listening. We need to listen in capture phase since focus events don't bubble.\n    let /** @type {?} */ focusListener = (event: FocusEvent) => this._onFocus(event, element);\n    let /** @type {?} */ blurListener = (event: FocusEvent) => this._onBlur(event, element);\n    this._ngZone.runOutsideAngular(() => {\n      element.addEventListener('focus', focusListener, true);\n      element.addEventListener('blur', blurListener, true);\n    });\n\n    // Create an unlisten function for later.\n    info.unlisten = () => {\n      element.removeEventListener('focus', focusListener, true);\n      element.removeEventListener('blur', blurListener, true);\n    };\n\n    return info.subject.asObservable();\n  }\n/**\n * Stops monitoring an element and removes all focus classes.\n * @param {?} element The element to stop monitoring.\n * @return {?}\n */\nstopMonitoring(element: HTMLElement): void {\n    let /** @type {?} */ elementInfo = this._elementInfo.get(element);\n\n    if (elementInfo) {\n      elementInfo.unlisten();\n      elementInfo.subject.complete();\n\n      this._setClasses(element, null);\n      this._elementInfo.delete(element);\n    }\n  }\n/**\n * Focuses the element via the specified focus origin.\n * @param {?} element The element to focus.\n * @param {?} renderer The renderer to use to invoke the focus method on the element.\n * @param {?} origin The focus origin.\n * @return {?}\n */\nfocusVia(element: HTMLElement, renderer: Renderer2, origin: FocusOrigin): void {\n    this._setOriginForCurrentEventQueue(origin);\n    element.focus();\n  }\n/**\n * Register necessary event listeners on the document and window.\n * @return {?}\n */\nprivate _registerDocumentEvents() {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return;\n    }\n\n    // Note: we listen to events in the capture phase so we can detect them even if the user stops\n    // propagation.\n\n    // On keydown record the origin and clear any touch event that may be in progress.\n    document.addEventListener('keydown', () => {\n      this._lastTouchTarget = null;\n      this._setOriginForCurrentEventQueue('keyboard');\n    }, true);\n\n    // On mousedown record the origin only if there is not touch target, since a mousedown can\n    // happen as a result of a touch event.\n    document.addEventListener('mousedown', () => {\n      if (!this._lastTouchTarget) {\n        this._setOriginForCurrentEventQueue('mouse');\n      }\n    }, true);\n\n    // When the touchstart event fires the focus event is not yet in the event queue. This means\n    // we can't rely on the trick used above (setting timeout of 0ms). Instead we wait 650ms to\n    // see if a focus happens.\n    document.addEventListener('touchstart', (event: Event) => {\n      if (this._touchTimeout != null) {\n        clearTimeout(this._touchTimeout);\n      }\n      this._lastTouchTarget = event.target;\n      this._touchTimeout = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n    }, true);\n\n    // Make a note of when the window regains focus, so we can restore the origin info for the\n    // focused element.\n    window.addEventListener('focus', () => {\n      this._windowFocused = true;\n      setTimeout(() => this._windowFocused = false, 0);\n    });\n  }\n/**\n * Sets the focus classes on the element based on the given focus origin.\n * @param {?} element The element to update the classes on.\n * @param {?} origin The focus origin.\n * @return {?}\n */\nprivate _setClasses(element: HTMLElement, origin: FocusOrigin): void {\n    let /** @type {?} */ renderer = this._elementInfo.get(element).renderer;\n    let /** @type {?} */ toggleClass = (className: string, shouldSet: boolean) => {\n      shouldSet ? renderer.addClass(element, className) : renderer.removeClass(element, className);\n    };\n\n    toggleClass('cdk-focused', !!origin);\n    toggleClass('cdk-touch-focused', origin === 'touch');\n    toggleClass('cdk-keyboard-focused', origin === 'keyboard');\n    toggleClass('cdk-mouse-focused', origin === 'mouse');\n    toggleClass('cdk-program-focused', origin === 'program');\n  }\n/**\n * Sets the origin and schedules an async function to clear it at the end of the event queue.\n * @param {?} origin The origin to set.\n * @return {?}\n */\nprivate _setOriginForCurrentEventQueue(origin: FocusOrigin): void {\n    this._origin = origin;\n    setTimeout(() => this._origin = null, 0);\n  }\n/**\n * Checks whether the given focus event was caused by a touchstart event.\n * @param {?} event The focus event to check.\n * @return {?} Whether the event was caused by a touch.\n */\nprivate _wasCausedByTouch(event: FocusEvent): boolean {\n    // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n    // Consider the following dom structure:\n    //\n    // <div #parent tabindex=\"0\" cdkFocusClasses>\n    //   <div #child (click)=\"#parent.focus()\"></div>\n    // </div>\n    //\n    // If the user touches the #child element and the #parent is programmatically focused as a\n    // result, this code will still consider it to have been caused by the touch event and will\n    // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n    // relatively small edge-case that can be worked around by using\n    // focusVia(parentEl, renderer,  'program') to focus the parent element.\n    //\n    // If we decide that we absolutely must handle this case correctly, we can do so by listening\n    // for the first focus event after the touchstart, and then the first blur event after that\n    // focus event. When that blur event fires we know that whatever follows is not a result of the\n    // touchstart.\n    let /** @type {?} */ focusTarget = event.target;\n    return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n        (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n  }\n/**\n * Handles focus events on a registered element.\n * @param {?} event The focus event.\n * @param {?} element The monitored element.\n * @return {?}\n */\nprivate _onFocus(event: FocusEvent, element: HTMLElement) {\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n    // focus event affecting the monitored element. If we want to use the origin of the first event\n    // instead we should check for the cdk-focused class here and return if the element already has\n    // it. (This only matters for elements that have includesChildren = true).\n\n    // If we are not counting child-element-focus as focused, make sure that the event target is the\n    // monitored element itself.\n    if (!this._elementInfo.get(element).checkChildren && element !== event.target) {\n      return;\n    }\n\n    // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n    // 1) The window has just regained focus, in which case we want to restore the focused state of\n    //    the element from before the window blurred.\n    // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n    // 3) The element was programmatically focused, in which case we should mark the origin as\n    //    'program'.\n    if (!this._origin) {\n      if (this._windowFocused && this._lastFocusOrigin) {\n        this._origin = this._lastFocusOrigin;\n      } else if (this._wasCausedByTouch(event)) {\n        this._origin = 'touch';\n      } else {\n        this._origin = 'program';\n      }\n    }\n\n    this._setClasses(element, this._origin);\n    this._elementInfo.get(element).subject.next(this._origin);\n    this._lastFocusOrigin = this._origin;\n    this._origin = null;\n  }\n/**\n * Handles blur events on a registered element.\n * @param {?} event The blur event.\n * @param {?} element The monitored element.\n * @return {?}\n */\nprivate _onBlur(event: FocusEvent, element: HTMLElement) {\n    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n    // order to focus another child of the monitored element.\n    if (this._elementInfo.get(element).checkChildren && event.relatedTarget instanceof Node &&\n        element.contains(event.relatedTarget)) {\n      return;\n    }\n\n    this._setClasses(element, null);\n    this._elementInfo.get(element).subject.next(null);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Platform, },\n];\n}\n\nfunction FocusOriginMonitor_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusOriginMonitor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusOriginMonitor.ctorParameters;\n/**\n * The focus origin that the next focus event is a result of.\n * @type {?}\n */\nFocusOriginMonitor.prototype._origin;\n/**\n * The FocusOrigin of the last focus event tracked by the FocusOriginMonitor.\n * @type {?}\n */\nFocusOriginMonitor.prototype._lastFocusOrigin;\n/**\n * Whether the window has just been focused.\n * @type {?}\n */\nFocusOriginMonitor.prototype._windowFocused;\n/**\n * The target of the last touch event.\n * @type {?}\n */\nFocusOriginMonitor.prototype._lastTouchTarget;\n/**\n * The timeout id of the touch timeout, used to cancel timeout later.\n * @type {?}\n */\nFocusOriginMonitor.prototype._touchTimeout;\n/**\n * Weak map of elements being monitored to their info.\n * @type {?}\n */\nFocusOriginMonitor.prototype._elementInfo;\n/** @type {?} */\nFocusOriginMonitor.prototype._ngZone;\n/** @type {?} */\nFocusOriginMonitor.prototype._platform;\n}\n\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n * \n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nexport class CdkMonitorFocus implements OnDestroy {\n   cdkFocusChange = new EventEmitter<FocusOrigin>();\n/**\n * @param {?} _elementRef\n * @param {?} _focusOriginMonitor\n * @param {?} renderer\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusOriginMonitor: FocusOriginMonitor,\n              renderer: Renderer2) {\n    this._focusOriginMonitor.monitor(\n        this._elementRef.nativeElement, renderer,\n        this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))\n        .subscribe(origin => this.cdkFocusChange.emit(origin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusOriginMonitor, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'cdkFocusChange': [{ type: Output },],\n};\n}\n\nfunction CdkMonitorFocus_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkMonitorFocus.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkMonitorFocus.ctorParameters;\n/** @type {?} */\nCdkMonitorFocus.propDecorators;\n/** @type {?} */\nCdkMonitorFocus.prototype.cdkFocusChange;\n/** @type {?} */\nCdkMonitorFocus.prototype._elementRef;\n/** @type {?} */\nCdkMonitorFocus.prototype._focusOriginMonitor;\n}\n\n/**\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nexport function FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY(\n    parentDispatcher: FocusOriginMonitor, ngZone: NgZone, platform: Platform) {\n  return parentDispatcher || new FocusOriginMonitor(ngZone, platform);\n}\n\n\nexport const /** @type {?} */ FOCUS_ORIGIN_MONITOR_PROVIDER = {\n  // If there is already a FocusOriginMonitor available, use that. Otherwise, provide a new one.\n  provide: FocusOriginMonitor,\n  deps: [[new Optional(), new SkipSelf(), FocusOriginMonitor], NgZone, Platform],\n  useFactory: FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable, Optional, SkipSelf} from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n * \n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nexport class UniqueSelectionDispatcher {\nprivate _listeners: UniqueSelectionDispatcherListener[] = [];\n/**\n * Notify other items that selection for the given name has been set.\n * @param {?} id ID of the item.\n * @param {?} name Name of the item.\n * @return {?}\n */\nnotify(id: string, name: string) {\n    for (let /** @type {?} */ listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n/**\n * Listen for future changes to item selection.\n * @param {?} listener\n * @return {?}\n */\nlisten(listener: UniqueSelectionDispatcherListener) {\n    this._listeners.push(listener);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UniqueSelectionDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nUniqueSelectionDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUniqueSelectionDispatcher.ctorParameters;\n/** @type {?} */\nUniqueSelectionDispatcher.prototype._listeners;\n}\n\n/**\n * @param {?} parentDispatcher\n * @return {?}\n */\nexport function UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: UniqueSelectionDispatcher) {\n  return parentDispatcher || new UniqueSelectionDispatcher();\n}\n\nexport const /** @type {?} */ UNIQUE_SELECTION_DISPATCHER_PROVIDER = {\n  // If there is already a dispatcher available, use that. Otherwise, provide a new one.\n  provide: UniqueSelectionDispatcher,\n  deps: [[new Optional(), new SkipSelf(), UniqueSelectionDispatcher]],\n  useFactory: UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Screenreaders will often fire fake mousedown events when a focusable element\n * is activated using the keyboard. We can typically distinguish between these faked\n * mousedown events and real mousedown events using the \"buttons\" property. While\n * real mousedowns will indicate the mouse button that was pressed (e.g. \"1\" for\n * the left mouse button), faked mousedowns will usually set the property value to 0.\n * @param {?} event\n * @return {?}\n */\nexport function isFakeMousedownFromScreenReader(event: MouseEvent): boolean {\n  return event.buttons === 0;\n}\n","import {Subject} from 'rxjs/Subject';\n/**\n * Class to be used to power selecting one or more options from a list.\n * \\@docs-private\n */\nexport class SelectionModel<T> {\n/**\n * Currently-selected values.\n */\nprivate _selection: Set<T> = new Set();\n/**\n * Keeps track of the deselected options that haven't been emitted by the change event.\n */\nprivate _deselectedToEmit: T[] = [];\n/**\n * Keeps track of the selected option that haven't been emitted by the change event.\n */\nprivate _selectedToEmit: T[] = [];\n/**\n * Cache for the array value of the selected items.\n */\nprivate _selected: T[];\n/**\n * Selected value(s).\n * @return {?}\n */\nget selected(): T[] {\n    if (!this._selected) {\n      this._selected = Array.from(this._selection.values());\n    }\n\n    return this._selected;\n  }\n/**\n * Event emitted when the value has changed.\n */\nonChange: Subject<SelectionChange<T>> = this._emitChanges ? new Subject() : null;\n/**\n * @param {?=} _isMulti\n * @param {?=} initiallySelectedValues\n * @param {?=} _emitChanges\n */\nconstructor(\nprivate _isMulti = false,\n    initiallySelectedValues?: T[],\nprivate _emitChanges = true) {\n\n    if (initiallySelectedValues) {\n      if (_isMulti) {\n        initiallySelectedValues.forEach(value => this._markSelected(value));\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      }\n\n      // Clear the array in order to avoid firing the change event for preselected values.\n      this._selectedToEmit.length = 0;\n    }\n  }\n/**\n * Selects a value or an array of values.\n * @param {?} value\n * @return {?}\n */\nselect(value: T): void {\n    this._markSelected(value);\n    this._emitChangeEvent();\n  }\n/**\n * Deselects a value or an array of values.\n * @param {?} value\n * @return {?}\n */\ndeselect(value: T): void {\n    this._unmarkSelected(value);\n    this._emitChangeEvent();\n  }\n/**\n * Toggles a value between selected and deselected.\n * @param {?} value\n * @return {?}\n */\ntoggle(value: T): void {\n    this.isSelected(value) ? this.deselect(value) : this.select(value);\n  }\n/**\n * Clears all of the selected values.\n * @return {?}\n */\nclear(): void {\n    this._unmarkAll();\n    this._emitChangeEvent();\n  }\n/**\n * Determines whether a value is selected.\n * @param {?} value\n * @return {?}\n */\nisSelected(value: T): boolean {\n    return this._selection.has(value);\n  }\n/**\n * Determines whether the model does not have a value.\n * @return {?}\n */\nisEmpty(): boolean {\n    return this._selection.size === 0;\n  }\n/**\n * Determines whether the model has a value.\n * @return {?}\n */\nhasValue(): boolean {\n    return !this.isEmpty();\n  }\n/**\n * Sorts the selected values based on a predicate function.\n * @param {?=} predicate\n * @return {?}\n */\nsort(predicate?: (a: T, b: T) => number): void {\n    if (this._isMulti && this.selected) {\n      this._selected.sort(predicate);\n    }\n  }\n/**\n * Emits a change event and clears the records of selected and deselected values.\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n      let /** @type {?} */ eventData = new SelectionChange(this._selectedToEmit, this._deselectedToEmit);\n\n      this.onChange.next(eventData);\n      this._deselectedToEmit = [];\n      this._selectedToEmit = [];\n    }\n\n    this._selected = null;\n  }\n/**\n * Selects a value.\n * @param {?} value\n * @return {?}\n */\nprivate _markSelected(value: T) {\n    if (!this.isSelected(value)) {\n      if (!this._isMulti) {\n        this._unmarkAll();\n      }\n\n      this._selection.add(value);\n\n      if (this._emitChanges) {\n        this._selectedToEmit.push(value);\n      }\n    }\n  }\n/**\n * Deselects a value.\n * @param {?} value\n * @return {?}\n */\nprivate _unmarkSelected(value: T) {\n    if (this.isSelected(value)) {\n      this._selection.delete(value);\n\n      if (this._emitChanges) {\n        this._deselectedToEmit.push(value);\n      }\n    }\n  }\n/**\n * Clears out the selected values.\n * @return {?}\n */\nprivate _unmarkAll() {\n    if (!this.isEmpty()) {\n      this._selection.forEach(value => this._unmarkSelected(value));\n    }\n  }\n}\n\nfunction SelectionModel_tsickle_Closure_declarations() {\n/**\n * Currently-selected values.\n * @type {?}\n */\nSelectionModel.prototype._selection;\n/**\n * Keeps track of the deselected options that haven't been emitted by the change event.\n * @type {?}\n */\nSelectionModel.prototype._deselectedToEmit;\n/**\n * Keeps track of the selected option that haven't been emitted by the change event.\n * @type {?}\n */\nSelectionModel.prototype._selectedToEmit;\n/**\n * Cache for the array value of the selected items.\n * @type {?}\n */\nSelectionModel.prototype._selected;\n/**\n * Event emitted when the value has changed.\n * @type {?}\n */\nSelectionModel.prototype.onChange;\n/** @type {?} */\nSelectionModel.prototype._isMulti;\n/** @type {?} */\nSelectionModel.prototype._emitChanges;\n}\n\n/**\n * Describes an event emitted when the value of a MdSelectionModel has changed.\n * \\@docs-private\n */\nexport class SelectionChange<T> {\n/**\n * @param {?=} added\n * @param {?=} removed\n */\nconstructor(public added?: T[],\npublic removed?: T[]) { }\n}\n\nfunction SelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectionChange.prototype.added;\n/** @type {?} */\nSelectionChange.prototype.removed;\n}\n\n","import {Injectable, isDevMode} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {HammerStatic, HammerInstance, Recognizer, RecognizerStatic} from './gesture-annotations';\nexport class GestureConfig extends HammerGestureConfig {\nprivate _hammer: HammerStatic = typeof window !== 'undefined' ? ( /** @type {?} */((window as any))).Hammer : null;\n\n  /* List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\nconstructor() {\n    super();\n\n    if (!this._hammer && isDevMode()) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material ' +\n        'components may not work correctly.'\n      );\n    }\n  }\n/**\n * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n * \n * Our gesture names come from the Material Design gestures spec:\n * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n * \n * More information on default recognizers can be found in Hammer docs:\n * http://hammerjs.github.io/recognizer-pan/\n * http://hammerjs.github.io/recognizer-press/\n * \n * @param {?} element Element to which to assign the new HammerJS gestures.\n * @return {?} Newly-created HammerJS instance.\n */\nbuildHammer(element: HTMLElement): HammerInstance {\n    const /** @type {?} */ mc = new this._hammer(element);\n\n    // Default Hammer Recognizers.\n    let /** @type {?} */ pan = new this._hammer.Pan();\n    let /** @type {?} */ swipe = new this._hammer.Swipe();\n    let /** @type {?} */ press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    let /** @type {?} */ slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    let /** @type {?} */ longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return /** @type {?} */(( mc as HammerInstance));\n  }\n/**\n * Creates a new recognizer, without affecting the default recognizers of HammerJS\n * @param {?} base\n * @param {?} options\n * @param {...?} inheritances\n * @return {?}\n */\nprivate _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let /** @type {?} */ recognizer = new ( /** @type {?} */((base.constructor as RecognizerStatic)))(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GestureConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nGestureConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGestureConfig.ctorParameters;\n/** @type {?} */\nGestureConfig.prototype._hammer;\n/** @type {?} */\nGestureConfig.prototype.events;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable} from '@angular/core';\nimport {OverlayContainer} from './overlay-container';\n/**\n * The FullscreenOverlayContainer is the alternative to OverlayContainer\n * that supports correct displaying of overlay elements in Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n * It should be provided in the root component that way:\n * providers: [\n *   {provide: OverlayContainer, useClass: FullscreenOverlayContainer}\n * ],\n */\nexport class FullscreenOverlayContainer extends OverlayContainer {\n/**\n * @return {?}\n */\nprotected _createContainer(): void {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n/**\n * @return {?}\n */\nprivate _adjustParentForFullscreenChange(): void {\n    if (!this._containerElement) {\n      return;\n    }\n    let /** @type {?} */ fullscreenElement = this.getFullscreenElement();\n    let /** @type {?} */ parent = fullscreenElement || document.body;\n    parent.appendChild(this._containerElement);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nprivate _addFullscreenChangeListener(fn: () => void) {\n    if (document.fullscreenEnabled) {\n      document.addEventListener('fullscreenchange', fn);\n    } else if (document.webkitFullscreenEnabled) {\n      document.addEventListener('webkitfullscreenchange', fn);\n    } else if (( /** @type {?} */((document as any))).mozFullScreenEnabled) {\n      document.addEventListener('mozfullscreenchange', fn);\n    } else if (( /** @type {?} */((document as any))).msFullscreenEnabled) {\n      document.addEventListener('MSFullscreenChange', fn);\n    }\n  }\n/**\n * When the page is put into fullscreen mode, a specific element is specified.\n * Only that element and its children are visible when in fullscreen mode.\n * @return {?}\n */\ngetFullscreenElement(): Element {\n    return document.fullscreenElement ||\n        document.webkitFullscreenElement ||\n        ( /** @type {?} */((document as any))).mozFullScreenElement ||\n        ( /** @type {?} */((document as any))).msFullscreenElement ||\n        null;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FullscreenOverlayContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nFullscreenOverlayContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFullscreenOverlayContainer.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {FocusTrapDirective, FocusTrapDeprecatedDirective, FocusTrapFactory} from './focus-trap';\nimport {LIVE_ANNOUNCER_PROVIDER} from './live-announcer';\nimport {InteractivityChecker} from './interactivity-checker';\nimport {CommonModule} from '@angular/common';\nimport {PlatformModule} from '../platform/index';\nexport class A11yModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, PlatformModule],\n  declarations: [FocusTrapDirective, FocusTrapDeprecatedDirective],\n  exports: [FocusTrapDirective, FocusTrapDeprecatedDirective],\n  providers: [InteractivityChecker, FocusTrapFactory, LIVE_ANNOUNCER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction A11yModule_tsickle_Closure_declarations() {\n/** @type {?} */\nA11yModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA11yModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Injectable,\n  InjectionToken,\n  Optional,\n  Inject,\n  SkipSelf,\n} from '@angular/core';\nimport {Platform} from '../platform/platform';\n\n\nexport const /** @type {?} */ LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken<HTMLElement>('liveAnnouncerElement');\n\n/** Possible politeness levels. */\nexport type AriaLivePoliteness = 'off' | 'polite' | 'assertive';\nexport class LiveAnnouncer {\nprivate _liveElement: Element;\n/**\n * @param {?} elementToken\n * @param {?} platform\n */\nconstructor(\n        elementToken: any,\n      platform: Platform) {\n    // Only do anything if we're on the browser platform.\n    if (platform.isBrowser) {\n      // We inject the live element as `any` because the constructor signature cannot reference\n      // browser globals (HTMLElement) on non-browser environments, since having a class decorator\n      // causes TypeScript to preserve the constructor signature types.\n      this._liveElement = elementToken || this._createLiveElement();\n    }\n  }\n/**\n * Announces a message to screenreaders.\n * @param {?} message Message to be announced to the screenreader\n * @param {?=} politeness The politeness of the announcer element\n * @return {?}\n */\nannounce(message: string, politeness: AriaLivePoliteness = 'polite'): void {\n    this._liveElement.textContent = '';\n\n    // TODO: ensure changing the politeness works on all environments we support.\n    this._liveElement.setAttribute('aria-live', politeness);\n\n    // This 100ms timeout is necessary for some browser + screen-reader combinations:\n    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n    //   second time without clearing and then using a non-zero delay.\n    // (using JAWS 17 at time of this writing).\n    setTimeout(() => this._liveElement.textContent = message, 100);\n  }\n/**\n * Removes the aria-live element from the DOM.\n * @return {?}\n */\n_removeLiveElement() {\n    if (this._liveElement && this._liveElement.parentNode) {\n      this._liveElement.parentNode.removeChild(this._liveElement);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _createLiveElement(): Element {\n    let /** @type {?} */ liveEl = document.createElement('div');\n\n    liveEl.classList.add('cdk-visually-hidden');\n    liveEl.setAttribute('aria-atomic', 'true');\n    liveEl.setAttribute('aria-live', 'polite');\n\n    document.body.appendChild(liveEl);\n\n    return liveEl;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIVE_ANNOUNCER_ELEMENT_TOKEN, ] }, ]},\n{type: Platform, },\n];\n}\n\nfunction LiveAnnouncer_tsickle_Closure_declarations() {\n/** @type {?} */\nLiveAnnouncer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLiveAnnouncer.ctorParameters;\n/** @type {?} */\nLiveAnnouncer.prototype._liveElement;\n}\n\n/**\n * @param {?} parentDispatcher\n * @param {?} liveElement\n * @param {?} platform\n * @return {?}\n */\nexport function LIVE_ANNOUNCER_PROVIDER_FACTORY(\n    parentDispatcher: LiveAnnouncer, liveElement: any, platform: Platform) {\n  return parentDispatcher || new LiveAnnouncer(liveElement, platform);\n}\n\nexport const /** @type {?} */ LIVE_ANNOUNCER_PROVIDER = {\n  // If there is already a LiveAnnouncer available, use that. Otherwise, provide a new one.\n  provide: LiveAnnouncer,\n  deps: [\n    [new Optional(), new SkipSelf(), LiveAnnouncer],\n    [new Optional(), new Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN)],\n    Platform,\n  ],\n  useFactory: LIVE_ANNOUNCER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\r\n  Directive,\r\n  ElementRef,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  AfterContentInit,\r\n  Injectable,\r\n} from '@angular/core';\r\nimport {InteractivityChecker} from './interactivity-checker';\r\nimport {coerceBooleanProperty} from '../coercion/boolean-property';\r\n\r\nimport'rxjs/add/operator/first';\n/**\n * Class that allows for trapping focus within a DOM element.\r\rNOTE: This class currently uses a very simple (naive) approach to focus trapping.\rIt assumes that the tab order is the same as DOM order, which is not necessarily true.\rThings like tabIndex > 0, flex `order`, and shadow roots can cause to two to misalign.\rThis will be replaced with a more intelligent solution before the library is considered stable.\n */\nexport class FocusTrap {\nprivate _startAnchor: HTMLElement;\nprivate _endAnchor: HTMLElement;\n/**\n * Whether the focus trap is active.\n * @return {?}\n */\nget enabled(): boolean { return this._enabled; }\n/**\n * @param {?} val\n * @return {?}\n */\nset enabled(val: boolean) {\r\n    this._enabled = val;\r\n\r\n    if (this._startAnchor && this._endAnchor) {\r\n      this._startAnchor.tabIndex = this._endAnchor.tabIndex = this._enabled ? 0 : -1;\r\n    }\r\n  }\nprivate _enabled: boolean = true;\n/**\n * @param {?} _element\n * @param {?} _checker\n * @param {?} _ngZone\n * @param {?=} deferAnchors\n */\nconstructor(\nprivate _element: HTMLElement,\nprivate _checker: InteractivityChecker,\nprivate _ngZone: NgZone,\r\n    deferAnchors = false) {\r\n\r\n    if (!deferAnchors) {\r\n      // this.attachAnchors();\r\n    }\r\n  }\n/**\n * Destroys the focus trap by cleaning up the anchors.\n * @return {?}\n */\ndestroy() {\r\n    if (this._startAnchor && this._startAnchor.parentNode) {\r\n      this._startAnchor.parentNode.removeChild(this._startAnchor);\r\n    }\r\n\r\n    if (this._endAnchor && this._endAnchor.parentNode) {\r\n      this._endAnchor.parentNode.removeChild(this._endAnchor);\r\n    }\r\n\r\n    this._startAnchor = this._endAnchor = null;\r\n  }\n/**\n * Inserts the anchors into the DOM. This is usually done automatically\rin the constructor, but can be deferred for cases like directives with `*ngIf`.\n * @return {?}\n */\nattachAnchors(): void {\r\n    if (!this._startAnchor) {\r\n      this._startAnchor = this._createAnchor();\r\n    }\r\n\r\n    if (!this._endAnchor) {\r\n      this._endAnchor = this._createAnchor();\r\n    }\r\n\r\n    this._ngZone.runOutsideAngular(() => {\r\n      this._startAnchor.addEventListener('focus', () => this.focusLastTabbableElement());\r\n      this._endAnchor.addEventListener('focus', () => this.focusFirstTabbableElement());\r\n\r\n      this._element.parentNode.insertBefore(this._startAnchor, this._element);\r\n      this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);\r\n    });\r\n  }\n/**\n * @return {?}\n */\nfocusInitialElementWhenReady() {\r\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => this.focusInitialElement());\r\n  }\n/**\n * Waits for microtask queue to empty, then focuses\rthe first tabbable element within the focus trap region.\n * @return {?}\n */\nfocusFirstTabbableElementWhenReady() {\r\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => this.focusFirstTabbableElement());\r\n  }\n/**\n * Waits for microtask queue to empty, then focuses\rthe last tabbable element within the focus trap region.\n * @return {?}\n */\nfocusLastTabbableElementWhenReady() {\r\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => this.focusLastTabbableElement());\r\n  }\n/**\n * Get the specified boundary element of the trapped region.\r\\@param bound The boundary to get (start or end of trapped region).\r\\@returns The boundary element.\n * @param {?} bound\n * @return {?}\n */\nprivate _getRegionBoundary(bound: 'start' | 'end'): HTMLElement | null {\r\n    let /** @type {?} */ markers = [\r\n      ...Array.prototype.slice.call(this._element.querySelectorAll(`[cdk-focus-region-${bound}]`)),\r\n      // Deprecated version of selector, for temporary backwards comparability:\r\n      ...Array.prototype.slice.call(this._element.querySelectorAll(`[cdk-focus-${bound}]`)),\r\n    ];\r\n\r\n    markers.forEach((el: HTMLElement) => {\r\n      if (el.hasAttribute(`cdk-focus-${bound}`)) {\r\n        console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}',` +\r\n                     ` use 'cdk-focus-region-${bound}' instead.`, el);\r\n      }\r\n    });\r\n\r\n    if (bound == 'start') {\r\n      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\r\n    }\r\n    return markers.length ?\r\n        markers[markers.length - 1] : this._getLastTabbableElement(this._element);\r\n  }\n/**\n * Focuses the element that should be focused when the focus trap is initialized.\n * @return {?}\n */\nfocusInitialElement() {\r\n    let /** @type {?} */ redirectToElement = /** @type {?} */(( this._element.querySelector('[cdk-focus-initial]') as HTMLElement));\r\n    if (redirectToElement) {\r\n      redirectToElement.focus();\r\n    } else {\r\n      this.focusFirstTabbableElement();\r\n    }\r\n  }\n/**\n * Focuses the first tabbable element within the focus trap region.\n * @return {?}\n */\nfocusFirstTabbableElement() {\r\n    let /** @type {?} */ redirectToElement = this._getRegionBoundary('start');\r\n    if (redirectToElement) {\r\n      redirectToElement.focus();\r\n    }\r\n  }\n/**\n * Focuses the last tabbable element within the focus trap region.\n * @return {?}\n */\nfocusLastTabbableElement() {\r\n    let /** @type {?} */ redirectToElement = this._getRegionBoundary('end');\r\n    if (redirectToElement) {\r\n      redirectToElement.focus();\r\n    }\r\n  }\n/**\n * Get the first tabbable element from a DOM subtree (inclusive).\n * @param {?} root\n * @return {?}\n */\nprivate _getFirstTabbableElement(root: HTMLElement): HTMLElement {\r\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\r\n      return root;\r\n    }\r\n\r\n    // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\r\n    // back to `childNodes` which includes text nodes, comments etc.\r\n    let /** @type {?} */ children = root.children || root.childNodes;\r\n\r\n    for (let /** @type {?} */ i = 0; i < children.length; i++) {\r\n      let /** @type {?} */ tabbableChild = children[i].nodeType === Node.ELEMENT_NODE ?\r\n        this._getFirstTabbableElement( /** @type {?} */((children[i] as HTMLElement))) :\r\n        null;\r\n\r\n      if (tabbableChild) {\r\n        return tabbableChild;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\n/**\n * Get the last tabbable element from a DOM subtree (inclusive).\n * @param {?} root\n * @return {?}\n */\nprivate _getLastTabbableElement(root: HTMLElement): HTMLElement {\r\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\r\n      return root;\r\n    }\r\n\r\n    // Iterate in reverse DOM order.\r\n    let /** @type {?} */ children = root.children || root.childNodes;\r\n\r\n    for (let /** @type {?} */ i = children.length - 1; i >= 0; i--) {\r\n      let /** @type {?} */ tabbableChild = children[i].nodeType === Node.ELEMENT_NODE ?\r\n        this._getLastTabbableElement( /** @type {?} */((children[i] as HTMLElement))) :\r\n        null;\r\n\r\n      if (tabbableChild) {\r\n        return tabbableChild;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\n/**\n * Creates an anchor element.\n * @return {?}\n */\nprivate _createAnchor(): HTMLElement {\r\n    let /** @type {?} */ anchor = document.createElement('div');\r\n    anchor.tabIndex = this._enabled ? 0 : -1;\r\n    anchor.classList.add('cdk-visually-hidden');\r\n    anchor.classList.add('cdk-focus-trap-anchor');\r\n    return anchor;\r\n  }\r\n}\n\nfunction FocusTrap_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusTrap.prototype._startAnchor;\n/** @type {?} */\nFocusTrap.prototype._endAnchor;\n/** @type {?} */\nFocusTrap.prototype._enabled;\n/** @type {?} */\nFocusTrap.prototype._element;\n/** @type {?} */\nFocusTrap.prototype._checker;\n/** @type {?} */\nFocusTrap.prototype._ngZone;\n}\n\n/**\n * Factory that allows easy instantiation of focus traps.\n */\nexport class FocusTrapFactory {\n/**\n * @param {?} _checker\n * @param {?} _ngZone\n */\nconstructor(private _checker: InteractivityChecker,\nprivate _ngZone: NgZone) { }\n/**\n * @param {?} element\n * @param {?=} deferAnchors\n * @return {?}\n */\ncreate(element: HTMLElement, deferAnchors = false): FocusTrap {\r\n    return new FocusTrap(element, this._checker, this._ngZone, deferAnchors);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: InteractivityChecker, },\n{type: NgZone, },\n];\n}\n\nfunction FocusTrapFactory_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusTrapFactory.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusTrapFactory.ctorParameters;\n/** @type {?} */\nFocusTrapFactory.prototype._checker;\n/** @type {?} */\nFocusTrapFactory.prototype._ngZone;\n}\n\n/**\n * Directive for trapping focus within a region.\r\\@deprecated\n */\nexport class FocusTrapDeprecatedDirective implements OnDestroy, AfterContentInit {\r\n  focusTrap: FocusTrap;\n/**\n * Whether the focus trap is active.\n * @return {?}\n */\nget disabled(): boolean { return !this.focusTrap.enabled; }\n/**\n * @param {?} val\n * @return {?}\n */\nset disabled(val: boolean) {\r\n    this.focusTrap.enabled = !coerceBooleanProperty(val);\r\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory) {\r\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this.focusTrap.destroy();\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this.focusTrap.attachAnchors();\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'cdk-focus-trap',\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n};\n}\n\nfunction FocusTrapDeprecatedDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusTrapDeprecatedDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusTrapDeprecatedDirective.ctorParameters;\n/** @type {?} */\nFocusTrapDeprecatedDirective.propDecorators;\n/** @type {?} */\nFocusTrapDeprecatedDirective.prototype.focusTrap;\n/** @type {?} */\nFocusTrapDeprecatedDirective.prototype._elementRef;\n/** @type {?} */\nFocusTrapDeprecatedDirective.prototype._focusTrapFactory;\n}\n\n/**\n * Directive for trapping focus within a region.\n */\nexport class FocusTrapDirective implements OnDestroy, AfterContentInit {\r\n  focusTrap: FocusTrap;\n/**\n * Whether the focus trap is active.\n * @return {?}\n */\nget enabled(): boolean { return this.focusTrap.enabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset enabled(value: boolean) { this.focusTrap.enabled = coerceBooleanProperty(value); }\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory) {\r\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\r\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\r\n    this.focusTrap.destroy();\r\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n    this.focusTrap.attachAnchors();\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[cdkTrapFocus]',\r\n  exportAs: 'cdkTrapFocus',\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'enabled': [{ type: Input, args: ['cdkTrapFocus', ] },],\n};\n}\n\nfunction FocusTrapDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusTrapDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusTrapDirective.ctorParameters;\n/** @type {?} */\nFocusTrapDirective.propDecorators;\n/** @type {?} */\nFocusTrapDirective.prototype.focusTrap;\n/** @type {?} */\nFocusTrapDirective.prototype._elementRef;\n/** @type {?} */\nFocusTrapDirective.prototype._focusTrapFactory;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable} from '@angular/core';\nimport {Platform} from '../platform/platform';\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\nexport class InteractivityChecker {\n/**\n * @param {?} _platform\n */\nconstructor(private _platform: Platform) {}\n/**\n * Gets whether an element is disabled.\n * \n * @param {?} element Element to be checked.\n * @return {?} Whether the element is disabled.\n */\nisDisabled(element: HTMLElement): boolean {\n    // This does not capture some cases, such as a non-form control with a disabled attribute or\n    // a form control inside of a disabled form, but should capture the most common cases.\n    return element.hasAttribute('disabled');\n  }\n/**\n * Gets whether an element is visible for the purposes of interactivity.\n * \n * This will capture states like `display: none` and `visibility: hidden`, but not things like\n * being clipped by an `overflow: hidden` parent or being outside the viewport.\n * \n * @param {?} element\n * @return {?} Whether the element is visible.\n */\nisVisible(element: HTMLElement): boolean {\n    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n  }\n/**\n * Gets whether an element can be reached via Tab key.\n * Assumes that the element has already been checked with isFocusable.\n * \n * @param {?} element Element to be checked.\n * @return {?} Whether the element is tabbable.\n */\nisTabbable(element: HTMLElement): boolean {\n\n    let /** @type {?} */ frameElement = /** @type {?} */(( getWindow(element).frameElement as HTMLElement));\n\n    if (frameElement) {\n\n      let /** @type {?} */ frameType = frameElement && frameElement.nodeName.toLowerCase();\n\n      // Frame elements inherit their tabindex onto all child elements.\n      if (getTabIndexValue(frameElement) === -1) {\n        return false;\n      }\n\n      // Webkit and Blink consider anything inside of an <object> element as non-tabbable.\n      if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {\n        return false;\n      }\n\n      // Webkit and Blink disable tabbing to an element inside of an invisible frame.\n      if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {\n        return false;\n      }\n\n    }\n\n    let /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n    let /** @type {?} */ tabIndexValue = getTabIndexValue(element);\n\n    if (element.hasAttribute('contenteditable')) {\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'iframe') {\n      // The frames may be tabbable depending on content, but it's not possibly to reliably\n      // investigate the content of the frames.\n      return false;\n    }\n\n    if (nodeName === 'audio') {\n      if (!element.hasAttribute('controls')) {\n        // By default an <audio> element without the controls enabled is not tabbable.\n        return false;\n      } else if (this._platform.BLINK) {\n        // In Blink <audio controls> elements are always tabbable.\n        return true;\n      }\n    }\n\n    if (nodeName === 'video') {\n      if (!element.hasAttribute('controls') && this._platform.TRIDENT) {\n        // In Trident a <video> element without the controls enabled is not tabbable.\n        return false;\n      } else if (this._platform.BLINK || this._platform.FIREFOX) {\n        // In Chrome and Firefox <video controls> elements are always tabbable.\n        return true;\n      }\n    }\n\n    if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {\n      // In all Blink and WebKit based browsers <object> elements are never tabbable.\n      return false;\n    }\n\n    // In iOS the browser only considers some specific elements as tabbable.\n    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n      return false;\n    }\n\n    return element.tabIndex >= 0;\n  }\n/**\n * Gets whether an element can be focused by the user.\n * \n * @param {?} element Element to be checked.\n * @return {?} Whether the element is focusable.\n */\nisFocusable(element: HTMLElement): boolean {\n    // Perform checks in order of left to most expensive.\n    // Again, naive approach that does not capture many edge cases and browser quirks.\n    return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Platform, },\n];\n}\n\nfunction InteractivityChecker_tsickle_Closure_declarations() {\n/** @type {?} */\nInteractivityChecker.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInteractivityChecker.ctorParameters;\n/** @type {?} */\nInteractivityChecker.prototype._platform;\n}\n\n/**\n * Checks whether the specified element has any geometry / rectangles.\n * @param {?} element\n * @return {?}\n */\nfunction hasGeometry(element: HTMLElement): boolean {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight || element.getClientRects().length);\n}\n/**\n * Gets whether an element's\n * @param {?} element\n * @return {?}\n */\nfunction isNativeFormElement(element: Node) {\n  let /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' ||\n      nodeName === 'select' ||\n      nodeName === 'button' ||\n      nodeName === 'textarea';\n}\n/**\n * Gets whether an element is an <input type=\"hidden\">.\n * @param {?} element\n * @return {?}\n */\nfunction isHiddenInput(element: HTMLElement): boolean {\n  return isInputElement(element) && element.type == 'hidden';\n}\n/**\n * Gets whether an element is an anchor that has an href attribute.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorWithHref(element: HTMLElement): boolean {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n/**\n * Gets whether an element is an input element.\n * @param {?} element\n * @return {?}\n */\nfunction isInputElement(element: HTMLElement): element is HTMLInputElement {\n  return element.nodeName.toLowerCase() == 'input';\n}\n/**\n * Gets whether an element is an anchor element.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorElement(element: HTMLElement): element is HTMLAnchorElement {\n  return element.nodeName.toLowerCase() == 'a';\n}\n/**\n * Gets whether an element has a valid tabindex.\n * @param {?} element\n * @return {?}\n */\nfunction hasValidTabIndex(element: HTMLElement): boolean {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n\n  let /** @type {?} */ tabIndex = element.getAttribute('tabindex');\n\n  // IE11 parses tabindex=\"\" as the value \"-32768\"\n  if (tabIndex == '-32768') {\n    return false;\n  }\n\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n * @param {?} element\n * @return {?}\n */\nfunction getTabIndexValue(element: HTMLElement): number {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  }\n\n  // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n  const /** @type {?} */ tabIndex = parseInt(element.getAttribute('tabindex'), 10);\n\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/**\n * Checks whether the specified element is potentially tabbable on iOS\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyTabbableIOS(element: HTMLElement): boolean {\n  let /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n  let /** @type {?} */ inputType = nodeName === 'input' && ( /** @type {?} */((element as HTMLInputElement))).type;\n\n  return inputType === 'text'\n      || inputType === 'password'\n      || nodeName === 'select'\n      || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyFocusable(element: HTMLElement): boolean {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return isNativeFormElement(element) ||\n      isAnchorWithHref(element) ||\n      element.hasAttribute('contenteditable') ||\n      hasValidTabIndex(element);\n}\n/**\n * Gets the parent window of a DOM node with regards of being inside of an iframe.\n * @param {?} node\n * @return {?}\n */\nfunction getWindow(node: HTMLElement): Window {\n  return node.ownerDocument.defaultView || window;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n    NgModule,\n    Directive,\n    EventEmitter,\n    TemplateRef,\n    ViewContainerRef,\n    Optional,\n    Input,\n    OnDestroy,\n    Output,\n    ElementRef,\n    Renderer2,\n    OnChanges,\n    SimpleChanges,\n} from '@angular/core';\nimport {Overlay, OVERLAY_PROVIDERS} from './overlay';\nimport {OverlayRef} from './overlay-ref';\nimport {TemplatePortal} from '../portal/portal';\nimport {OverlayState} from './overlay-state';\nimport {\n    ConnectionPositionPair,\n    ConnectedOverlayPositionChange\n} from './position/connected-position';\nimport {PortalModule} from '../portal/portal-directives';\nimport {ConnectedPositionStrategy} from './position/connected-position-strategy';\nimport {Dir, LayoutDirection} from '../rtl/dir';\nimport {Scrollable} from './scroll/scrollable';\nimport {RepositionScrollStrategy} from './scroll/reposition-scroll-strategy';\nimport {ScrollStrategy} from './scroll/scroll-strategy';\nimport {coerceBooleanProperty} from '../coercion/boolean-property';\nimport {ESCAPE} from '../keyboard/keycodes';\nimport {ScrollDispatcher} from './scroll/scroll-dispatcher';\nimport {Subscription} from 'rxjs/Subscription';\nimport {ScrollDispatchModule} from './scroll/index';\n/**\n * Default set of positions for the overlay. Follows the behavior of a dropdown.\n */\nlet defaultPositionList = [\n  new ConnectionPositionPair(\n      {originX: 'start', originY: 'bottom'},\n      {overlayX: 'start', overlayY: 'top'}),\n  new ConnectionPositionPair(\n      {originX: 'start', originY: 'top'},\n      {overlayX: 'start', overlayY: 'bottom'}),\n];\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nexport class OverlayOrigin {\n/**\n * @param {?} elementRef\n */\nconstructor(public elementRef: ElementRef) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n  exportAs: 'cdkOverlayOrigin',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction OverlayOrigin_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayOrigin.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayOrigin.ctorParameters;\n/** @type {?} */\nOverlayOrigin.prototype.elementRef;\n}\n\n/**\n * Directive to facilitate declarative creation of an Overlay using a ConnectedPositionStrategy.\n */\nexport class ConnectedOverlayDirective implements OnDestroy, OnChanges {\nprivate _overlayRef: OverlayRef;\nprivate _templatePortal: TemplatePortal;\nprivate _hasBackdrop = false;\nprivate _backdropSubscription: Subscription;\nprivate _positionSubscription: Subscription;\nprivate _offsetX: number = 0;\nprivate _offsetY: number = 0;\nprivate _position: ConnectedPositionStrategy;\nprivate _escapeListener: Function;\n/**\n * Origin for the connected overlay.\n */\norigin: OverlayOrigin;\n/**\n * Registered connected position pairs.\n */\npositions: ConnectionPositionPair[];\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n * @return {?}\n */\nget offsetX(): number {\n    return this._offsetX;\n  }\n/**\n * @param {?} offsetX\n * @return {?}\n */\nset offsetX(offsetX: number) {\n    this._offsetX = offsetX;\n    if (this._position) {\n      this._position.withOffsetX(offsetX);\n    }\n  }\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n * @return {?}\n */\nget offsetY() {\n    return this._offsetY;\n  }\n/**\n * @param {?} offsetY\n * @return {?}\n */\nset offsetY(offsetY: number) {\n    this._offsetY = offsetY;\n    if (this._position) {\n      this._position.withOffsetY(offsetY);\n    }\n  }\n/**\n * The width of the overlay panel.\n */\nwidth: number | string;\n/**\n * The height of the overlay panel.\n */\nheight: number | string;\n/**\n * The min width of the overlay panel.\n */\nminWidth: number | string;\n/**\n * The min height of the overlay panel.\n */\nminHeight: number | string;\n/**\n * The custom class to be set on the backdrop element.\n */\nbackdropClass: string;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n */\nscrollStrategy: ScrollStrategy = new RepositionScrollStrategy(this._scrollDispatcher);\n/**\n * Whether the overlay is open.\n */\nopen: boolean = false;\n/**\n * Whether or not the overlay should attach a backdrop.\n * @return {?}\n */\nget hasBackdrop() {\n    return this._hasBackdrop;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset hasBackdrop(value: any) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n/**\n * Event emitted when the backdrop is clicked.\n */\nbackdropClick = new EventEmitter<void>();\n/**\n * Event emitted when the position has changed.\n */\npositionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n/**\n * Event emitted when the overlay has been attached.\n */\nattach = new EventEmitter<void>();\n/**\n * Event emitted when the overlay has been detached.\n */\ndetach = new EventEmitter<void>();\n/**\n * @param {?} _overlay\n * @param {?} _renderer\n * @param {?} _scrollDispatcher\n * @param {?} templateRef\n * @param {?} viewContainerRef\n * @param {?} _dir\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _renderer: Renderer2,\nprivate _scrollDispatcher: ScrollDispatcher,\n      templateRef: TemplateRef<any>,\n      viewContainerRef: ViewContainerRef,\nprivate _dir: Dir) {\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n  }\n/**\n * The associated overlay reference.\n * @return {?}\n */\nget overlayRef(): OverlayRef {\n    return this._overlayRef;\n  }\n/**\n * The element's layout direction.\n * @return {?}\n */\nget dir(): LayoutDirection {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._destroyOverlay();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (changes['open']) {\n      this.open ? this._attachOverlay() : this._detachOverlay();\n    }\n  }\n/**\n * Creates an overlay\n * @return {?}\n */\nprivate _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    this._overlayRef = this._overlay.create(this._buildConfig());\n  }\n/**\n * Builds the overlay config based on the directive's inputs\n * @return {?}\n */\nprivate _buildConfig(): OverlayState {\n    let /** @type {?} */ overlayConfig = new OverlayState();\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    overlayConfig.hasBackdrop = this.hasBackdrop;\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    this._position = /** @type {?} */(( this._createPositionStrategy() as ConnectedPositionStrategy));\n    overlayConfig.positionStrategy = this._position;\n    overlayConfig.scrollStrategy = this.scrollStrategy;\n\n    return overlayConfig;\n  }\n/**\n * Returns the position strategy of the overlay to be set on the overlay config\n * @return {?}\n */\nprivate _createPositionStrategy(): ConnectedPositionStrategy {\n    const /** @type {?} */ pos = this.positions[0];\n    const /** @type {?} */ originPoint = {originX: pos.originX, originY: pos.originY};\n    const /** @type {?} */ overlayPoint = {overlayX: pos.overlayX, overlayY: pos.overlayY};\n\n    const /** @type {?} */ strategy = this._overlay.position()\n      .connectedTo(this.origin.elementRef, originPoint, overlayPoint)\n      .withOffsetX(this.offsetX)\n      .withOffsetY(this.offsetY);\n\n    this._handlePositionChanges(strategy);\n\n    return strategy;\n  }\n/**\n * @param {?} strategy\n * @return {?}\n */\nprivate _handlePositionChanges(strategy: ConnectedPositionStrategy): void {\n    for (let /** @type {?} */ i = 1; i < this.positions.length; i++) {\n      strategy.withFallbackPosition(\n          {originX: this.positions[i].originX, originY: this.positions[i].originY},\n          {overlayX: this.positions[i].overlayX, overlayY: this.positions[i].overlayY}\n      );\n    }\n\n    this._positionSubscription =\n        strategy.onPositionChange.subscribe(pos => this.positionChange.emit(pos));\n  }\n/**\n * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n * @return {?}\n */\nprivate _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    }\n\n    this._position.withDirection(this.dir);\n    this._overlayRef.getState().direction = this.dir;\n    this._initEscapeListener();\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n      this.attach.emit();\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(() => {\n        this.backdropClick.emit();\n      });\n    }\n  }\n/**\n * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n * @return {?}\n */\nprivate _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n      this.detach.emit();\n    }\n\n    if (this._backdropSubscription) {\n      this._backdropSubscription.unsubscribe();\n      this._backdropSubscription = null;\n    }\n\n    if (this._escapeListener) {\n      this._escapeListener();\n    }\n  }\n/**\n * Destroys the overlay created by this directive.\n * @return {?}\n */\nprivate _destroyOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n\n    if (this._backdropSubscription) {\n      this._backdropSubscription.unsubscribe();\n    }\n\n    if (this._positionSubscription) {\n      this._positionSubscription.unsubscribe();\n    }\n\n    if (this._escapeListener) {\n      this._escapeListener();\n    }\n  }\n/**\n * Sets the event listener that closes the overlay when pressing Escape.\n * @return {?}\n */\nprivate _initEscapeListener() {\n    this._escapeListener = this._renderer.listen('document', 'keydown', (event: KeyboardEvent) => {\n      if (event.keyCode === ESCAPE) {\n        this._detachOverlay();\n      }\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n  exportAs: 'cdkConnectedOverlay'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: Renderer2, },\n{type: ScrollDispatcher, },\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n{type: Dir, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'origin': [{ type: Input },],\n'positions': [{ type: Input },],\n'offsetX': [{ type: Input },],\n'offsetY': [{ type: Input },],\n'width': [{ type: Input },],\n'height': [{ type: Input },],\n'minWidth': [{ type: Input },],\n'minHeight': [{ type: Input },],\n'backdropClass': [{ type: Input },],\n'scrollStrategy': [{ type: Input },],\n'open': [{ type: Input },],\n'hasBackdrop': [{ type: Input },],\n'backdropClick': [{ type: Output },],\n'positionChange': [{ type: Output },],\n'attach': [{ type: Output },],\n'detach': [{ type: Output },],\n};\n}\n\nfunction ConnectedOverlayDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectedOverlayDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nConnectedOverlayDirective.ctorParameters;\n/** @type {?} */\nConnectedOverlayDirective.propDecorators;\n/** @type {?} */\nConnectedOverlayDirective.prototype._overlayRef;\n/** @type {?} */\nConnectedOverlayDirective.prototype._templatePortal;\n/** @type {?} */\nConnectedOverlayDirective.prototype._hasBackdrop;\n/** @type {?} */\nConnectedOverlayDirective.prototype._backdropSubscription;\n/** @type {?} */\nConnectedOverlayDirective.prototype._positionSubscription;\n/** @type {?} */\nConnectedOverlayDirective.prototype._offsetX;\n/** @type {?} */\nConnectedOverlayDirective.prototype._offsetY;\n/** @type {?} */\nConnectedOverlayDirective.prototype._position;\n/** @type {?} */\nConnectedOverlayDirective.prototype._escapeListener;\n/**\n * Origin for the connected overlay.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.origin;\n/**\n * Registered connected position pairs.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.positions;\n/**\n * The width of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.width;\n/**\n * The height of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.height;\n/**\n * The min width of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.minWidth;\n/**\n * The min height of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.minHeight;\n/**\n * The custom class to be set on the backdrop element.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.backdropClass;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.scrollStrategy;\n/**\n * Whether the overlay is open.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.open;\n/**\n * Event emitted when the backdrop is clicked.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.backdropClick;\n/**\n * Event emitted when the position has changed.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.positionChange;\n/**\n * Event emitted when the overlay has been attached.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.attach;\n/**\n * Event emitted when the overlay has been detached.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.detach;\n/** @type {?} */\nConnectedOverlayDirective.prototype._overlay;\n/** @type {?} */\nConnectedOverlayDirective.prototype._renderer;\n/** @type {?} */\nConnectedOverlayDirective.prototype._scrollDispatcher;\n/** @type {?} */\nConnectedOverlayDirective.prototype._dir;\n}\n\nexport class OverlayModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [PortalModule, ScrollDispatchModule],\n  exports: [ConnectedOverlayDirective, OverlayOrigin, ScrollDispatchModule],\n  declarations: [ConnectedOverlayDirective, OverlayOrigin],\n  providers: [OVERLAY_PROVIDERS],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OverlayModule_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  ComponentFactoryResolver,\n  Injectable,\n  ApplicationRef,\n  Injector,\n  NgZone,\n  Provider,\n} from '@angular/core';\nimport {OverlayState} from './overlay-state';\nimport {DomPortalHost} from '../portal/dom-portal-host';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {VIEWPORT_RULER_PROVIDER} from './position/viewport-ruler';\nimport {OverlayContainer, OVERLAY_CONTAINER_PROVIDER} from './overlay-container';\n/**\n * Next overlay unique ID.\n */\nlet nextUniqueId = 0;\n/**\n * The default state for newly created overlays.\n */\nlet defaultState = new OverlayState();\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n * \n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\nexport class Overlay {\n/**\n * @param {?} _overlayContainer\n * @param {?} _componentFactoryResolver\n * @param {?} _positionBuilder\n * @param {?} _appRef\n * @param {?} _injector\n * @param {?} _ngZone\n */\nconstructor(private _overlayContainer: OverlayContainer,\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _positionBuilder: OverlayPositionBuilder,\nprivate _appRef: ApplicationRef,\nprivate _injector: Injector,\nprivate _ngZone: NgZone) {}\n/**\n * Creates an overlay.\n * @param {?=} state State to apply to the overlay.\n * @return {?} Reference to the created overlay.\n */\ncreate(state: OverlayState = defaultState): OverlayRef {\n    return this._createOverlayRef(this._createPaneElement(), state);\n  }\n/**\n * Returns a position builder that can be used, via fluent API,\n * to construct and configure a position strategy.\n * @return {?}\n */\nposition(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n/**\n * Creates the DOM element for an overlay and appends it to the overlay container.\n * @return {?} Newly-created pane element\n */\nprivate _createPaneElement(): HTMLElement {\n    let /** @type {?} */ pane = document.createElement('div');\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n\n    this._overlayContainer.getContainerElement().appendChild(pane);\n\n    return pane;\n  }\n/**\n * Create a DomPortalHost into which the overlay content can be loaded.\n * @param {?} pane The DOM element to turn into a portal host.\n * @return {?} A portal host for the given DOM element.\n */\nprivate _createPortalHost(pane: HTMLElement): DomPortalHost {\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef, this._injector);\n  }\n/**\n * Creates an OverlayRef for an overlay in the given DOM element.\n * @param {?} pane DOM element for the overlay\n * @param {?} state\n * @return {?}\n */\nprivate _createOverlayRef(pane: HTMLElement, state: OverlayState): OverlayRef {\n    return new OverlayRef(this._createPortalHost(pane), pane, state, this._ngZone);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: OverlayContainer, },\n{type: ComponentFactoryResolver, },\n{type: OverlayPositionBuilder, },\n{type: ApplicationRef, },\n{type: Injector, },\n{type: NgZone, },\n];\n}\n\nfunction Overlay_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlay.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlay.ctorParameters;\n/** @type {?} */\nOverlay.prototype._overlayContainer;\n/** @type {?} */\nOverlay.prototype._componentFactoryResolver;\n/** @type {?} */\nOverlay.prototype._positionBuilder;\n/** @type {?} */\nOverlay.prototype._appRef;\n/** @type {?} */\nOverlay.prototype._injector;\n/** @type {?} */\nOverlay.prototype._ngZone;\n}\n\n/**\n * Providers for Overlay and its related injectables.\n */\nexport const OVERLAY_PROVIDERS: Provider[] = [\n  Overlay,\n  OverlayPositionBuilder,\n  VIEWPORT_RULER_PROVIDER,\n  OVERLAY_CONTAINER_PROVIDER,\n];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable, Optional, SkipSelf} from '@angular/core';\n/**\n * The OverlayContainer is the container in which all overlays will load.\n * It should be provided in the root component to ensure it is properly shared.\n */\nexport class OverlayContainer {\n  protected _containerElement: HTMLElement;\nprivate _themeClass: string;\n/**\n * Base theme to be applied to all overlay-based components.\n * @return {?}\n */\nget themeClass(): string { return this._themeClass; }\n/**\n * @param {?} value\n * @return {?}\n */\nset themeClass(value: string) {\n    if (this._containerElement) {\n      this._containerElement.classList.remove(this._themeClass);\n\n      if (value) {\n        this._containerElement.classList.add(value);\n      }\n    }\n\n    this._themeClass = value;\n  }\n/**\n * This method returns the overlay container element.  It will lazily\n * create the element the first time  it is called to facilitate using\n * the container in non-browser environments.\n * @return {?} the container element\n */\ngetContainerElement(): HTMLElement {\n    if (!this._containerElement) { this._createContainer(); }\n    return this._containerElement;\n  }\n/**\n * Create the overlay container element, which is simply a div\n * with the 'cdk-overlay-container' class on the document body.\n * @return {?}\n */\nprotected _createContainer(): void {\n    let /** @type {?} */ container = document.createElement('div');\n    container.classList.add('cdk-overlay-container');\n\n    if (this._themeClass) {\n      container.classList.add(this._themeClass);\n    }\n\n    document.body.appendChild(container);\n    this._containerElement = container;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OverlayContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayContainer.ctorParameters;\n/** @type {?} */\nOverlayContainer.prototype._containerElement;\n/** @type {?} */\nOverlayContainer.prototype._themeClass;\n}\n\n/**\n * @param {?} parentContainer\n * @return {?}\n */\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer) {\n  return parentContainer || new OverlayContainer();\n}\n\nexport const /** @type {?} */ OVERLAY_CONTAINER_PROVIDER = {\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n  provide: OverlayContainer,\n  deps: [[new Optional(), new SkipSelf(), OverlayContainer]],\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {ViewportRuler} from './viewport-ruler';\nimport {ConnectedPositionStrategy} from './connected-position-strategy';\nimport {ElementRef, Injectable} from '@angular/core';\nimport {GlobalPositionStrategy} from './global-position-strategy';\nimport {OverlayConnectionPosition, OriginConnectionPosition} from './connected-position';\n/**\n * Builder for overlay position strategy.\n */\nexport class OverlayPositionBuilder {\n/**\n * @param {?} _viewportRuler\n */\nconstructor(private _viewportRuler: ViewportRuler) { }\n/**\n * Creates a global position strategy.\n * @return {?}\n */\nglobal(): GlobalPositionStrategy {\n    return new GlobalPositionStrategy();\n  }\n/**\n * Creates a relative position strategy.\n * @param {?} elementRef\n * @param {?} originPos\n * @param {?} overlayPos\n * @return {?}\n */\nconnectedTo(\n      elementRef: ElementRef,\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): ConnectedPositionStrategy {\n    return new ConnectedPositionStrategy(elementRef, originPos, overlayPos, this._viewportRuler);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewportRuler, },\n];\n}\n\nfunction OverlayPositionBuilder_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayPositionBuilder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayPositionBuilder.ctorParameters;\n/** @type {?} */\nOverlayPositionBuilder.prototype._viewportRuler;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {PositionStrategy} from './position-strategy';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nexport class GlobalPositionStrategy implements PositionStrategy {\nprivate _cssPosition: string = 'static';\nprivate _topOffset: string = '';\nprivate _bottomOffset: string = '';\nprivate _leftOffset: string = '';\nprivate _rightOffset: string = '';\nprivate _alignItems: string = '';\nprivate _justifyContent: string = '';\nprivate _width: string = '';\nprivate _height: string = '';\nprivate _wrapper: HTMLElement;\n/**\n * Sets the top position of the overlay. Clears any previously set vertical position.\n * @param {?} value New top offset.\n * @return {?}\n */\ntop(value: string): this {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n/**\n * Sets the left position of the overlay. Clears any previously set horizontal position.\n * @param {?} value New left offset.\n * @return {?}\n */\nleft(value: string): this {\n    this._rightOffset = '';\n    this._leftOffset = value;\n    this._justifyContent = 'flex-start';\n    return this;\n  }\n/**\n * Sets the bottom position of the overlay. Clears any previously set vertical position.\n * @param {?} value New bottom offset.\n * @return {?}\n */\nbottom(value: string): this {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n/**\n * Sets the right position of the overlay. Clears any previously set horizontal position.\n * @param {?} value New right offset.\n * @return {?}\n */\nright(value: string): this {\n    this._leftOffset = '';\n    this._rightOffset = value;\n    this._justifyContent = 'flex-end';\n    return this;\n  }\n/**\n * Sets the overlay width and clears any previously set width.\n * @param {?} value New width for the overlay\n * @return {?}\n */\nwidth(value: string): this {\n    this._width = value;\n\n    // When the width is 100%, we should reset the `left` and the offset,\n    // in order to ensure that the element is flush against the viewport edge.\n    if (value === '100%') {\n      this.left('0px');\n    }\n\n    return this;\n  }\n/**\n * Sets the overlay height and clears any previously set height.\n * @param {?} value New height for the overlay\n * @return {?}\n */\nheight(value: string): this {\n    this._height = value;\n\n    // When the height is 100%, we should reset the `top` and the offset,\n    // in order to ensure that the element is flush against the viewport edge.\n    if (value === '100%') {\n      this.top('0px');\n    }\n\n    return this;\n  }\n/**\n * Centers the overlay horizontally with an optional offset.\n * Clears any previously set horizontal position.\n * \n * @param {?=} offset Overlay offset from the horizontal center.\n * @return {?}\n */\ncenterHorizontally(offset = ''): this {\n    this.left(offset);\n    this._justifyContent = 'center';\n    return this;\n  }\n/**\n * Centers the overlay vertically with an optional offset.\n * Clears any previously set vertical position.\n * \n * @param {?=} offset Overlay offset from the vertical center.\n * @return {?}\n */\ncenterVertically(offset = ''): this {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n/**\n * Apply the position to the element.\n * \\@docs-private \n * \n * @param {?} element Element to which to apply the CSS.\n * @return {?} Resolved when the styles have been applied.\n */\napply(element: HTMLElement): Promise<void> {\n    if (!this._wrapper) {\n      this._wrapper = document.createElement('div');\n      this._wrapper.classList.add('cdk-global-overlay-wrapper');\n      element.parentNode.insertBefore(this._wrapper, element);\n      this._wrapper.appendChild(element);\n    }\n\n    let /** @type {?} */ styles = element.style;\n    let /** @type {?} */ parentStyles = ( /** @type {?} */((element.parentNode as HTMLElement))).style;\n\n    styles.position = this._cssPosition;\n    styles.marginTop = this._topOffset;\n    styles.marginLeft = this._leftOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = this._rightOffset;\n    styles.width = this._width;\n    styles.height = this._height;\n\n    parentStyles.justifyContent = this._justifyContent;\n    parentStyles.alignItems = this._alignItems;\n\n    return Promise.resolve(null);\n  }\n/**\n * Removes the wrapper element from the DOM.\n * @return {?}\n */\ndispose(): void {\n    if (this._wrapper && this._wrapper.parentNode) {\n      this._wrapper.parentNode.removeChild(this._wrapper);\n      this._wrapper = null;\n    }\n  }\n}\n\nfunction GlobalPositionStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nGlobalPositionStrategy.prototype._cssPosition;\n/** @type {?} */\nGlobalPositionStrategy.prototype._topOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._bottomOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._leftOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._rightOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._alignItems;\n/** @type {?} */\nGlobalPositionStrategy.prototype._justifyContent;\n/** @type {?} */\nGlobalPositionStrategy.prototype._width;\n/** @type {?} */\nGlobalPositionStrategy.prototype._height;\n/** @type {?} */\nGlobalPositionStrategy.prototype._wrapper;\n}\n\n","import {PositionStrategy} from './position-strategy';\nimport {ElementRef} from '@angular/core';\nimport {ViewportRuler} from './viewport-ruler';\nimport {\n  ConnectionPositionPair,\n  OriginConnectionPosition,\n  OverlayConnectionPosition,\n  ConnectedOverlayPositionChange, ScrollableViewProperties\n} from './connected-position';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {Scrollable} from '../scroll/scrollable';\n\n/**\n * Container to hold the bounding positions of a particular element with respect to the viewport,\n * where top and bottom are the y-axis coordinates of the bounding rectangle and left and right are\n * the x-axis coordinates.\n */\ntype ElementBoundingPositions = {\n  top: number;\n  right: number;\n  bottom: number;\n  left: number;\n};\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nexport class ConnectedPositionStrategy implements PositionStrategy {\nprivate _dir = 'ltr';\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n */\nprivate _offsetX: number = 0;\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n */\nprivate _offsetY: number = 0;\n/**\n * The Scrollable containers used to check scrollable view properties on position change.\n */\nprivate scrollables: Scrollable[] = [];\n/**\n * Whether the we're dealing with an RTL context\n * @return {?}\n */\nget _isRtl() {\n    return this._dir === 'rtl';\n  }\n/**\n * Ordered list of preferred positions, from most to least desirable.\n */\n_preferredPositions: ConnectionPositionPair[] = [];\n/**\n * The origin element against which the overlay will be positioned.\n */\nprivate _origin: HTMLElement;\n/**\n * The overlay pane element.\n */\nprivate _pane: HTMLElement;\n/**\n * The last position to have been calculated as the best fit position.\n */\nprivate _lastConnectedPosition: ConnectionPositionPair;\n\n  _onPositionChange:\n      Subject<ConnectedOverlayPositionChange> = new Subject<ConnectedOverlayPositionChange>();\n/**\n * Emits an event when the connection point changes.\n * @return {?}\n */\nget onPositionChange(): Observable<ConnectedOverlayPositionChange> {\n    return this._onPositionChange.asObservable();\n  }\n/**\n * @param {?} _connectedTo\n * @param {?} _originPos\n * @param {?} _overlayPos\n * @param {?} _viewportRuler\n */\nconstructor(\nprivate _connectedTo: ElementRef,\nprivate _originPos: OriginConnectionPosition,\nprivate _overlayPos: OverlayConnectionPosition,\nprivate _viewportRuler: ViewportRuler) {\n    this._origin = this._connectedTo.nativeElement;\n    this.withFallbackPosition(_originPos, _overlayPos);\n  }\n/**\n * Ordered list of preferred positions, from most to least desirable.\n * @return {?}\n */\nget positions() {\n    return this._preferredPositions;\n  }\n/**\n * To be used to for any cleanup after the element gets destroyed.\n * @return {?}\n */\ndispose() { }\n/**\n * Updates the position of the overlay element, using whichever preferred position relative\n * to the origin fits on-screen.\n * \\@docs-private \n * \n * @param {?} element Element to which to apply the CSS styles.\n * @return {?} Resolves when the styles have been applied.\n */\napply(element: HTMLElement): Promise<void> {\n    // Cache the overlay pane element in case re-calculating position is necessary\n    this._pane = element;\n\n    // We need the bounding rects for the origin and the overlay to determine how to position\n    // the overlay relative to the origin.\n    const /** @type {?} */ originRect = this._origin.getBoundingClientRect();\n    const /** @type {?} */ overlayRect = element.getBoundingClientRect();\n\n    // We use the viewport rect to determine whether a position would go off-screen.\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n\n    // Fallback point if none of the fallbacks fit into the viewport.\n    let /** @type {?} */ fallbackPoint: OverlayPoint = null;\n    let /** @type {?} */ fallbackPosition: ConnectionPositionPair = null;\n\n    // We want to place the overlay in the first of the preferred positions such that the\n    // overlay fits on-screen.\n    for (let /** @type {?} */ pos of this._preferredPositions) {\n      // Get the (x, y) point of connection on the origin, and then use that to get the\n      // (top, left) coordinate for the overlay at `pos`.\n      let /** @type {?} */ originPoint = this._getOriginConnectionPoint(originRect, pos);\n      let /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, pos);\n\n      // If the overlay in the calculated position fits on-screen, put it there and we're done.\n      if (overlayPoint.fitsInViewport) {\n        this._setElementPosition(element, overlayRect, overlayPoint, pos);\n\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastConnectedPosition = pos;\n\n        // Notify that the position has been changed along with its change properties.\n        const /** @type {?} */ scrollableViewProperties = this.getScrollableViewProperties(element);\n        const /** @type {?} */ positionChange = new ConnectedOverlayPositionChange(pos, scrollableViewProperties);\n        this._onPositionChange.next(positionChange);\n\n        return Promise.resolve(null);\n      } else if (!fallbackPoint || fallbackPoint.visibleArea < overlayPoint.visibleArea) {\n        fallbackPoint = overlayPoint;\n        fallbackPosition = pos;\n      }\n    }\n\n    // If none of the preferred positions were in the viewport, take the one\n    // with the largest visible area.\n    this._setElementPosition(element, overlayRect, fallbackPoint, fallbackPosition);\n\n    return Promise.resolve(null);\n  }\n/**\n * This re-aligns the overlay element with the trigger in its last calculated position,\n * even if a position higher in the \"preferred positions\" list would now fit. This\n * allows one to re-align the panel without changing the orientation of the panel.\n * @return {?}\n */\nrecalculateLastPosition(): void {\n    const /** @type {?} */ originRect = this._origin.getBoundingClientRect();\n    const /** @type {?} */ overlayRect = this._pane.getBoundingClientRect();\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ lastPosition = this._lastConnectedPosition || this._preferredPositions[0];\n\n    let /** @type {?} */ originPoint = this._getOriginConnectionPoint(originRect, lastPosition);\n    let /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, lastPosition);\n    this._setElementPosition(this._pane, overlayRect, overlayPoint, lastPosition);\n  }\n/**\n * Sets the list of Scrollable containers that host the origin element so that\n * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n * Scrollable must be an ancestor element of the strategy's origin element.\n * @param {?} scrollables\n * @return {?}\n */\nwithScrollableContainers(scrollables: Scrollable[]) {\n    this.scrollables = scrollables;\n  }\n/**\n * Adds a new preferred fallback position.\n * @param {?} originPos\n * @param {?} overlayPos\n * @return {?}\n */\nwithFallbackPosition(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): this {\n    this._preferredPositions.push(new ConnectionPositionPair(originPos, overlayPos));\n    return this;\n  }\n/**\n * Sets the layout direction so the overlay's position can be adjusted to match.\n * @param {?} dir New layout direction.\n * @return {?}\n */\nwithDirection(dir: 'ltr' | 'rtl'): this {\n    this._dir = dir;\n    return this;\n  }\n/**\n * Sets an offset for the overlay's connection point on the x-axis\n * @param {?} offset New offset in the X axis.\n * @return {?}\n */\nwithOffsetX(offset: number): this {\n    this._offsetX = offset;\n    return this;\n  }\n/**\n * Sets an offset for the overlay's connection point on the y-axis\n * @param {?} offset New offset in the Y axis.\n * @return {?}\n */\nwithOffsetY(offset: number): this {\n    this._offsetY = offset;\n    return this;\n  }\n/**\n * Gets the horizontal (x) \"start\" dimension based on whether the overlay is in an RTL context.\n * @param {?} rect\n * @return {?}\n */\nprivate _getStartX(rect: ClientRect): number {\n    return this._isRtl ? rect.right : rect.left;\n  }\n/**\n * Gets the horizontal (x) \"end\" dimension based on whether the overlay is in an RTL context.\n * @param {?} rect\n * @return {?}\n */\nprivate _getEndX(rect: ClientRect): number {\n    return this._isRtl ? rect.left : rect.right;\n  }\n/**\n * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n * @param {?} originRect\n * @param {?} pos\n * @return {?}\n */\nprivate _getOriginConnectionPoint(originRect: ClientRect, pos: ConnectionPositionPair): Point {\n    const /** @type {?} */ originStartX = this._getStartX(originRect);\n    const /** @type {?} */ originEndX = this._getEndX(originRect);\n\n    let /** @type {?} */ x: number;\n    if (pos.originX == 'center') {\n      x = originStartX + (originRect.width / 2);\n    } else {\n      x = pos.originX == 'start' ? originStartX : originEndX;\n    }\n\n    let /** @type {?} */ y: number;\n    if (pos.originY == 'center') {\n      y = originRect.top + (originRect.height / 2);\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n\n    return {x, y};\n  }\n/**\n * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n * origin point to which the overlay should be connected, as well as how much of the element\n * would be inside the viewport at that position.\n * @param {?} originPoint\n * @param {?} overlayRect\n * @param {?} viewportRect\n * @param {?} pos\n * @return {?}\n */\nprivate _getOverlayPoint(\n      originPoint: Point,\n      overlayRect: ClientRect,\n      viewportRect: ClientRect,\n      pos: ConnectionPositionPair): OverlayPoint {\n    // Calculate the (overlayStartX, overlayStartY), the start of the potential overlay position\n    // relative to the origin point.\n    let /** @type {?} */ overlayStartX: number;\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl ? 0 : -overlayRect.width;\n    }\n\n    let /** @type {?} */ overlayStartY: number;\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    }\n\n    // The (x, y) coordinates of the overlay.\n    let /** @type {?} */ x = originPoint.x + overlayStartX + this._offsetX;\n    let /** @type {?} */ y = originPoint.y + overlayStartY + this._offsetY;\n\n    // How much the overlay would overflow at this position, on each side.\n    let /** @type {?} */ leftOverflow = 0 - x;\n    let /** @type {?} */ rightOverflow = (x + overlayRect.width) - viewportRect.width;\n    let /** @type {?} */ topOverflow = 0 - y;\n    let /** @type {?} */ bottomOverflow = (y + overlayRect.height) - viewportRect.height;\n\n    // Visible parts of the element on each axis.\n    let /** @type {?} */ visibleWidth = this._subtractOverflows(overlayRect.width, leftOverflow, rightOverflow);\n    let /** @type {?} */ visibleHeight = this._subtractOverflows(overlayRect.height, topOverflow, bottomOverflow);\n\n    // The area of the element that's within the viewport.\n    let /** @type {?} */ visibleArea = visibleWidth * visibleHeight;\n    let /** @type {?} */ fitsInViewport = (overlayRect.width * overlayRect.height) === visibleArea;\n\n    return {x, y, fitsInViewport, visibleArea};\n  }\n/**\n * Gets the view properties of the trigger and overlay, including whether they are clipped\n * or completely outside the view of any of the strategy's scrollables.\n * @param {?} overlay\n * @return {?}\n */\nprivate getScrollableViewProperties(overlay: HTMLElement): ScrollableViewProperties {\n    const /** @type {?} */ originBounds = this._getElementBounds(this._origin);\n    const /** @type {?} */ overlayBounds = this._getElementBounds(overlay);\n    const /** @type {?} */ scrollContainerBounds = this.scrollables.map((scrollable: Scrollable) => {\n      return this._getElementBounds(scrollable.getElementRef().nativeElement);\n    });\n\n    return {\n      isOriginClipped: this.isElementClipped(originBounds, scrollContainerBounds),\n      isOriginOutsideView: this.isElementOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: this.isElementClipped(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: this.isElementOutsideView(overlayBounds, scrollContainerBounds),\n    };\n  }\n/**\n * Whether the element is completely out of the view of any of the containers.\n * @param {?} elementBounds\n * @param {?} containersBounds\n * @return {?}\n */\nprivate isElementOutsideView(\n      elementBounds: ElementBoundingPositions,\n      containersBounds: ElementBoundingPositions[]): boolean {\n    return containersBounds.some((containerBounds: ElementBoundingPositions) => {\n      const /** @type {?} */ outsideAbove = elementBounds.bottom < containerBounds.top;\n      const /** @type {?} */ outsideBelow = elementBounds.top > containerBounds.bottom;\n      const /** @type {?} */ outsideLeft = elementBounds.right < containerBounds.left;\n      const /** @type {?} */ outsideRight = elementBounds.left > containerBounds.right;\n\n      return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n  }\n/**\n * Whether the element is clipped by any of the containers.\n * @param {?} elementBounds\n * @param {?} containersBounds\n * @return {?}\n */\nprivate isElementClipped(\n      elementBounds: ElementBoundingPositions,\n      containersBounds: ElementBoundingPositions[]): boolean {\n    return containersBounds.some((containerBounds: ElementBoundingPositions) => {\n      const /** @type {?} */ clippedAbove = elementBounds.top < containerBounds.top;\n      const /** @type {?} */ clippedBelow = elementBounds.bottom > containerBounds.bottom;\n      const /** @type {?} */ clippedLeft = elementBounds.left < containerBounds.left;\n      const /** @type {?} */ clippedRight = elementBounds.right > containerBounds.right;\n\n      return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n  }\n/**\n * Physically positions the overlay element to the given coordinate.\n * @param {?} element\n * @param {?} overlayRect\n * @param {?} overlayPoint\n * @param {?} pos\n * @return {?}\n */\nprivate _setElementPosition(\n      element: HTMLElement,\n      overlayRect: ClientRect,\n      overlayPoint: Point,\n      pos: ConnectionPositionPair) {\n\n    // We want to set either `top` or `bottom` based on whether the overlay wants to appear above\n    // or below the origin and the direction in which the element will expand.\n    let /** @type {?} */ verticalStyleProperty = pos.overlayY === 'bottom' ? 'bottom' : 'top';\n\n    // When using `bottom`, we adjust the y position such that it is the distance\n    // from the bottom of the viewport rather than the top.\n    let /** @type {?} */ y = verticalStyleProperty === 'top' ?\n        overlayPoint.y :\n        document.documentElement.clientHeight - (overlayPoint.y + overlayRect.height);\n\n    // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n    let /** @type {?} */ horizontalStyleProperty: string;\n    if (this._dir === 'rtl') {\n      horizontalStyleProperty = pos.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = pos.overlayX === 'end' ? 'right' : 'left';\n    }\n\n    // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n    let /** @type {?} */ x = horizontalStyleProperty === 'left' ?\n      overlayPoint.x :\n      document.documentElement.clientWidth - (overlayPoint.x + overlayRect.width);\n\n\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n    ['top', 'bottom', 'left', 'right'].forEach(p => element.style[p] = null);\n\n    element.style[verticalStyleProperty] = `${y}px`;\n    element.style[horizontalStyleProperty] = `${x}px`;\n  }\n/**\n * Returns the bounding positions of the provided element with respect to the viewport.\n * @param {?} element\n * @return {?}\n */\nprivate _getElementBounds(element: HTMLElement): ElementBoundingPositions {\n    const /** @type {?} */ boundingClientRect = element.getBoundingClientRect();\n    return {\n      top: boundingClientRect.top,\n      right: boundingClientRect.left + boundingClientRect.width,\n      bottom: boundingClientRect.top + boundingClientRect.height,\n      left: boundingClientRect.left\n    };\n  }\n/**\n * Subtracts the amount that an element is overflowing on an axis from it's length.\n * @param {?} length\n * @param {...?} overflows\n * @return {?}\n */\nprivate _subtractOverflows(length: number, ...overflows: number[]): number {\n    return overflows.reduce((currentValue: number, currentOverflow: number) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n}\n\nfunction ConnectedPositionStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectedPositionStrategy.prototype._dir;\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n * @type {?}\n */\nConnectedPositionStrategy.prototype._offsetX;\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n * @type {?}\n */\nConnectedPositionStrategy.prototype._offsetY;\n/**\n * The Scrollable containers used to check scrollable view properties on position change.\n * @type {?}\n */\nConnectedPositionStrategy.prototype.scrollables;\n/**\n * Ordered list of preferred positions, from most to least desirable.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._preferredPositions;\n/**\n * The origin element against which the overlay will be positioned.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._origin;\n/**\n * The overlay pane element.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._pane;\n/**\n * The last position to have been calculated as the best fit position.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._lastConnectedPosition;\n/** @type {?} */\nConnectedPositionStrategy.prototype._onPositionChange;\n/** @type {?} */\nConnectedPositionStrategy.prototype._connectedTo;\n/** @type {?} */\nConnectedPositionStrategy.prototype._originPos;\n/** @type {?} */\nConnectedPositionStrategy.prototype._overlayPos;\n/** @type {?} */\nConnectedPositionStrategy.prototype._viewportRuler;\n}\n\n\n/** A simple (x, y) coordinate. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * Expands the simple (x, y) coordinate by adding info about whether the\n * element would fit inside the viewport at that position, as well as\n * how much of the element would be visible.\n */\ninterface OverlayPoint extends Point {\n  visibleArea?: number;\n  fitsInViewport?: boolean;\n}\n","/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\n\nimport {Optional} from '@angular/core';\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n\n/** A connection point on the origin element. */\nexport interface OriginConnectionPosition {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface OverlayConnectionPosition {\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n}\n/**\n * The points of the origin element and the overlay element to connect.\n */\nexport class ConnectionPositionPair {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n/**\n * @param {?} origin\n * @param {?} overlay\n */\nconstructor(origin: OriginConnectionPosition, overlay: OverlayConnectionPosition) {\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n}\n\nfunction ConnectionPositionPair_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectionPositionPair.prototype.originX;\n/** @type {?} */\nConnectionPositionPair.prototype.originY;\n/** @type {?} */\nConnectionPositionPair.prototype.overlayX;\n/** @type {?} */\nConnectionPositionPair.prototype.overlayY;\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n * \n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n * \n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n * \n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n */\nexport class ScrollableViewProperties {\n  isOriginClipped: boolean;\n  isOriginOutsideView: boolean;\n  isOverlayClipped: boolean;\n  isOverlayOutsideView: boolean;\n}\n\nfunction ScrollableViewProperties_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollableViewProperties.prototype.isOriginClipped;\n/** @type {?} */\nScrollableViewProperties.prototype.isOriginOutsideView;\n/** @type {?} */\nScrollableViewProperties.prototype.isOverlayClipped;\n/** @type {?} */\nScrollableViewProperties.prototype.isOverlayOutsideView;\n}\n\n/**\n * The change event emitted by the strategy when a fallback position is used.\n */\nexport class ConnectedOverlayPositionChange {\n/**\n * @param {?} connectionPair\n * @param {?} scrollableViewProperties\n */\nconstructor(public connectionPair: ConnectionPositionPair,\npublic scrollableViewProperties: ScrollableViewProperties) {}\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ConnectionPositionPair, },\n{type: ScrollableViewProperties, decorators: [{ type: Optional }, ]},\n];\n}\n\nfunction ConnectedOverlayPositionChange_tsickle_Closure_declarations() {\n/**\n * @nocollapse\n * @type {?}\n */\nConnectedOverlayPositionChange.ctorParameters;\n/** @type {?} */\nConnectedOverlayPositionChange.prototype.connectionPair;\n/** @type {?} */\nConnectedOverlayPositionChange.prototype.scrollableViewProperties;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgZone} from '@angular/core';\nimport {PortalHost, Portal} from '../portal/portal';\nimport {OverlayState} from './overlay-state';\nimport {ScrollStrategy} from './scroll/scroll-strategy';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements PortalHost {\nprivate _backdropElement: HTMLElement = null;\nprivate _backdropClick: Subject<any> = new Subject();\nprivate _attachments = new Subject<void>();\nprivate _detachments = new Subject<void>();\n/**\n * @param {?} _portalHost\n * @param {?} _pane\n * @param {?} _state\n * @param {?} _ngZone\n */\nconstructor(\nprivate _portalHost: PortalHost,\nprivate _pane: HTMLElement,\nprivate _state: OverlayState,\nprivate _ngZone: NgZone) {\n\n    this._state.scrollStrategy.attach(this);\n  }\n/**\n * The overlay's HTML element\n * @return {?}\n */\nget overlayElement(): HTMLElement {\n    return this._pane;\n  }\n/**\n * Attaches the overlay to a portal instance and adds the backdrop.\n * @param {?} portal Portal instance to which to attach the overlay.\n * @return {?} The portal attachment result.\n */\nattach(portal: Portal<any>): any {\n    let /** @type {?} */ attachResult = this._portalHost.attach(portal);\n\n    // Update the pane element with the given state configuration.\n    this._updateStackingOrder();\n    this.updateSize();\n    this.updateDirection();\n    this.updatePosition();\n    this._attachments.next();\n    this._state.scrollStrategy.enable();\n\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n\n    if (this._state.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    return attachResult;\n  }\n/**\n * Detaches an overlay from a portal.\n * @return {?} Resolves when the overlay has been detached.\n */\ndetach(): Promise<any> {\n    this.detachBackdrop();\n\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n    this._state.scrollStrategy.disable();\n    this._detachments.next();\n\n    return this._portalHost.detach();\n  }\n/**\n * Cleans up the overlay from the DOM.\n * @return {?}\n */\ndispose(): void {\n    if (this._state.positionStrategy) {\n      this._state.positionStrategy.dispose();\n    }\n\n    this.detachBackdrop();\n    this._portalHost.dispose();\n    this._state.scrollStrategy.disable();\n    this._detachments.next();\n    this._detachments.complete();\n    this._attachments.complete();\n  }\n/**\n * Checks whether the overlay has been attached.\n * @return {?}\n */\nhasAttached(): boolean {\n    return this._portalHost.hasAttached();\n  }\n/**\n * Returns an observable that emits when the backdrop has been clicked.\n * @return {?}\n */\nbackdropClick(): Observable<void> {\n    return this._backdropClick.asObservable();\n  }\n/**\n * Returns an observable that emits when the overlay has been attached.\n * @return {?}\n */\nattachments(): Observable<void> {\n    return this._attachments.asObservable();\n  }\n/**\n * Returns an observable that emits when the overlay has been detached.\n * @return {?}\n */\ndetachments(): Observable<void> {\n    return this._detachments.asObservable();\n  }\n/**\n * Gets the current state config of the overlay.\n * @return {?}\n */\ngetState(): OverlayState {\n    return this._state;\n  }\n/**\n * Updates the position of the overlay based on the position strategy.\n * @return {?}\n */\nupdatePosition() {\n    if (this._state.positionStrategy) {\n      this._state.positionStrategy.apply(this._pane);\n    }\n  }\n/**\n * Updates the text direction of the overlay panel.\n * @return {?}\n */\nprivate updateDirection() {\n    this._pane.setAttribute('dir', this._state.direction);\n  }\n/**\n * Updates the size of the overlay based on the overlay config.\n * @return {?}\n */\nupdateSize() {\n    if (this._state.width || this._state.width === 0) {\n      this._pane.style.width = formatCssUnit(this._state.width);\n    }\n\n    if (this._state.height || this._state.height === 0) {\n      this._pane.style.height = formatCssUnit(this._state.height);\n    }\n\n    if (this._state.minWidth || this._state.minWidth === 0) {\n      this._pane.style.minWidth = formatCssUnit(this._state.minWidth);\n    }\n\n    if (this._state.minHeight || this._state.minHeight === 0) {\n      this._pane.style.minHeight = formatCssUnit(this._state.minHeight);\n    }\n  }\n/**\n * Toggles the pointer events for the overlay pane element.\n * @param {?} enablePointer\n * @return {?}\n */\nprivate _togglePointerEvents(enablePointer: boolean) {\n    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n  }\n/**\n * Attaches a backdrop for this overlay.\n * @return {?}\n */\nprivate _attachBackdrop() {\n    this._backdropElement = document.createElement('div');\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n    this._backdropElement.classList.add(this._state.backdropClass);\n\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._pane.parentElement.insertBefore(this._backdropElement, this._pane);\n\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n    this._backdropElement.addEventListener('click', () => this._backdropClick.next(null));\n\n    // Add class to fade-in the backdrop after one frame.\n    requestAnimationFrame(() => {\n      if (this._backdropElement) {\n        this._backdropElement.classList.add('cdk-overlay-backdrop-showing');\n      }\n    });\n  }\n/**\n * Updates the stacking order of the element, moving it to the top if necessary.\n * This is required in cases where one overlay was detached, while another one,\n * that should be behind it, was destroyed. The next time both of them are opened,\n * the stacking will be wrong, because the detached element's pane will still be\n * in its original DOM position.\n * @return {?}\n */\nprivate _updateStackingOrder() {\n    if (this._pane.nextSibling) {\n      this._pane.parentNode.appendChild(this._pane);\n    }\n  }\n/**\n * Detaches the backdrop (if any) associated with the overlay.\n * @return {?}\n */\ndetachBackdrop(): void {\n    let /** @type {?} */ backdropToDetach = this._backdropElement;\n\n    if (backdropToDetach) {\n      let /** @type {?} */ finishDetach = () => {\n        // It may not be attached to anything in certain cases (e.g. unit tests).\n        if (backdropToDetach && backdropToDetach.parentNode) {\n          backdropToDetach.parentNode.removeChild(backdropToDetach);\n        }\n\n        // It is possible that a new portal has been attached to this overlay since we started\n        // removing the backdrop. If that is the case, only clear the backdrop reference if it\n        // is still the same instance that we started to remove.\n        if (this._backdropElement == backdropToDetach) {\n          this._backdropElement = null;\n        }\n      };\n\n      backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n      backdropToDetach.classList.remove(this._state.backdropClass);\n      backdropToDetach.addEventListener('transitionend', finishDetach);\n\n      // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n      // In this case we make it unclickable and we try to remove it after a delay.\n      backdropToDetach.style.pointerEvents = 'none';\n\n      // Run this outside the Angular zone because there's nothing that Angular cares about.\n      // If it were to run inside the Angular zone, every test that used Overlay would have to be\n      // either async or fakeAsync.\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(finishDetach, 500);\n      });\n    }\n  }\n}\n\nfunction OverlayRef_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayRef.prototype._backdropElement;\n/** @type {?} */\nOverlayRef.prototype._backdropClick;\n/** @type {?} */\nOverlayRef.prototype._attachments;\n/** @type {?} */\nOverlayRef.prototype._detachments;\n/** @type {?} */\nOverlayRef.prototype._portalHost;\n/** @type {?} */\nOverlayRef.prototype._pane;\n/** @type {?} */\nOverlayRef.prototype._state;\n/** @type {?} */\nOverlayRef.prototype._ngZone;\n}\n\n/**\n * @param {?} value\n * @return {?}\n */\nfunction formatCssUnit(value: number | string) {\n  return typeof value === 'string' ? /** @type {?} */(( value as string)) : `${value}px`;\n}\n","import {\n  ComponentFactoryResolver,\n  ComponentRef,\n  EmbeddedViewRef,\n  ApplicationRef,\n  Injector,\n} from '@angular/core';\nimport {BasePortalHost, ComponentPortal, TemplatePortal} from './portal';\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n * \n * This is the only part of the portal core that directly touches the DOM.\n */\nexport class DomPortalHost extends BasePortalHost {\n/**\n * @param {?} _hostDomElement\n * @param {?} _componentFactoryResolver\n * @param {?} _appRef\n * @param {?} _defaultInjector\n */\nconstructor(\nprivate _hostDomElement: Element,\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _appRef: ApplicationRef,\nprivate _defaultInjector: Injector) {\n    super();\n  }\n/**\n * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n * @template T\n * @param {?} portal Portal to be attached\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    let /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n    let /** @type {?} */ componentRef: ComponentRef<T>;\n\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the view to the application.\n    if (portal.viewContainerRef) {\n      componentRef = portal.viewContainerRef.createComponent(\n          componentFactory,\n          portal.viewContainerRef.length,\n          portal.injector || portal.viewContainerRef.parentInjector);\n\n      this.setDisposeFn(() => componentRef.destroy());\n    } else {\n      componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n      this._appRef.attachView(componentRef.hostView);\n      this.setDisposeFn(() => {\n        this._appRef.detachView(componentRef.hostView);\n        componentRef.destroy();\n      });\n    }\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n\n    return componentRef;\n  }\n/**\n * Attaches a template portal to the DOM as an embedded view.\n * @param {?} portal Portal to be attached.\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    let /** @type {?} */ viewContainer = portal.viewContainerRef;\n    let /** @type {?} */ viewRef = viewContainer.createEmbeddedView(portal.templateRef);\n    viewRef.detectChanges();\n\n    // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n    // But for the DomPortalHost the view can be added everywhere in the DOM (e.g Overlay Container)\n    // To move the view to the specified host element. We just re-append the existing root nodes.\n    viewRef.rootNodes.forEach(rootNode => this._hostDomElement.appendChild(rootNode));\n\n    this.setDisposeFn((() => {\n      let /** @type {?} */ index = viewContainer.indexOf(viewRef);\n      if (index !== -1) {\n        viewContainer.remove(index);\n      }\n    }));\n\n    // TODO(jelbourn): Return locals from view.\n    return new Map<string, any>();\n  }\n/**\n * Clears out a portal from the DOM.\n * @return {?}\n */\ndispose(): void {\n    super.dispose();\n    if (this._hostDomElement.parentNode != null) {\n      this._hostDomElement.parentNode.removeChild(this._hostDomElement);\n    }\n  }\n/**\n * Gets the root HTMLElement for an instantiated component.\n * @param {?} componentRef\n * @return {?}\n */\nprivate _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return /** @type {?} */(( ( /** @type {?} */((componentRef.hostView as EmbeddedViewRef<any>))).rootNodes[0] as HTMLElement));\n  }\n}\n\nfunction DomPortalHost_tsickle_Closure_declarations() {\n/** @type {?} */\nDomPortalHost.prototype._hostDomElement;\n/** @type {?} */\nDomPortalHost.prototype._componentFactoryResolver;\n/** @type {?} */\nDomPortalHost.prototype._appRef;\n/** @type {?} */\nDomPortalHost.prototype._defaultInjector;\n}\n\n","import {PositionStrategy} from './position/position-strategy';\nimport {LayoutDirection} from '../rtl/dir';\nimport {ScrollStrategy} from './scroll/scroll-strategy';\nimport {NoopScrollStrategy} from './scroll/noop-scroll-strategy';\n/**\n * OverlayState is a bag of values for either the initial configuration or current state of an\n * overlay.\n */\nexport class OverlayState {\n/**\n * Strategy with which to position the overlay.\n */\npositionStrategy: PositionStrategy;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n */\nscrollStrategy: ScrollStrategy = new NoopScrollStrategy();\n/**\n * Whether the overlay has a backdrop.\n */\nhasBackdrop: boolean = false;\n/**\n * Custom class to add to the backdrop\n */\nbackdropClass: string = 'cdk-overlay-dark-backdrop';\n/**\n * The width of the overlay panel. If a number is provided, pixel units are assumed.\n */\nwidth: number | string;\n/**\n * The height of the overlay panel. If a number is provided, pixel units are assumed.\n */\nheight: number | string;\n/**\n * The min-width of the overlay panel. If a number is provided, pixel units are assumed.\n */\nminWidth: number | string;\n/**\n * The min-height of the overlay panel. If a number is provided, pixel units are assumed.\n */\nminHeight: number | string;\n/**\n * The direction of the text in the overlay panel.\n */\ndirection: LayoutDirection = 'ltr';\n\n  // TODO(jelbourn): configuration still to add\n  // - focus trap\n  // - disable pointer events\n  // - z-index\n}\n\nfunction OverlayState_tsickle_Closure_declarations() {\n/**\n * Strategy with which to position the overlay.\n * @type {?}\n */\nOverlayState.prototype.positionStrategy;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n * @type {?}\n */\nOverlayState.prototype.scrollStrategy;\n/**\n * Whether the overlay has a backdrop.\n * @type {?}\n */\nOverlayState.prototype.hasBackdrop;\n/**\n * Custom class to add to the backdrop\n * @type {?}\n */\nOverlayState.prototype.backdropClass;\n/**\n * The width of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.width;\n/**\n * The height of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.height;\n/**\n * The min-width of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.minWidth;\n/**\n * The min-height of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayState.prototype.minHeight;\n/**\n * The direction of the text in the overlay panel.\n * @type {?}\n */\nOverlayState.prototype.direction;\n}\n\n","import {\n    NgModule,\n    ComponentRef,\n    Directive,\n    TemplateRef,\n    ComponentFactoryResolver,\n    ViewContainerRef,\n    OnDestroy,\n    Input,\n} from '@angular/core';\nimport {Portal, TemplatePortal, ComponentPortal, BasePortalHost} from './portal';\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n * \n * Usage:\n * <ng-template portal #greeting>\n *   <p> Hello {{name}} </p>\n * </ng-template>\n */\nexport class TemplatePortalDirective extends TemplatePortal {\n/**\n * @param {?} templateRef\n * @param {?} viewContainerRef\n */\nconstructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-portal], [cdkPortal], [portal]',\n  exportAs: 'cdkPortal',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n];\n}\n\nfunction TemplatePortalDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nTemplatePortalDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTemplatePortalDirective.ctorParameters;\n}\n\n/**\n * Directive version of a PortalHost. Because the directive *is* a PortalHost, portals can be\n * directly attached to it, enabling declarative use.\n * \n * Usage:\n * <ng-template [cdkPortalHost]=\"greeting\"></ng-template>\n */\nexport class PortalHostDirective extends BasePortalHost implements OnDestroy {\n/**\n * The attached portal.\n */\nprivate _portal: Portal<any>;\n/**\n * @param {?} _componentFactoryResolver\n * @param {?} _viewContainerRef\n */\nconstructor(\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedPortal() { return this.portal; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedPortal(v) { this.portal = v; }\n/**\n * Portal associated with the Portal host.\n * @return {?}\n */\nget portal(): Portal<any> {\n    return this._portal;\n  }\n/**\n * @param {?} portal\n * @return {?}\n */\nset portal(portal: Portal<any>) {\n    if (this.hasAttached()) {\n      super.detach();\n    }\n\n    if (portal) {\n      super.attach(portal);\n    }\n\n    this._portal = portal;\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    super.dispose();\n    this._portal = null;\n  }\n/**\n * Attach the given ComponentPortal to this PortalHost using the ComponentFactoryResolver.\n * \n * @template T\n * @param {?} portal Portal to be attached to the portal host.\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    portal.setAttachedHost(this);\n\n    // If the portal specifies an origin, use that as the logical location of the component\n    // in the application tree. Otherwise use the location of this PortalHost.\n    let /** @type {?} */ viewContainerRef = portal.viewContainerRef != null ?\n        portal.viewContainerRef :\n        this._viewContainerRef;\n\n    let /** @type {?} */ componentFactory =\n        this._componentFactoryResolver.resolveComponentFactory(portal.component);\n    let /** @type {?} */ ref = viewContainerRef.createComponent(\n        componentFactory, viewContainerRef.length,\n        portal.injector || viewContainerRef.parentInjector);\n\n    super.setDisposeFn(() => ref.destroy());\n    this._portal = portal;\n\n    return ref;\n  }\n/**\n * Attach the given TemplatePortal to this PortlHost as an embedded View.\n * @param {?} portal Portal to be attached.\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal): Map<string, any> {\n    portal.setAttachedHost(this);\n\n    this._viewContainerRef.createEmbeddedView(portal.templateRef);\n    super.setDisposeFn(() => this._viewContainerRef.clear());\n\n    this._portal = portal;\n\n    // TODO(jelbourn): return locals from view\n    return new Map<string, any>();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkPortalHost], [portalHost]',\n  inputs: ['portal: cdkPortalHost']\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ComponentFactoryResolver, },\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_deprecatedPortal': [{ type: Input, args: ['portalHost', ] },],\n};\n}\n\nfunction PortalHostDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPortalHostDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPortalHostDirective.ctorParameters;\n/** @type {?} */\nPortalHostDirective.propDecorators;\n/**\n * The attached portal.\n * @type {?}\n */\nPortalHostDirective.prototype._portal;\n/** @type {?} */\nPortalHostDirective.prototype._componentFactoryResolver;\n/** @type {?} */\nPortalHostDirective.prototype._viewContainerRef;\n}\n\nexport class PortalModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [TemplatePortalDirective, PortalHostDirective],\n  declarations: [TemplatePortalDirective, PortalHostDirective],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PortalModule_tsickle_Closure_declarations() {\n/** @type {?} */\nPortalModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPortalModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n    TemplateRef,\n    ViewContainerRef,\n    ElementRef,\n    ComponentRef,\n    Injector\n} from '@angular/core';\nimport {\n    throwNullPortalHostError,\n    throwPortalAlreadyAttachedError,\n    throwNoPortalAttachedError,\n    throwNullPortalError,\n    throwPortalHostAlreadyDisposedError,\n    throwUnknownPortalTypeError\n} from './portal-errors';\nimport {ComponentType} from '../overlay/generic-component-type';\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalHost`.\n * @abstract\n */\nexport abstract class Portal<T> {\nprivate _attachedHost: PortalHost;\n/**\n * Attach this portal to a host.\n * @param {?} host\n * @return {?}\n */\nattach(host: PortalHost): T {\n    if (host == null) {\n      throwNullPortalHostError();\n    }\n\n    if (host.hasAttached()) {\n      throwPortalAlreadyAttachedError();\n    }\n\n    this._attachedHost = host;\n    return /** @type {?} */(( <T> host.attach(this)));\n  }\n/**\n * Detach this portal from its host\n * @return {?}\n */\ndetach(): void {\n    let /** @type {?} */ host = this._attachedHost;\n    if (host == null) {\n      throwNoPortalAttachedError();\n    }\n\n    this._attachedHost = null;\n    return host.detach();\n  }\n/**\n * Whether this portal is attached to a host.\n * @return {?}\n */\nget isAttached(): boolean {\n    return this._attachedHost != null;\n  }\n/**\n * Sets the PortalHost reference without performing `attach()`. This is used directly by\n * the PortalHost when it is performing an `attach()` or `detach()`.\n * @param {?} host\n * @return {?}\n */\nsetAttachedHost(host: PortalHost) {\n    this._attachedHost = host;\n  }\n}\n\nfunction Portal_tsickle_Closure_declarations() {\n/** @type {?} */\nPortal.prototype._attachedHost;\n}\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> extends Portal<ComponentRef<T>> {\n/**\n * The type of the component that will be instantiated for attachment.\n */\ncomponent: ComponentType<T>;\n/**\n * [Optional] Where the attached component should live in Angular's *logical* component tree.\n * This is different from where the component *renders*, which is determined by the PortalHost.\n * The origin is necessary when the host is outside of the Angular application context.\n */\nviewContainerRef: ViewContainerRef;\n/**\n * [Optional] Injector used for the instantiation of the component.\n */\ninjector: Injector;\n/**\n * @param {?} component\n * @param {?=} viewContainerRef\n * @param {?=} injector\n */\nconstructor(\n      component: ComponentType<T>,\n      viewContainerRef: ViewContainerRef = null,\n      injector: Injector = null) {\n    super();\n    this.component = component;\n    this.viewContainerRef = viewContainerRef;\n    this.injector = injector;\n  }\n}\n\nfunction ComponentPortal_tsickle_Closure_declarations() {\n/**\n * The type of the component that will be instantiated for attachment.\n * @type {?}\n */\nComponentPortal.prototype.component;\n/**\n * [Optional] Where the attached component should live in Angular's *logical* component tree.\n * This is different from where the component *renders*, which is determined by the PortalHost.\n * The origin is necessary when the host is outside of the Angular application context.\n * @type {?}\n */\nComponentPortal.prototype.viewContainerRef;\n/**\n * [Optional] Injector used for the instantiation of the component.\n * @type {?}\n */\nComponentPortal.prototype.injector;\n}\n\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nexport class TemplatePortal extends Portal<Map<string, any>> {\n/**\n * The embedded template that will be used to instantiate an embedded View in the host.\n */\ntemplateRef: TemplateRef<any>;\n/**\n * Reference to the ViewContainer into which the template will be stamped out.\n */\nviewContainerRef: ViewContainerRef;\n/**\n * Additional locals for the instantiated embedded view.\n * These locals can be seen as \"exports\" for the template, such as how ngFor has\n * index / event / odd.\n * See https://angular.io/docs/ts/latest/api/core/EmbeddedViewRef-class.html\n */\nlocals: Map<string, any> = new Map<string, any>();\n/**\n * @param {?} template\n * @param {?} viewContainerRef\n */\nconstructor(template: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super();\n    this.templateRef = template;\n    this.viewContainerRef = viewContainerRef;\n  }\n/**\n * @return {?}\n */\nget origin(): ElementRef {\n    return this.templateRef.elementRef;\n  }\n/**\n * @param {?} host\n * @param {?=} locals\n * @return {?}\n */\nattach(host: PortalHost, locals?: Map<string, any>): Map<string, any> {\n    this.locals = locals == null ? new Map<string, any>() : locals;\n    return super.attach(host);\n  }\n/**\n * @return {?}\n */\ndetach(): void {\n    this.locals = new Map<string, any>();\n    return super.detach();\n  }\n}\n\nfunction TemplatePortal_tsickle_Closure_declarations() {\n/**\n * The embedded template that will be used to instantiate an embedded View in the host.\n * @type {?}\n */\nTemplatePortal.prototype.templateRef;\n/**\n * Reference to the ViewContainer into which the template will be stamped out.\n * @type {?}\n */\nTemplatePortal.prototype.viewContainerRef;\n/**\n * Additional locals for the instantiated embedded view.\n * These locals can be seen as \"exports\" for the template, such as how ngFor has\n * index / event / odd.\n * See https://angular.io/docs/ts/latest/api/core/EmbeddedViewRef-class.html\n * @type {?}\n */\nTemplatePortal.prototype.locals;\n}\n\n\n\n/**\n * A `PortalHost` is an space that can contain a single `Portal`.\n */\nexport interface PortalHost {\n  attach(portal: Portal<any>): any;\n\n  detach(): any;\n\n  dispose(): void;\n\n  hasAttached(): boolean;\n}\n/**\n * Partial implementation of PortalHost that only deals with attaching either a\n * ComponentPortal or a TemplatePortal.\n * @abstract\n */\nexport abstract class BasePortalHost implements PortalHost {\n/**\n * The portal currently attached to the host.\n */\nprivate _attachedPortal: Portal<any>;\n/**\n * A function that will permanently dispose this host.\n */\nprivate _disposeFn: () => void;\n/**\n * Whether this host has already been permanently disposed.\n */\nprivate _isDisposed: boolean = false;\n/**\n * Whether this host has an attached portal.\n * @return {?}\n */\nhasAttached(): boolean {\n    return !!this._attachedPortal;\n  }\n/**\n * @param {?} portal\n * @return {?}\n */\nattach(portal: Portal<any>): any {\n    if (!portal) {\n      throwNullPortalError();\n    }\n\n    if (this.hasAttached()) {\n      throwPortalAlreadyAttachedError();\n    }\n\n    if (this._isDisposed) {\n      throwPortalHostAlreadyDisposedError();\n    }\n\n    if (portal instanceof ComponentPortal) {\n      this._attachedPortal = portal;\n      return this.attachComponentPortal(portal);\n    } else if (portal instanceof TemplatePortal) {\n      this._attachedPortal = portal;\n      return this.attachTemplatePortal(portal);\n    }\n\n    throwUnknownPortalTypeError();\n  }\n/**\n * @abstract\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>) {}\n/**\n * @abstract\n * @param {?} portal\n * @return {?}\n */\nattachTemplatePortal(portal: TemplatePortal) {}\n/**\n * @return {?}\n */\ndetach(): void {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost(null);\n      this._attachedPortal = null;\n    }\n\n    this._invokeDisposeFn();\n  }\n/**\n * @return {?}\n */\ndispose() {\n    if (this.hasAttached()) {\n      this.detach();\n    }\n\n    this._invokeDisposeFn();\n    this._isDisposed = true;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nsetDisposeFn(fn: () => void) {\n    this._disposeFn = fn;\n  }\n/**\n * @return {?}\n */\nprivate _invokeDisposeFn() {\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = null;\n    }\n  }\n}\n\nfunction BasePortalHost_tsickle_Closure_declarations() {\n/**\n * The portal currently attached to the host.\n * @type {?}\n */\nBasePortalHost.prototype._attachedPortal;\n/**\n * A function that will permanently dispose this host.\n * @type {?}\n */\nBasePortalHost.prototype._disposeFn;\n/**\n * Whether this host has already been permanently disposed.\n * @type {?}\n */\nBasePortalHost.prototype._isDisposed;\n}\n\n","\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * \\@docs-private\n * @return {?}\n */\nexport function throwNullPortalError() {\n  throw new Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * \\@docs-private\n * @return {?}\n */\nexport function throwPortalAlreadyAttachedError() {\n  throw new Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * \\@docs-private\n * @return {?}\n */\nexport function throwPortalHostAlreadyDisposedError() {\n  throw new Error('This PortalHost has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * \\@docs-private\n * @return {?}\n */\nexport function throwUnknownPortalTypeError() {\n  throw new Error('Attempting to attach an unknown Portal type. BasePortalHost accepts either' +\n                  'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * \\@docs-private\n * @return {?}\n */\nexport function throwNullPortalHostError() {\n  throw new Error('Attempting to attach a portal to a null PortalHost');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * \\@docs-privatew\n * @return {?}\n */\nexport function throwNoPortalAttachedError() {\n  throw new Error('Attempting to detach a portal that is not attached to a host');\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  NgModule,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ENTER, SPACE} from '../keyboard/keycodes';\nimport {coerceBooleanProperty} from '../coercion/boolean-property';\nimport {MdRippleModule} from '../ripple/index';\nimport {MdSelectionModule} from '../selection/index';\nimport {MATERIAL_COMPATIBILITY_MODE} from '../../core/compatibility/compatibility';\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n/**\n * Event object emitted by MdOption when selected or deselected.\n */\nexport class MdOptionSelectionChange {\n/**\n * @param {?} source\n * @param {?=} isUserInput\n */\nconstructor(public source: MdOption,\npublic isUserInput = false) { }\n}\n\nfunction MdOptionSelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionSelectionChange.prototype.source;\n/** @type {?} */\nMdOptionSelectionChange.prototype.isUserInput;\n}\n\n/**\n * Single option inside of a `<md-select>` element.\n */\nexport class MdOption {\nprivate _selected: boolean = false;\nprivate _active: boolean = false;\n/**\n * Whether the option is disabled.\n */\nprivate _disabled: boolean = false;\nprivate _id: string = `md-option-${_uniqueIdCounter++}`;\n/**\n * Whether the wrapping component is in multiple selection mode.\n */\nmultiple: boolean = false;\n/**\n * The unique ID of the option.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * Whether or not the option is currently selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * The form value of the option.\n */\nvalue: any;\n/**\n * Whether the option is disabled.\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Event emitted when the option is selected or deselected.\n */\nonSelectionChange = new EventEmitter<MdOptionSelectionChange>();\n/**\n * @param {?} _element\n * @param {?} _isCompatibilityMode\n */\nconstructor(\nprivate _element: ElementRef,\npublic _isCompatibilityMode: boolean) {}\n/**\n * Whether or not the option is currently active and ready to be selected.\n * An active option displays styles as if it is focused, but the\n * focus is actually retained somewhere else. This comes in handy\n * for components like autocomplete where focus must remain on the input.\n * @return {?}\n */\nget active(): boolean {\n    return this._active;\n  }\n/**\n * The displayed value of the option. It is necessary to show the selected option in the\n * select's trigger.\n * @return {?}\n */\nget viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return this._getHostElement().textContent.trim();\n  }\n/**\n * Selects the option.\n * @return {?}\n */\nselect(): void {\n    this._selected = true;\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Deselects the option.\n * @return {?}\n */\ndeselect(): void {\n    this._selected = false;\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Sets focus onto this option.\n * @return {?}\n */\nfocus(): void {\n    this._getHostElement().focus();\n  }\n/**\n * This method sets display styles on the option to make it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetActiveStyles(): void {\n    this._active = true;\n  }\n/**\n * This method removes display styles on the option that made it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetInactiveStyles(): void {\n    this._active = false;\n  }\n/**\n * Ensures the option is selected when activated from the keyboard.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n    }\n  }\n/**\n * Selects the option while indicating the selection came from the user. Used to\n * determine if the select's view -> model callback should be invoked.\n * @return {?}\n */\n_selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n/**\n * Returns the correct tabindex for the option depending on disabled state.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n/**\n * Fetches the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n/**\n * Emits the selection change event.\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MdOptionSelectionChange(this, isUserInput));\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-option, mat-option',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    '[class.mat-option]': 'true',\n  },\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'onSelectionChange': [{ type: Output },],\n};\n}\n\nfunction MdOption_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOption.ctorParameters;\n/** @type {?} */\nMdOption.propDecorators;\n/** @type {?} */\nMdOption.prototype._selected;\n/** @type {?} */\nMdOption.prototype._active;\n/**\n * Whether the option is disabled.\n * @type {?}\n */\nMdOption.prototype._disabled;\n/** @type {?} */\nMdOption.prototype._id;\n/**\n * Whether the wrapping component is in multiple selection mode.\n * @type {?}\n */\nMdOption.prototype.multiple;\n/**\n * The form value of the option.\n * @type {?}\n */\nMdOption.prototype.value;\n/**\n * Event emitted when the option is selected or deselected.\n * @type {?}\n */\nMdOption.prototype.onSelectionChange;\n/** @type {?} */\nMdOption.prototype._element;\n/** @type {?} */\nMdOption.prototype._isCompatibilityMode;\n}\n\nexport class MdOptionModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdRippleModule, CommonModule, MdSelectionModule],\n  exports: [MdOption],\n  declarations: [MdOption]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdOptionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptionModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\nexport class MdSelectionModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [MdPseudoCheckbox],\n  declarations: [MdPseudoCheckbox]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectionModule.ctorParameters;\n}\n\n\n\nexport {MdPseudoCheckboxState,MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ElementRef,\n  Renderer2,\n} from '@angular/core';\n\nexport type MdPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * \n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <md-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * \\@docs-private\n */\nexport class MdPseudoCheckbox {\n/**\n * Display state of the checkbox.\n */\nstate: MdPseudoCheckboxState = 'unchecked';\n/**\n * Whether the checkbox is disabled.\n */\ndisabled: boolean = false;\n/**\n * Color of the checkbox.\n * @return {?}\n */\nget color(): string { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: string) {\n    if (value) {\n      let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n\n      this._renderer.removeClass(nativeElement, `mat-${this.color}`);\n      this._renderer.addClass(nativeElement, `mat-${value}`);\n      this._color = value;\n    }\n  }\nprivate _color: string;\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n */\nconstructor(private _elementRef: ElementRef,\nprivate _renderer: Renderer2) {\n    this.color = 'accent';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  selector: 'md-pseudo-checkbox, mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    '[class.mat-pseudo-checkbox]': 'true',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'state': [{ type: Input },],\n'disabled': [{ type: Input },],\n'color': [{ type: Input },],\n};\n}\n\nfunction MdPseudoCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPseudoCheckbox.ctorParameters;\n/** @type {?} */\nMdPseudoCheckbox.propDecorators;\n/**\n * Display state of the checkbox.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.state;\n/**\n * Whether the checkbox is disabled.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.disabled;\n/** @type {?} */\nMdPseudoCheckbox.prototype._color;\n/** @type {?} */\nMdPseudoCheckbox.prototype._elementRef;\n/** @type {?} */\nMdPseudoCheckbox.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {MdRipple} from './ripple';\nimport {MdCommonModule} from '../common-behaviors/common-module';\nimport {VIEWPORT_RULER_PROVIDER} from '../overlay/position/viewport-ruler';\nimport {ScrollDispatchModule} from '../overlay/scroll/index';\nimport {PlatformModule} from '../platform/index';\n\nexport {MdRipple, RippleGlobalOptions, MD_RIPPLE_GLOBAL_OPTIONS} from './ripple';\nexport {RippleRef, RippleState} from './ripple-ref';\nexport {RippleConfig, RIPPLE_FADE_IN_DURATION, RIPPLE_FADE_OUT_DURATION} from './ripple-renderer';\nexport class MdRippleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule, PlatformModule, ScrollDispatchModule],\n  exports: [MdRipple, MdCommonModule],\n  declarations: [MdRipple],\n  providers: [VIEWPORT_RULER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRippleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRippleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRippleModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {SCROLL_DISPATCHER_PROVIDER} from './scroll-dispatcher';\nimport {Scrollable} from './scrollable';\nimport {PlatformModule} from '../../platform/index';\n\nexport {Scrollable} from './scrollable';\nexport {ScrollDispatcher} from './scroll-dispatcher';\n\n// Export pre-defined scroll strategies and interface to build custom ones.\nexport {ScrollStrategy} from './scroll-strategy';\nexport {RepositionScrollStrategy} from './reposition-scroll-strategy';\nexport {CloseScrollStrategy} from './close-scroll-strategy';\nexport {NoopScrollStrategy} from './noop-scroll-strategy';\nexport {BlockScrollStrategy} from './block-scroll-strategy';\nexport class ScrollDispatchModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [PlatformModule],\n  exports: [Scrollable],\n  declarations: [Scrollable],\n  providers: [SCROLL_DISPATCHER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ScrollDispatchModule_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollDispatchModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollDispatchModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {ScrollStrategy} from './scroll-strategy';\nimport {ViewportRuler} from '../position/viewport-ruler';\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nexport class BlockScrollStrategy implements ScrollStrategy {\nprivate _previousHTMLStyles = { top: null, left: null };\nprivate _previousScrollPosition: { top: number, left: number };\nprivate _isEnabled = false;\n/**\n * @param {?} _viewportRuler\n */\nconstructor(private _viewportRuler: ViewportRuler) { }\n/**\n * @return {?}\n */\nattach() { }\n/**\n * @return {?}\n */\nenable() {\n    if (this._canBeEnabled()) {\n      const /** @type {?} */ root = document.documentElement;\n\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      // Cache the previous inline styles in case the user had set them.\n      this._previousHTMLStyles.left = root.style.left;\n      this._previousHTMLStyles.top = root.style.top;\n\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n      root.style.left = `${-this._previousScrollPosition.left}px`;\n      root.style.top = `${-this._previousScrollPosition.top}px`;\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n/**\n * @return {?}\n */\ndisable() {\n    if (this._isEnabled) {\n      this._isEnabled = false;\n      document.documentElement.style.left = this._previousHTMLStyles.left;\n      document.documentElement.style.top = this._previousHTMLStyles.top;\n      document.documentElement.classList.remove('cdk-global-scrollblock');\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _canBeEnabled(): boolean {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    if (document.documentElement.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const /** @type {?} */ body = document.body;\n    const /** @type {?} */ viewport = this._viewportRuler.getViewportRect();\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n}\n\nfunction BlockScrollStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nBlockScrollStrategy.prototype._previousHTMLStyles;\n/** @type {?} */\nBlockScrollStrategy.prototype._previousScrollPosition;\n/** @type {?} */\nBlockScrollStrategy.prototype._isEnabled;\n/** @type {?} */\nBlockScrollStrategy.prototype._viewportRuler;\n}\n\n","import {ScrollStrategy} from './scroll-strategy';\n/**\n * Scroll strategy that doesn't do anything.\n */\nexport class NoopScrollStrategy implements ScrollStrategy {\n/**\n * @return {?}\n */\nenable() { }\n/**\n * @return {?}\n */\ndisable() { }\n/**\n * @return {?}\n */\nattach() { }\n}\n","import {ScrollStrategy} from './scroll-strategy';\nimport {OverlayRef} from '../overlay-ref';\nimport {Subscription} from 'rxjs/Subscription';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nexport class CloseScrollStrategy implements ScrollStrategy {\nprivate _scrollSubscription: Subscription|null = null;\nprivate _overlayRef: OverlayRef;\n/**\n * @param {?} _scrollDispatcher\n */\nconstructor(private _scrollDispatcher: ScrollDispatcher) { }\n/**\n * @param {?} overlayRef\n * @return {?}\n */\nattach(overlayRef: OverlayRef) {\n    this._overlayRef = overlayRef;\n  }\n/**\n * @return {?}\n */\nenable() {\n    if (!this._scrollSubscription) {\n      this._scrollSubscription = this._scrollDispatcher.scrolled(null, () => {\n        if (this._overlayRef.hasAttached()) {\n          this._overlayRef.detach();\n        }\n\n        this.disable();\n      });\n    }\n  }\n/**\n * @return {?}\n */\ndisable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n}\n\nfunction CloseScrollStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nCloseScrollStrategy.prototype._scrollSubscription;\n/** @type {?} */\nCloseScrollStrategy.prototype._overlayRef;\n/** @type {?} */\nCloseScrollStrategy.prototype._scrollDispatcher;\n}\n\n","import {Subscription} from 'rxjs/Subscription';\nimport {ScrollStrategy} from './scroll-strategy';\nimport {OverlayRef} from '../overlay-ref';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements ScrollStrategy {\nprivate _scrollSubscription: Subscription|null = null;\nprivate _overlayRef: OverlayRef;\n/**\n * @param {?} _scrollDispatcher\n * @param {?=} _scrollThrottle\n */\nconstructor(private _scrollDispatcher: ScrollDispatcher,\nprivate _scrollThrottle = 0) { }\n/**\n * @param {?} overlayRef\n * @return {?}\n */\nattach(overlayRef: OverlayRef) {\n    this._overlayRef = overlayRef;\n  }\n/**\n * @return {?}\n */\nenable() {\n    if (!this._scrollSubscription) {\n      this._scrollSubscription = this._scrollDispatcher.scrolled(this._scrollThrottle, () => {\n        this._overlayRef.updatePosition();\n      });\n    }\n  }\n/**\n * @return {?}\n */\ndisable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n}\n\nfunction RepositionScrollStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nRepositionScrollStrategy.prototype._scrollSubscription;\n/** @type {?} */\nRepositionScrollStrategy.prototype._overlayRef;\n/** @type {?} */\nRepositionScrollStrategy.prototype._scrollDispatcher;\n/** @type {?} */\nRepositionScrollStrategy.prototype._scrollThrottle;\n}\n\n","import {Directive, ElementRef, OnInit, OnDestroy, NgZone, Renderer2} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {ScrollDispatcher} from './scroll-dispatcher';\nimport'rxjs/add/observable/fromEvent';\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nexport class Scrollable implements OnInit, OnDestroy {\nprivate _elementScrolled: Subject<Event> = new Subject();\nprivate _scrollListener: Function;\n/**\n * @param {?} _elementRef\n * @param {?} _scroll\n * @param {?} _ngZone\n * @param {?} _renderer\n */\nconstructor(private _elementRef: ElementRef,\nprivate _scroll: ScrollDispatcher,\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2) {}\n/**\n * @return {?}\n */\nngOnInit() {\n    this._scrollListener = this._ngZone.runOutsideAngular(() => {\n      return this._renderer.listen(this.getElementRef().nativeElement, 'scroll', (event: Event) => {\n        this._elementScrolled.next(event);\n      });\n    });\n\n    this._scroll.register(this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._scroll.deregister(this);\n\n    if (this._scrollListener) {\n      this._scrollListener();\n      this._scrollListener = null;\n    }\n  }\n/**\n * Returns observable that emits when a scroll event is fired on the host element.\n * @return {?}\n */\nelementScrolled(): Observable<any> {\n    return this._elementScrolled.asObservable();\n  }\n/**\n * @return {?}\n */\ngetElementRef(): ElementRef {\n    return this._elementRef;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-scrollable], [cdkScrollable]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ScrollDispatcher, },\n{type: NgZone, },\n{type: Renderer2, },\n];\n}\n\nfunction Scrollable_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollable.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollable.ctorParameters;\n/** @type {?} */\nScrollable.prototype._elementScrolled;\n/** @type {?} */\nScrollable.prototype._scrollListener;\n/** @type {?} */\nScrollable.prototype._elementRef;\n/** @type {?} */\nScrollable.prototype._scroll;\n/** @type {?} */\nScrollable.prototype._ngZone;\n/** @type {?} */\nScrollable.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Directive,\n  ElementRef,\n  Input,\n  Inject,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  InjectionToken,\n  Optional,\n} from '@angular/core';\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nimport {RippleRef} from './ripple-ref';\nimport {ViewportRuler} from '../overlay/position/viewport-ruler';\nimport {Platform} from '../platform/platform';\n\nexport interface RippleGlobalOptions {\n  disabled?: boolean;\n  baseSpeedFactor?: number;\n}\n/**\n * Injection token that can be used to specify the global ripple options.\n */\nexport const MD_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('md-ripple-global-options');\nexport class MdRipple implements OnChanges, OnDestroy {\n\n  /**\n   * The element that triggers the ripple when click events are received. Defaults to the\n   * directive's host element.\n   */\n  // Prevent TS metadata emit from referencing HTMLElement in ripple.js\n  // Otherwise running this code in a Node environment (e.g Universal) will not work.\n   trigger: HTMLElement|HTMLElement;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n */\ncentered: boolean;\n/**\n * Whether click events will not trigger the ripple. It can still be triggered by manually\n * calling createRipple()\n */\ndisabled: boolean;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n */\nradius: number = 0;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n */\nspeedFactor: number = 1;\n/**\n * Custom color for ripples.\n */\ncolor: string;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n */\nunbounded: boolean;\n/**\n * Renderer for the ripple DOM manipulations.\n */\nprivate _rippleRenderer: RippleRenderer;\n/**\n * Options that are set globally for all ripples.\n */\nprivate _globalOptions: RippleGlobalOptions;\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} platform\n * @param {?} globalOptions\n */\nconstructor(\n    elementRef: ElementRef,\n    ngZone: NgZone,\n    ruler: ViewportRuler,\n    platform: Platform,\n      globalOptions: RippleGlobalOptions\n  ) {\n    this._rippleRenderer = new RippleRenderer(elementRef, ngZone, ruler, platform);\n    this._globalOptions = globalOptions ? globalOptions : {};\n\n    this._updateRippleRenderer();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (changes['trigger'] && this.trigger) {\n      this._rippleRenderer.setTriggerElement(this.trigger);\n    }\n\n    this._updateRippleRenderer();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // Set the trigger element to null to cleanup all listeners.\n    this._rippleRenderer.setTriggerElement(null);\n  }\n/**\n * Launches a manual ripple at the specified position.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nlaunch(pageX: number, pageY: number, config = this.rippleConfig): RippleRef {\n    return this._rippleRenderer.fadeInRipple(pageX, pageY, config);\n  }\n/**\n * Fades out all currently showing ripple elements.\n * @return {?}\n */\nfadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n/**\n * Ripple configuration from the directive's input values.\n * @return {?}\n */\nget rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n      radius: this.radius,\n      color: this.color\n    };\n  }\n/**\n * Updates the ripple renderer with the latest ripple configuration.\n * @return {?}\n */\nprivate _updateRippleRenderer() {\n    this._rippleRenderer.rippleDisabled = this._globalOptions.disabled || this.disabled;\n    this._rippleRenderer.rippleConfig = this.rippleConfig;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-ripple], [mat-ripple], [mdRipple], [matRipple]',\n  exportAs: 'mdRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: Input, args: ['mdRippleTrigger', ] },],\n'centered': [{ type: Input, args: ['mdRippleCentered', ] },],\n'disabled': [{ type: Input, args: ['mdRippleDisabled', ] },],\n'radius': [{ type: Input, args: ['mdRippleRadius', ] },],\n'speedFactor': [{ type: Input, args: ['mdRippleSpeedFactor', ] },],\n'color': [{ type: Input, args: ['mdRippleColor', ] },],\n'unbounded': [{ type: Input, args: ['mdRippleUnbounded', ] },],\n};\n}\n\nfunction MdRipple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRipple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRipple.ctorParameters;\n/** @type {?} */\nMdRipple.propDecorators;\n/** @type {?} */\nMdRipple.prototype.trigger;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n * @type {?}\n */\nMdRipple.prototype.centered;\n/**\n * Whether click events will not trigger the ripple. It can still be triggered by manually\n * calling createRipple()\n * @type {?}\n */\nMdRipple.prototype.disabled;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n * @type {?}\n */\nMdRipple.prototype.radius;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n * @type {?}\n */\nMdRipple.prototype.speedFactor;\n/**\n * Custom color for ripples.\n * @type {?}\n */\nMdRipple.prototype.color;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n * @type {?}\n */\nMdRipple.prototype.unbounded;\n/**\n * Renderer for the ripple DOM manipulations.\n * @type {?}\n */\nMdRipple.prototype._rippleRenderer;\n/**\n * Options that are set globally for all ripples.\n * @type {?}\n */\nMdRipple.prototype._globalOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {ScrollDispatcher} from '../scroll/scroll-dispatcher';\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\nexport class ViewportRuler {\n/**\n * Cached document client rectangle.\n */\nprivate _documentRect?: ClientRect;\n/**\n * @param {?} scrollDispatcher\n */\nconstructor(scrollDispatcher: ScrollDispatcher) {\n    // Subscribe to scroll and resize events and update the document rectangle on changes.\n    scrollDispatcher.scrolled(null, () => this._cacheViewportGeometry());\n  }\n/**\n * Gets a ClientRect for the viewport's bounds.\n * @param {?=} documentRect\n * @return {?}\n */\ngetViewportRect(documentRect = this._documentRect): ClientRect {\n    // Cache the document bounding rect so that we don't recompute it for multiple calls.\n    if (!documentRect) {\n      this._cacheViewportGeometry();\n      documentRect = this._documentRect;\n    }\n\n    // Use the document element's bounding rect rather than the window scroll properties\n    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n    // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n    // can disagree when the page is pinch-zoomed (on devices that support touch).\n    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n    // We use the documentElement instead of the body because, by default (without a css reset)\n    // browsers typically give the document body an 8px margin, which is not included in\n    // getBoundingClientRect().\n    const /** @type {?} */ scrollPosition = this.getViewportScrollPosition(documentRect);\n    const /** @type {?} */ height = window.innerHeight;\n    const /** @type {?} */ width = window.innerWidth;\n\n    return {\n      top: scrollPosition.top,\n      left: scrollPosition.left,\n      bottom: scrollPosition.top + height,\n      right: scrollPosition.left + width,\n      height,\n      width,\n    };\n  }\n/**\n * Gets the (top, left) scroll position of the viewport.\n * @param {?=} documentRect\n * @return {?}\n */\ngetViewportScrollPosition(documentRect = this._documentRect) {\n    // Cache the document bounding rect so that we don't recompute it for multiple calls.\n    if (!documentRect) {\n      this._cacheViewportGeometry();\n      documentRect = this._documentRect;\n    }\n\n    // The top-left-corner of the viewport is determined by the scroll position of the document\n    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n    // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n    // `document.documentElement` works consistently, where the `top` and `left` values will\n    // equal negative the scroll position.\n    const /** @type {?} */ top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n                  document.documentElement.scrollTop || 0;\n\n    const /** @type {?} */ left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n                  document.documentElement.scrollLeft || 0;\n\n    return {top, left};\n  }\n/**\n * Caches the latest client rectangle of the document element.\n * @return {?}\n */\n_cacheViewportGeometry?() {\n    this._documentRect = document.documentElement.getBoundingClientRect();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollDispatcher, },\n];\n}\n\nfunction ViewportRuler_tsickle_Closure_declarations() {\n/** @type {?} */\nViewportRuler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nViewportRuler.ctorParameters;\n/**\n * Cached document client rectangle.\n * @type {?}\n */\nViewportRuler.prototype._documentRect;\n}\n\n/**\n * @param {?} parentRuler\n * @param {?} scrollDispatcher\n * @return {?}\n */\nexport function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler: ViewportRuler,\n                                                scrollDispatcher: ScrollDispatcher) {\n  return parentRuler || new ViewportRuler(scrollDispatcher);\n}\n\nexport const /** @type {?} */ VIEWPORT_RULER_PROVIDER = {\n  // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n  provide: ViewportRuler,\n  deps: [[new Optional(), new SkipSelf(), ViewportRuler], ScrollDispatcher],\n  useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {ElementRef, Injectable, NgZone, Optional, SkipSelf} from '@angular/core';\nimport {Platform} from '../../platform/index';\nimport {Scrollable} from './scrollable';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport'rxjs/add/observable/fromEvent';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/auditTime';\n/**\n * Time in ms to throttle the scrolling events by default.\n */\nexport const DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nexport class ScrollDispatcher {\n/**\n * @param {?} _ngZone\n * @param {?} _platform\n */\nconstructor(private _ngZone: NgZone,\nprivate _platform: Platform) { }\n/**\n * Subject for notifying that a registered scrollable reference element has been scrolled.\n */\n_scrolled: Subject<void> = new Subject<void>();\n/**\n * Keeps track of the global `scroll` and `resize` subscriptions.\n */\n_globalSubscription: Subscription = null;\n/**\n * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n */\nprivate _scrolledCount = 0;\n/**\n * Map of all the scrollable references that are registered with the service and their\n * scroll event subscriptions.\n */\nscrollableReferences: Map<Scrollable, Subscription> = new Map();\n/**\n * Registers a Scrollable with the service and listens for its scrolled events. When the\n * scrollable is scrolled, the service emits the event in its scrolled observable.\n * @param {?} scrollable Scrollable instance to be registered.\n * @return {?}\n */\nregister(scrollable: Scrollable): void {\n    const /** @type {?} */ scrollSubscription = scrollable.elementScrolled().subscribe(() => this._notify());\n\n    this.scrollableReferences.set(scrollable, scrollSubscription);\n  }\n/**\n * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n * @param {?} scrollable Scrollable instance to be deregistered.\n * @return {?}\n */\nderegister(scrollable: Scrollable): void {\n    if (this.scrollableReferences.has(scrollable)) {\n      this.scrollableReferences.get(scrollable).unsubscribe();\n      this.scrollableReferences.delete(scrollable);\n    }\n  }\n/**\n * Subscribes to an observable that emits an event whenever any of the registered Scrollable\n * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n * to override the default \"throttle\" time.\n * @param {?=} auditTimeInMs\n * @param {?=} callback\n * @return {?}\n */\nscrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME, callback: () => any): Subscription {\n    // Scroll events can only happen on the browser, so do nothing if we're not on the browser.\n    if (!this._platform.isBrowser) {\n      return Subscription.EMPTY;\n    }\n\n    // In the case of a 0ms delay, use an observable without auditTime\n    // since it does add a perceptible delay in processing overhead.\n    let /** @type {?} */ observable = auditTimeInMs > 0 ?\n      this._scrolled.asObservable().auditTime(auditTimeInMs) :\n      this._scrolled.asObservable();\n\n    this._scrolledCount++;\n\n    if (!this._globalSubscription) {\n      this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n        return Observable.merge(\n          Observable.fromEvent(window.document, 'scroll'),\n          Observable.fromEvent(window, 'resize')\n        ).subscribe(() => this._notify());\n      });\n    }\n\n    // Note that we need to do the subscribing from here, in order to be able to remove\n    // the global event listeners once there are no more subscriptions.\n    let /** @type {?} */ subscription = observable.subscribe(callback);\n\n    subscription.add(() => {\n      this._scrolledCount--;\n\n      if (this._globalSubscription && !this.scrollableReferences.size && !this._scrolledCount) {\n        this._globalSubscription.unsubscribe();\n        this._globalSubscription = null;\n      }\n    });\n\n    return subscription;\n  }\n/**\n * Returns all registered Scrollables that contain the provided element.\n * @param {?} elementRef\n * @return {?}\n */\ngetScrollContainers(elementRef: ElementRef): Scrollable[] {\n    const /** @type {?} */ scrollingContainers: Scrollable[] = [];\n\n    this.scrollableReferences.forEach((subscription: Subscription, scrollable: Scrollable) => {\n      if (this.scrollableContainsElement(scrollable, elementRef)) {\n        scrollingContainers.push(scrollable);\n      }\n    });\n\n    return scrollingContainers;\n  }\n/**\n * Returns true if the element is contained within the provided Scrollable.\n * @param {?} scrollable\n * @param {?} elementRef\n * @return {?}\n */\nscrollableContainsElement(scrollable: Scrollable, elementRef: ElementRef): boolean {\n    let /** @type {?} */ element = elementRef.nativeElement;\n    let /** @type {?} */ scrollableElement = scrollable.getElementRef().nativeElement;\n\n    // Traverse through the element parents until we reach null, checking if any of the elements\n    // are the scrollable's element.\n    do {\n      if (element == scrollableElement) { return true; }\n    } while (element = element.parentElement);\n  }\n/**\n * Sends a notification that a scroll event has been fired.\n * @return {?}\n */\n_notify() {\n    this._scrolled.next();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Platform, },\n];\n}\n\nfunction ScrollDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollDispatcher.ctorParameters;\n/**\n * Subject for notifying that a registered scrollable reference element has been scrolled.\n * @type {?}\n */\nScrollDispatcher.prototype._scrolled;\n/**\n * Keeps track of the global `scroll` and `resize` subscriptions.\n * @type {?}\n */\nScrollDispatcher.prototype._globalSubscription;\n/**\n * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n * @type {?}\n */\nScrollDispatcher.prototype._scrolledCount;\n/**\n * Map of all the scrollable references that are registered with the service and their\n * scroll event subscriptions.\n * @type {?}\n */\nScrollDispatcher.prototype.scrollableReferences;\n/** @type {?} */\nScrollDispatcher.prototype._ngZone;\n/** @type {?} */\nScrollDispatcher.prototype._platform;\n}\n\n/**\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nexport function SCROLL_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: ScrollDispatcher, ngZone: NgZone, platform: Platform) {\n  return parentDispatcher || new ScrollDispatcher(ngZone, platform);\n}\n\nexport const /** @type {?} */ SCROLL_DISPATCHER_PROVIDER = {\n  // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n  provide: ScrollDispatcher,\n  deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone, Platform],\n  useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {Platform} from './platform';\nexport class PlatformModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [Platform]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PlatformModule_tsickle_Closure_declarations() {\n/** @type {?} */\nPlatformModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPlatformModule.ctorParameters;\n}\n\n\n\nexport {Platform} from './platform';\nexport {getSupportedInputTypes} from './features';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","let /** @type {?} */ supportedInputTypes: Set<string>;\n/**\n * @return {?} The input types supported by this browser.\n */\nexport function getSupportedInputTypes(): Set<string> {\n  if (!supportedInputTypes) {\n    // let featureTestInput = document.createElement('input');\n    supportedInputTypes = new Set([\n      // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n      // first changing it to something else:\n      // The specified value \"\" does not conform to the required format.\n      // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n      'color',\n      'button',\n      'checkbox',\n      'date',\n      'datetime-local',\n      'email',\n      'file',\n      'hidden',\n      'image',\n      'month',\n      'number',\n      'password',\n      'radio',\n      'range',\n      'reset',\n      'search',\n      'submit',\n      'tel',\n      'text',\n      'time',\n      'url',\n      'week',\n    ].filter(value => {\n      // featureTestInput.setAttribute('type', value);\n      // return featureTestInput.type === value;\n        return true;  \n    }));\n  }\n  return supportedInputTypes;\n}\n","import {Injectable} from '@angular/core';\n\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nconst /** @type {?} */ hasV8BreakIterator = (typeof(Intl) !== 'undefined' && ( /** @type {?} */((Intl as any))).v8BreakIterator);\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n * \\@docs-private\n */\nexport class Platform {\n  isBrowser: boolean = typeof document === 'object' && !!document;\n/**\n * Layout Engines\n */\nEDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n  TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n\n  // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n  BLINK = this.isBrowser &&\n      (!!(( /** @type {?} */((window as any))).chrome || hasV8BreakIterator) && !!CSS && !this.EDGE && !this.TRIDENT);\n\n  // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n  // ensure that Webkit runs standalone and is not used as another engine's base.\n  WEBKIT = this.isBrowser &&\n      /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n/**\n * Browsers and Platform Types\n */\nIOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !(window as any).MSStream;\n\n  // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n  // them self as Gecko-like browsers and modify the userAgent's according to that.\n  // Since we only cover one explicit Firefox case, we can simply check for Firefox\n  // instead of having an unstable check for Gecko.\n  FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n\n  // Trident on mobile adds the android platform to the userAgent to trick detections.\n  ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction Platform_tsickle_Closure_declarations() {\n/** @type {?} */\nPlatform.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPlatform.ctorParameters;\n/** @type {?} */\nPlatform.prototype.isBrowser;\n/**\n * Layout Engines\n * @type {?}\n */\nPlatform.prototype.EDGE;\n/** @type {?} */\nPlatform.prototype.TRIDENT;\n/** @type {?} */\nPlatform.prototype.BLINK;\n/** @type {?} */\nPlatform.prototype.WEBKIT;\n/**\n * Browsers and Platform Types\n * @type {?}\n */\nPlatform.prototype.IOS;\n/** @type {?} */\nPlatform.prototype.FIREFOX;\n/** @type {?} */\nPlatform.prototype.ANDROID;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {ElementRef, NgZone} from '@angular/core';\nimport {Platform} from '../platform/platform';\nimport {ViewportRuler} from '../overlay/position/viewport-ruler';\nimport {RippleRef, RippleState} from './ripple-ref';\n/**\n * Fade-in duration for the ripples. Can be modified with the speedFactor option.\n */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n/**\n * Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor.\n */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  speedFactor?: number;\n  persistent?: boolean;\n};\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * \\@docs-private\n */\nexport class RippleRenderer {\n/**\n * Element where the ripples are being added to.\n */\nprivate _containerElement: HTMLElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n */\nprivate _triggerElement: HTMLElement;\n/**\n * Whether the mouse is currently down or not.\n */\nprivate _isMousedown: boolean = false;\n/**\n * Events to be registered on the trigger element.\n */\nprivate _triggerEvents = new Map<string, any>();\n/**\n * Set of currently active ripple references.\n */\nprivate _activeRipples = new Set<RippleRef>();\n/**\n * Ripple config for all ripples created by events.\n */\nrippleConfig: RippleConfig = {};\n/**\n * Whether mouse ripples should be created or not.\n */\nrippleDisabled: boolean = false;\n/**\n * @param {?} elementRef\n * @param {?} _ngZone\n * @param {?} _ruler\n * @param {?} platform\n */\nconstructor(\n      elementRef: ElementRef,\nprivate _ngZone: NgZone,\nprivate _ruler: ViewportRuler,\n      platform: Platform) {\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown.bind(this));\n      this._triggerEvents.set('mouseup', this.onMouseup.bind(this));\n      this._triggerEvents.set('mouseleave', this.onMouseLeave.bind(this));\n\n      // By default use the host element as trigger element.\n      this.setTriggerElement(this._containerElement);\n    }\n  }\n/**\n * Fades in a ripple at the given coordinates.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nfadeInRipple(pageX: number, pageY: number, config: RippleConfig = {}): RippleRef {\n    let /** @type {?} */ containerRect = this._containerElement.getBoundingClientRect();\n\n    if (config.centered) {\n      pageX = containerRect.left + containerRect.width / 2;\n      pageY = containerRect.top + containerRect.height / 2;\n    } else {\n      // Subtract scroll values from the coordinates because calculations below\n      // are always relative to the viewport rectangle.\n      let /** @type {?} */ scrollPosition = this._ruler.getViewportScrollPosition();\n      pageX -= scrollPosition.left;\n      pageY -= scrollPosition.top;\n    }\n\n    let /** @type {?} */ radius = config.radius || distanceToFurthestCorner(pageX, pageY, containerRect);\n    let /** @type {?} */ duration = RIPPLE_FADE_IN_DURATION * (1 / (config.speedFactor || 1));\n    let /** @type {?} */ offsetX = pageX - containerRect.left;\n    let /** @type {?} */ offsetY = pageY - containerRect.top;\n\n    let /** @type {?} */ ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    let /** @type {?} */ rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isMousedown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n/**\n * Fades out a ripple reference.\n * @param {?} rippleRef\n * @return {?}\n */\nfadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    let /** @type {?} */ rippleEl = rippleRef.element;\n\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode.removeChild(rippleEl);\n    }, RIPPLE_FADE_OUT_DURATION);\n  }\n/**\n * Fades out all currently active ripples.\n * @return {?}\n */\nfadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n/**\n * Sets the trigger element and registers the mouse events.\n * @param {?} element\n * @return {?}\n */\nsetTriggerElement(element: HTMLElement) {\n    // Remove all previously register event listeners from the trigger element.\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => this._triggerElement.removeEventListener(type, fn));\n    }\n\n    if (element) {\n      // If the element is not null, register all event listeners on the trigger element.\n      this._ngZone.runOutsideAngular(() => {\n        this._triggerEvents.forEach((fn, type) => element.addEventListener(type, fn));\n      });\n    }\n\n    this._triggerElement = element;\n  }\n/**\n * Listener being called on mousedown event.\n * @param {?} event\n * @return {?}\n */\nprivate onMousedown(event: MouseEvent) {\n    if (!this.rippleDisabled) {\n      this._isMousedown = true;\n      this.fadeInRipple(event.pageX, event.pageY, this.rippleConfig);\n    }\n  }\n/**\n * Listener being called on mouseup event.\n * @return {?}\n */\nprivate onMouseup() {\n    this._isMousedown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n/**\n * Listener being called on mouseleave event.\n * @return {?}\n */\nprivate onMouseLeave() {\n    if (this._isMousedown) {\n      this.onMouseup();\n    }\n  }\n/**\n * Runs a timeout outside of the Angular zone to avoid triggering the change detection.\n * @param {?} fn\n * @param {?=} delay\n * @return {?}\n */\nprivate runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n}\n\nfunction RippleRenderer_tsickle_Closure_declarations() {\n/**\n * Element where the ripples are being added to.\n * @type {?}\n */\nRippleRenderer.prototype._containerElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n * @type {?}\n */\nRippleRenderer.prototype._triggerElement;\n/**\n * Whether the mouse is currently down or not.\n * @type {?}\n */\nRippleRenderer.prototype._isMousedown;\n/**\n * Events to be registered on the trigger element.\n * @type {?}\n */\nRippleRenderer.prototype._triggerEvents;\n/**\n * Set of currently active ripple references.\n * @type {?}\n */\nRippleRenderer.prototype._activeRipples;\n/**\n * Ripple config for all ripples created by events.\n * @type {?}\n */\nRippleRenderer.prototype.rippleConfig;\n/**\n * Whether mouse ripples should be created or not.\n * @type {?}\n */\nRippleRenderer.prototype.rippleDisabled;\n/** @type {?} */\nRippleRenderer.prototype._ngZone;\n/** @type {?} */\nRippleRenderer.prototype._ruler;\n}\n\n/**\n * @param {?} element\n * @return {?}\n */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n * @param {?} x\n * @param {?} y\n * @param {?} rect\n * @return {?}\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const /** @type {?} */ distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const /** @type {?} */ distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","import {RippleConfig, RippleRenderer} from './ripple-renderer';\nexport type RippleState = number;\nexport let RippleState: any = {};\nRippleState.FADING_IN = 0;\nRippleState.VISIBLE = 1;\nRippleState.FADING_OUT = 2;\nRippleState.HIDDEN = 3;\nRippleState[RippleState.FADING_IN] = \"FADING_IN\";\nRippleState[RippleState.VISIBLE] = \"VISIBLE\";\nRippleState[RippleState.FADING_OUT] = \"FADING_OUT\";\nRippleState[RippleState.HIDDEN] = \"HIDDEN\";\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n/**\n * Current state of the ripple reference.\n */\nstate: RippleState = RippleState.HIDDEN;\n/**\n * @param {?} _renderer\n * @param {?} element\n * @param {?} config\n */\nconstructor(\nprivate _renderer: RippleRenderer,\npublic element: HTMLElement,\npublic config: RippleConfig) {\n  }\n/**\n * Fades out the ripple element.\n * @return {?}\n */\nfadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n\nfunction RippleRef_tsickle_Closure_declarations() {\n/**\n * Current state of the ripple reference.\n * @type {?}\n */\nRippleRef.prototype.state;\n/** @type {?} */\nRippleRef.prototype._renderer;\n/** @type {?} */\nRippleRef.prototype.element;\n/** @type {?} */\nRippleRef.prototype.config;\n}\n\n","\n/**\n * Coerces a data-bound value (typically a string) to a boolean.\n * @param {?} value\n * @return {?}\n */\nexport function coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n","\n// Due to a bug in the ChromeDriver, Angular keyboard events are not triggered by `sendKeys`\n// during E2E tests when using dot notation such as `(keydown.rightArrow)`. To get around this,\n// we are temporarily using a single (keydown) handler.\n// See: https://github.com/angular/angular/issues/9419\n\nexport const /** @type {?} */ UP_ARROW = 38;\nexport const /** @type {?} */ DOWN_ARROW = 40;\nexport const /** @type {?} */ RIGHT_ARROW = 39;\nexport const /** @type {?} */ LEFT_ARROW = 37;\n\nexport const /** @type {?} */ PAGE_UP = 33;\nexport const /** @type {?} */ PAGE_DOWN = 34;\n\nexport const /** @type {?} */ HOME = 36;\nexport const /** @type {?} */ END = 35;\n\nexport const /** @type {?} */ ENTER = 13;\nexport const /** @type {?} */ SPACE = 32;\nexport const /** @type {?} */ TAB = 9;\n\nexport const /** @type {?} */ ESCAPE = 27;\nexport const /** @type {?} */ BACKSPACE = 8;\nexport const /** @type {?} */ DELETE = 46;\n","import {\n  Directive,\n  ElementRef,\n  NgModule,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  AfterContentInit,\n  Injectable,\n} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport'rxjs/add/operator/debounceTime';\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * \\@docs-private\n */\nexport class MdMutationObserverFactory {\n/**\n * @param {?} callback\n * @return {?}\n */\ncreate(callback): MutationObserver {\n    return new MutationObserver(callback);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdMutationObserverFactory_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMutationObserverFactory.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMutationObserverFactory.ctorParameters;\n}\n\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nexport class ObserveContent implements AfterContentInit, OnDestroy {\nprivate _observer: MutationObserver;\n/**\n * Event emitted for each change in the element's content.\n */\nevent = new EventEmitter<MutationRecord[]>();\n/**\n * Used for debouncing the emitted values to the observeContent event.\n */\nprivate _debouncer = new Subject<MutationRecord[]>();\n/**\n * Debounce interval for emitting the changes.\n */\ndebounce: number;\n/**\n * @param {?} _mutationObserverFactory\n * @param {?} _elementRef\n */\nconstructor(\nprivate _mutationObserverFactory: MdMutationObserverFactory,\nprivate _elementRef: ElementRef) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    if (this.debounce > 0) {\n      this._debouncer\n        .debounceTime(this.debounce)\n        .subscribe(mutations => this.event.emit(mutations));\n    } else {\n      this._debouncer.subscribe(mutations => this.event.emit(mutations));\n    }\n\n    this._observer = this._mutationObserverFactory.create((mutations: MutationRecord[]) => {\n      this._debouncer.next(mutations);\n    });\n\n    this._observer.observe(this._elementRef.nativeElement, {\n      characterData: true,\n      childList: true,\n      subtree: true\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._observer) {\n      this._observer.disconnect();\n      this._debouncer.complete();\n      this._debouncer = this._observer = null;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkObserveContent]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdMutationObserverFactory, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'event': [{ type: Output, args: ['cdkObserveContent', ] },],\n'debounce': [{ type: Input },],\n};\n}\n\nfunction ObserveContent_tsickle_Closure_declarations() {\n/** @type {?} */\nObserveContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nObserveContent.ctorParameters;\n/** @type {?} */\nObserveContent.propDecorators;\n/** @type {?} */\nObserveContent.prototype._observer;\n/**\n * Event emitted for each change in the element's content.\n * @type {?}\n */\nObserveContent.prototype.event;\n/**\n * Used for debouncing the emitted values to the observeContent event.\n * @type {?}\n */\nObserveContent.prototype._debouncer;\n/**\n * Debounce interval for emitting the changes.\n * @type {?}\n */\nObserveContent.prototype.debounce;\n/** @type {?} */\nObserveContent.prototype._mutationObserverFactory;\n/** @type {?} */\nObserveContent.prototype._elementRef;\n}\n\nexport class ObserveContentModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [ObserveContent],\n  declarations: [ObserveContent],\n  providers: [MdMutationObserverFactory]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ObserveContentModule_tsickle_Closure_declarations() {\n/** @type {?} */\nObserveContentModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nObserveContentModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  NgModule,\n  Directive,\n  HostBinding,\n  Output,\n  Input,\n  EventEmitter\n} from '@angular/core';\n\nexport type LayoutDirection = 'ltr' | 'rtl';\n/**\n * Directive to listen for changes of direction of part of the DOM.\n * \n * Applications should use this directive instead of the native attribute so that Material\n * components can listen on changes of direction.\n */\nexport class Dir {\n/**\n * Layout direction of the element.\n */\n_dir: LayoutDirection = 'ltr';\n/**\n * Event emitted when the direction changes.\n */\ndirChange = new EventEmitter<void>();\n/**\n * \\@docs-private\n * @return {?}\n */\nget dir(): LayoutDirection {\n    return this._dir;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset dir(v: LayoutDirection) {\n    let /** @type {?} */ old = this._dir;\n    this._dir = v;\n    if (old != this._dir) {\n      this.dirChange.emit();\n    }\n  }\n/**\n * Current layout direction of the element.\n * @return {?}\n */\nget value(): LayoutDirection { return this.dir; }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: LayoutDirection) { this.dir = v; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[dir]',\n  // TODO(hansl): maybe `$implicit` isn't the best option here, but for now that's the best we got.\n  exportAs: '$implicit'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_dir': [{ type: Input, args: ['dir', ] },],\n'dirChange': [{ type: Output },],\n'dir': [{ type: HostBinding, args: ['attr.dir', ] },],\n};\n}\n\nfunction Dir_tsickle_Closure_declarations() {\n/** @type {?} */\nDir.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDir.ctorParameters;\n/** @type {?} */\nDir.propDecorators;\n/**\n * Layout direction of the element.\n * @type {?}\n */\nDir.prototype._dir;\n/**\n * Event emitted when the direction changes.\n * @type {?}\n */\nDir.prototype.dirChange;\n}\n\nexport class RtlModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [Dir],\n  declarations: [Dir]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RtlModule_tsickle_Closure_declarations() {\n/** @type {?} */\nRtlModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRtlModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  NgModule,\n  Directive,\n  Renderer2,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MdCommonModule} from '../common-behaviors/common-module';\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a \\@ContentChildren(MdLine) query, then\n * counted by checking the query list's length.\n */\nexport class MdLine {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-line], [mat-line]',\n  host: {\n    '[class.mat-line]': 'true'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLine_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLine.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLine.ctorParameters;\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * \\@docs-private\n */\nexport class MdLineSetter {\n/**\n * @param {?} _lines\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _lines: QueryList<MdLine>,\nprivate _renderer: Renderer2,\nprivate _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n/**\n * @param {?} count\n * @return {?}\n */\nprivate _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n/**\n * @param {?} className\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._renderer.addClass(this._element.nativeElement, className);\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, className);\n    }\n  }\n\n}\n\nfunction MdLineSetter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineSetter.prototype._lines;\n/** @type {?} */\nMdLineSetter.prototype._renderer;\n/** @type {?} */\nMdLineSetter.prototype._element;\n}\n\nexport class MdLineModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [MdLine, MdCommonModule],\n  declarations: [MdLine],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLineModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLineModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {NgModule} from '@angular/core';\nimport {CompatibilityModule} from '../compatibility/compatibility';\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, compatibility mode, etc.\n * \n * This module should be imported to each top-level component module (e.g., MdTabsModule).\n */\nexport class MdCommonModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule],\n  exports: [CompatibilityModule],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCommonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCommonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCommonModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  NgModule,\n  Directive,\n  Inject,\n  Optional,\n  isDevMode,\n  ElementRef,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/platform-browser';\n\nexport const /** @type {?} */ MATERIAL_COMPATIBILITY_MODE = new InjectionToken<boolean>('md-compatibility-mode');\n/**\n * Injection token that configures whether the Material sanity checks are enabled.\n */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('md-sanity-checks');\n/**\n * Returns an exception to be thrown if the consumer has used\n * an invalid Material prefix on a component.\n * \\@docs-private\n * @param {?} prefix\n * @param {?} nodeName\n * @return {?}\n */\nexport function getMdCompatibilityInvalidPrefixError(prefix: string, nodeName: string) {\n  return new Error(`The \"${prefix}-\" prefix cannot be used in ng-material v1 compatibility mode. ` +\n                   `It was used on an \"${nodeName.toLowerCase()}\" element.`);\n}\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MAT_ELEMENTS_SELECTOR = `\n  [mat-button],\n  [mat-card-subtitle],\n  [mat-card-title],\n  [mat-dialog-actions],\n  [mat-dialog-close],\n  [mat-dialog-content],\n  [mat-dialog-title],\n  [mat-fab],\n  [mat-icon-button],\n  [mat-menu-trigger-for],\n  [mat-mini-fab],\n  [mat-raised-button],\n  [mat-tab-label],\n  [mat-tab-link],\n  [mat-tab-nav-bar],\n  [matTooltip],\n  mat-autocomplete,\n  mat-button-toggle,\n  mat-button-toggle-group,\n  mat-button-toggle,\n  mat-card,\n  mat-card-actions,\n  mat-card-content,\n  mat-card-footer,\n  mat-card-header,\n  mat-card-subtitle,\n  mat-card-title,\n  mat-card-title-group,\n  mat-checkbox,\n  mat-chip,\n  mat-dialog-actions,\n  mat-dialog-container,\n  mat-dialog-content,\n  mat-divider,\n  mat-grid-list,\n  mat-grid-tile,\n  mat-grid-tile-footer,\n  mat-grid-tile-header,\n  mat-hint,\n  mat-icon,\n  mat-list,\n  mat-list-item,\n  mat-menu,\n  mat-nav-list,\n  mat-option,\n  mat-placeholder,\n  mat-progress-bar,\n  mat-pseudo-checkbox,\n  mat-radio-button,\n  mat-radio-group,\n  mat-select,\n  mat-sidenav,\n  mat-sidenav-container,\n  mat-slider,\n  mat-spinner,\n  mat-tab,\n  mat-tab-group,\n  mat-toolbar,\n  mat-error`;\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MD_ELEMENTS_SELECTOR = `\n  [md-button],\n  [md-card-subtitle],\n  [md-card-title],\n  [md-dialog-actions],\n  [md-dialog-close],\n  [md-dialog-content],\n  [md-dialog-title],\n  [md-fab],\n  [md-icon-button],\n  [md-menu-trigger-for],\n  [md-mini-fab],\n  [md-raised-button],\n  [md-tab-label],\n  [md-tab-link],\n  [md-tab-nav-bar],\n  [mdTooltip],\n  md-autocomplete,\n  md-button-toggle,\n  md-button-toggle-group,\n  md-button-toggle,\n  md-card,\n  md-card-actions,\n  md-card-content,\n  md-card-footer,\n  md-card-header,\n  md-card-subtitle,\n  md-card-title,\n  md-card-title-group,\n  md-checkbox,\n  md-chip,\n  md-dialog-actions,\n  md-dialog-container,\n  md-dialog-content,\n  md-divider,\n  md-grid-list,\n  md-grid-tile,\n  md-grid-tile-footer,\n  md-grid-tile-header,\n  md-hint,\n  md-icon,\n  md-list,\n  md-list-item,\n  md-menu,\n  md-nav-list,\n  md-option,\n  md-placeholder,\n  md-progress-bar,\n  md-pseudo-checkbox,\n  md-radio-button,\n  md-radio-group,\n  md-select,\n  md-sidenav,\n  md-sidenav-container,\n  md-slider,\n  md-spinner,\n  md-tab,\n  md-tab-group,\n  md-toolbar,\n  md-error`;\n/**\n * Directive that enforces that the `mat-` prefix cannot be used.\n */\nexport class MatPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\n      isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (!isCompatibilityMode) {\n      throw getMdCompatibilityInvalidPrefixError('mat', elementRef.nativeElement.nodeName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MAT_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MatPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPrefixRejector.ctorParameters;\n}\n\n/**\n * Directive that enforces that the `md-` prefix cannot be used.\n */\nexport class MdPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\n      isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (isCompatibilityMode) {\n      throw getMdCompatibilityInvalidPrefixError('md', elementRef.nativeElement.nodeName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MD_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MdPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefixRejector.ctorParameters;\n}\n\n/**\n * Module that enforces the default compatibility mode settings. When this module is loaded\n * without NoConflictStyleCompatibilityMode also being imported, it will throw an error if\n * there are any uses of the `mat-` prefix.\n */\nexport class CompatibilityModule {\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n */\nprivate _hasDoneGlobalChecks = false;\n/**\n * @param {?} _document\n * @param {?} _sanityChecksEnabled\n */\nconstructor(\nprivate _document: any,\n      _sanityChecksEnabled: boolean) {\n\n    if (_sanityChecksEnabled && !this._hasDoneGlobalChecks && _document && isDevMode()) {\n      // Delay running the check to allow more time for the user's styles to load.\n      this._checkDoctype();\n      this._checkTheme();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkDoctype(): void {\n    if (!this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkTheme(): void {\n    if (typeof getComputedStyle === 'function') {\n      const /** @type {?} */ testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      if (getComputedStyle(testElement).display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [MatPrefixRejector, MdPrefixRejector],\n  exports: [MatPrefixRejector, MdPrefixRejector],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_SANITY_CHECKS, ] }, ]},\n];\n}\n\nfunction CompatibilityModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCompatibilityModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCompatibilityModule.ctorParameters;\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n * @type {?}\n */\nCompatibilityModule.prototype._hasDoneGlobalChecks;\n/** @type {?} */\nCompatibilityModule.prototype._document;\n}\n\n/**\n * Module that enforces \"no-conflict\" compatibility mode settings. When this module is loaded,\n * it will throw an error if there are any uses of the `md-` prefix.\n */\nexport class NoConflictStyleCompatibilityMode {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [{\n    provide: MATERIAL_COMPATIBILITY_MODE, useValue: true,\n  }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NoConflictStyleCompatibilityMode_tsickle_Closure_declarations() {\n/** @type {?} */\nNoConflictStyleCompatibilityMode.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNoConflictStyleCompatibilityMode.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}"],"names":["EventEmitter","Injectable","Output","Input","ViewEncapsulation","Component","Optional","Inject","ChangeDetectionStrategy","ChangeDetectorRef","ViewContainerRef","Directive","Observable","NG_VALUE_ACCESSOR","ContentChildren","ViewChild","TemplateRef","tslib_1.__extends","CommonModule","NgModule","Subject","NgZone","transition","animate","state","style","trigger","InjectionToken","ElementRef","Renderer2","SkipSelf","FormsModule","ContentChild","NgControl","Self","HostBinding","DomSanitizer","Http","clamp","SecurityContext","forwardRef","HAMMER_GESTURE_CONFIG","nextId","HammerGestureConfig","Injector","ComponentFactoryResolver","Subscription"],"mappings":"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}